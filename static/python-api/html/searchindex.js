Search.setIndex({"docnames": ["genfiles/bittensor", "genfiles/bittensor.axon", "genfiles/bittensor.chain_data", "genfiles/bittensor.cli", "genfiles/bittensor.commands", "genfiles/bittensor.commands.delegates", "genfiles/bittensor.commands.inspect", "genfiles/bittensor.commands.list", "genfiles/bittensor.commands.metagraph", "genfiles/bittensor.commands.misc", "genfiles/bittensor.commands.network", "genfiles/bittensor.commands.overview", "genfiles/bittensor.commands.register", "genfiles/bittensor.commands.root", "genfiles/bittensor.commands.senate", "genfiles/bittensor.commands.stake", "genfiles/bittensor.commands.transfer", "genfiles/bittensor.commands.unstake", "genfiles/bittensor.commands.utils", "genfiles/bittensor.commands.wallets", "genfiles/bittensor.config", "genfiles/bittensor.dendrite", "genfiles/bittensor.errors", "genfiles/bittensor.extrinsics", "genfiles/bittensor.extrinsics.delegation", "genfiles/bittensor.extrinsics.log_utilities", "genfiles/bittensor.extrinsics.network", "genfiles/bittensor.extrinsics.prometheus", "genfiles/bittensor.extrinsics.registration", "genfiles/bittensor.extrinsics.root", "genfiles/bittensor.extrinsics.senate", "genfiles/bittensor.extrinsics.serving", "genfiles/bittensor.extrinsics.set_weights", "genfiles/bittensor.extrinsics.staking", "genfiles/bittensor.extrinsics.transfer", "genfiles/bittensor.extrinsics.unstaking", "genfiles/bittensor.keyfile", "genfiles/bittensor.logging", "genfiles/bittensor.metagraph", "genfiles/bittensor.mock", "genfiles/bittensor.mock.keyfile_mock", "genfiles/bittensor.mock.subtensor_mock", "genfiles/bittensor.mock.wallet_mock", "genfiles/bittensor.stream", "genfiles/bittensor.subtensor", "genfiles/bittensor.synapse", "genfiles/bittensor.tensor", "genfiles/bittensor.threadpool", "genfiles/bittensor.types", "genfiles/bittensor.utils", "genfiles/bittensor.utils.balance", "genfiles/bittensor.utils.formatting", "genfiles/bittensor.utils.networking", "genfiles/bittensor.utils.registration", "genfiles/bittensor.utils.registratrion_old", "genfiles/bittensor.utils.stats", "genfiles/bittensor.utils.test_utils", "genfiles/bittensor.utils.wallet_utils", "genfiles/bittensor.utils.weight_utils", "genfiles/bittensor.wallet", "genfiles/modules", "index"], "filenames": ["genfiles/bittensor.rst", "genfiles/bittensor.axon.rst", "genfiles/bittensor.chain_data.rst", "genfiles/bittensor.cli.rst", "genfiles/bittensor.commands.rst", "genfiles/bittensor.commands.delegates.rst", "genfiles/bittensor.commands.inspect.rst", "genfiles/bittensor.commands.list.rst", "genfiles/bittensor.commands.metagraph.rst", "genfiles/bittensor.commands.misc.rst", "genfiles/bittensor.commands.network.rst", "genfiles/bittensor.commands.overview.rst", "genfiles/bittensor.commands.register.rst", "genfiles/bittensor.commands.root.rst", "genfiles/bittensor.commands.senate.rst", "genfiles/bittensor.commands.stake.rst", "genfiles/bittensor.commands.transfer.rst", "genfiles/bittensor.commands.unstake.rst", "genfiles/bittensor.commands.utils.rst", "genfiles/bittensor.commands.wallets.rst", "genfiles/bittensor.config.rst", "genfiles/bittensor.dendrite.rst", "genfiles/bittensor.errors.rst", "genfiles/bittensor.extrinsics.rst", "genfiles/bittensor.extrinsics.delegation.rst", "genfiles/bittensor.extrinsics.log_utilities.rst", "genfiles/bittensor.extrinsics.network.rst", "genfiles/bittensor.extrinsics.prometheus.rst", "genfiles/bittensor.extrinsics.registration.rst", "genfiles/bittensor.extrinsics.root.rst", "genfiles/bittensor.extrinsics.senate.rst", "genfiles/bittensor.extrinsics.serving.rst", "genfiles/bittensor.extrinsics.set_weights.rst", "genfiles/bittensor.extrinsics.staking.rst", "genfiles/bittensor.extrinsics.transfer.rst", "genfiles/bittensor.extrinsics.unstaking.rst", "genfiles/bittensor.keyfile.rst", "genfiles/bittensor.logging.rst", "genfiles/bittensor.metagraph.rst", "genfiles/bittensor.mock.rst", "genfiles/bittensor.mock.keyfile_mock.rst", "genfiles/bittensor.mock.subtensor_mock.rst", "genfiles/bittensor.mock.wallet_mock.rst", "genfiles/bittensor.stream.rst", "genfiles/bittensor.subtensor.rst", "genfiles/bittensor.synapse.rst", "genfiles/bittensor.tensor.rst", "genfiles/bittensor.threadpool.rst", "genfiles/bittensor.types.rst", "genfiles/bittensor.utils.rst", "genfiles/bittensor.utils.balance.rst", "genfiles/bittensor.utils.formatting.rst", "genfiles/bittensor.utils.networking.rst", "genfiles/bittensor.utils.registration.rst", "genfiles/bittensor.utils.registratrion_old.rst", "genfiles/bittensor.utils.stats.rst", "genfiles/bittensor.utils.test_utils.rst", "genfiles/bittensor.utils.wallet_utils.rst", "genfiles/bittensor.utils.weight_utils.rst", "genfiles/bittensor.wallet.rst", "genfiles/modules.rst", "index.rst"], "titles": ["bittensor package", "bittensor.axon module", "bittensor.chain_data module", "bittensor.cli module", "bittensor.commands package", "bittensor.commands.delegates module", "bittensor.commands.inspect module", "bittensor.commands.list module", "bittensor.commands.metagraph module", "bittensor.commands.misc module", "bittensor.commands.network module", "bittensor.commands.overview module", "bittensor.commands.register module", "bittensor.commands.root module", "bittensor.commands.senate module", "bittensor.commands.stake module", "bittensor.commands.transfer module", "bittensor.commands.unstake module", "bittensor.commands.utils module", "bittensor.commands.wallets module", "bittensor.config module", "bittensor.dendrite module", "bittensor.errors module", "bittensor.extrinsics package", "bittensor.extrinsics.delegation module", "bittensor.extrinsics.log_utilities module", "bittensor.extrinsics.network module", "bittensor.extrinsics.prometheus module", "bittensor.extrinsics.registration module", "bittensor.extrinsics.root module", "bittensor.extrinsics.senate module", "bittensor.extrinsics.serving module", "bittensor.extrinsics.set_weights module", "bittensor.extrinsics.staking module", "bittensor.extrinsics.transfer module", "bittensor.extrinsics.unstaking module", "bittensor.keyfile module", "bittensor.logging module", "bittensor.metagraph module", "bittensor.mock package", "bittensor.mock.keyfile_mock module", "bittensor.mock.subtensor_mock module", "bittensor.mock.wallet_mock module", "bittensor.stream module", "bittensor.subtensor module", "bittensor.synapse module", "bittensor.tensor module", "bittensor.threadpool module", "bittensor.types module", "bittensor.utils package", "bittensor.utils.balance module", "bittensor.utils.formatting module", "bittensor.utils.networking module", "bittensor.utils.registration module", "bittensor.utils.registratrion_old module", "bittensor.utils.stats module", "bittensor.utils.test_utils module", "bittensor.utils.wallet_utils module", "bittensor.utils.weight_utils module", "bittensor.wallet module", "bittensor", "Welcome to Bittensor API Documentation"], "terms": {"command": [0, 1, 3, 61], "extrins": [0, 61], "mock": [0, 36, 61], "util": [0, 1, 4, 41, 44, 61], "u16_normalized_float": [0, 49, 61], "u64_normalized_float": [0, 49, 61], "get_explorer_root_url_by_network_from_map": [0, 49, 61], "get_explorer_url_for_network": [0, 49, 61], "hash": [0, 1, 42, 45, 49, 61], "ss58_address_to_byt": [0, 49, 61], "ss58_to_vec_u8": [0, 49, 61], "strtobool": [0, 49, 61], "strtobool_with_default": [0, 49, 61], "u8_key_to_ss58": [0, 49, 61], "unbiased_topk": [0, 49, 61], "version_check": [0, 49, 61], "axon": [0, 21, 31, 38, 41, 44, 45, 48, 61], "modul": [0, 4, 23, 39, 49, 61], "axonmiddlewar": [0, 1, 61], "fastapithreadedserv": [0, 1, 61], "chain_data": [0, 61], "axoninfo": [0, 1, 2, 21, 44, 61], "chaindatatyp": [0, 2, 61], "delegateinfo": [0, 2, 5, 14, 41, 44, 61], "ipinfo": [0, 2, 44, 61], "neuroninfo": [0, 2, 41, 44, 61], "neuroninfolit": [0, 2, 41, 44, 61], "prometheusinfo": [0, 2, 61], "proposalvotedata": [0, 2, 14, 44, 61], "stakeinfo": [0, 2, 44, 61], "subnethyperparamet": [0, 2, 44, 61], "subnetinfo": [0, 2, 41, 44, 61], "from_scale_encod": [0, 2, 61], "from_scale_encoding_using_type_str": [0, 2, 61], "cli": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 61], "config": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 37, 43, 44, 45, 46, 47, 59, 61], "defaultconfig": [0, 20, 61], "invalidconfigfil": [0, 20, 61], "dendrit": [0, 45, 61], "error": [0, 1, 21, 33, 37, 46, 53, 59, 61], "chainconnectionerror": [0, 22, 61], "chainerror": [0, 22, 61], "chainqueryerror": [0, 22, 61], "chaintransactionerror": [0, 22, 61], "keyfileerror": [0, 22, 36, 40, 59, 61], "nominationerror": [0, 22, 61], "notdelegateerror": [0, 22, 24, 33, 61], "notregisterederror": [0, 22, 24, 33, 61], "registrationerror": [0, 22, 61], "stakeerror": [0, 22, 61], "transfererror": [0, 22, 61], "unstakeerror": [0, 22, 61], "keyfil": [0, 22, 40, 42, 59, 61], "mockkeyfil": [0, 36, 39, 40, 61], "ask_password_to_encrypt": [0, 36, 61], "decrypt_keyfile_data": [0, 36, 61], "deserialize_keypair_from_keyfile_data": [0, 36, 61], "encrypt_keyfile_data": [0, 36, 61], "get_coldkey_password_from_environ": [0, 36, 61], "keyfile_data_encryption_method": [0, 36, 61], "keyfile_data_is_encrypt": [0, 36, 61], "keyfile_data_is_encrypted_ans": [0, 36, 61], "keyfile_data_is_encrypted_legaci": [0, 36, 61], "keyfile_data_is_encrypted_nacl": [0, 36, 61], "legacy_encrypt_keyfile_data": [0, 36, 61], "serialized_keypair_to_keyfile_data": [0, 36, 61], "validate_password": [0, 36, 61], "log": [0, 1, 21, 28, 53, 61], "metagraph": [0, 4, 44, 58, 59, 61], "get_save_dir": [0, 38, 61], "latest_block_path": [0, 38, 61], "stream": [0, 61], "btstreamingresponsemodel": [0, 43, 61], "streamingsynaps": [0, 43, 61], "subtensor": [0, 1, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 53, 58, 61], "paramwithtyp": [0, 44, 61], "synaps": [0, 1, 21, 43, 61], "terminalinfo": [0, 45, 61], "cast_float": [0, 45, 61], "cast_int": [0, 45, 61], "get_siz": [0, 45, 61], "tensor": [0, 2, 45, 49, 58, 61], "cast_dtyp": [0, 46, 61], "cast_shap": [0, 46, 61], "threadpool": [0, 61], "brokenthreadpool": [0, 47, 61], "prioritythreadpoolexecutor": [0, 47, 61], "type": [0, 1, 2, 3, 14, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 58, 59, 61], "axonservecallparam": [0, 39, 41, 48, 61], "prometheusservecallparam": [0, 39, 41, 48, 61], "wallet": [0, 1, 4, 5, 7, 11, 18, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 44, 50, 53, 61], "display_mnemonic_msg": [0, 59, 61], "creat": [1, 10, 19, 36, 40, 42, 43, 45, 49, 53, 59], "init": 1, "whcih": 1, "servic": 1, "forward": [1, 21], "backward": 1, "request": [1, 21, 45], "from": [1, 2, 3, 5, 17, 20, 21, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 52, 58, 59], "other": [1, 21, 47, 59], "neuron": [1, 2, 12, 21, 22, 32, 38, 41, 44, 58], "class": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 59], "arg": [1, 3, 18, 20, 21, 38, 41, 43, 45, 46, 47, 52], "ani": [1, 2, 18, 19, 20, 21, 22, 26, 33, 35, 38, 41, 43, 45, 46, 53], "kwarg": [1, 18, 20, 21, 38, 41, 42, 43, 45, 46, 47, 59], "base": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59], "basehttpmiddlewar": 1, "handl": [1, 3, 43, 44, 52], "entir": [1, 8], "process": [1, 21, 28, 38, 43, 46, 53], "It": [1, 21, 36, 43, 47, 50], "fill": 1, "necessari": 1, "inform": [1, 21, 28, 38], "manag": [1, 3, 20, 43, 59], "messag": [1, 21, 59], "verif": [1, 45], "blacklist": [1, 45], "check": [1, 3, 18, 19, 36, 37, 45, 52, 53, 57, 59], "run": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 41, 44, 47, 53, 59], "prioriti": [1, 47, 59], "function": [1, 21, 43, 45, 49], "thi": [1, 2, 3, 19, 21, 34, 36, 41, 43, 44, 45, 47, 50, 53, 59, 61], "also": [1, 21, 41, 43, 59], "updat": [1, 19, 21, 28, 36, 38, 53, 55], "header": [1, 21, 43, 45], "respons": [1, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43], "async": [1, 21, 43], "i": [1, 2, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 57, 58, 59], "paramet": [1, 3, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 53, 57, 58, 59], "The": [1, 3, 21, 24, 28, 31, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 57, 59], "instanc": [1, 45, 47], "repres": [1, 21, 36, 38, 45, 46, 47, 50], "rais": [1, 21, 22, 24, 33, 36, 40, 46, 47, 49, 52, 53, 59], "except": [1, 20, 22, 36, 46, 47, 52, 53], "If": [1, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 53], "dispatch": 1, "starlett": [1, 43], "call_next": 1, "middlewar": 1, "requestresponseendpoint": 1, "incom": 1, "call": [1, 21, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 41, 43, 47, 48], "after": [1, 21, 43, 47, 58], "return": [1, 2, 3, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 57, 58, 59], "postprocess": 1, "start_tim": 1, "float": [1, 2, 21, 24, 29, 32, 33, 34, 35, 41, 44, 45, 49, 50, 53, 55, 58], "perform": [1, 50], "post": 1, "oper": [1, 3, 36, 50, 58, 59], "starlet": 1, "start": [1, 2, 53], "time": [1, 38, 47, 55], "preprocess": [1, 21], "gener": [1, 43, 59], "state": [1, 21, 38, 41], "object": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 53, 55, 59], "execut": [1, 3, 47], "A": [1, 20, 41, 43, 45, 47, 50, 53, 55], "determin": [1, 44], "urgenc": 1, "compar": 1, "param": [1, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 44, 49, 50, 52, 53, 58, 59], "out": [1, 37], "verifi": [1, 36], "fail": [1, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 47, 52], "server": [1, 21, 43], "install_signal_handl": 1, "is_run": 1, "bool": [1, 2, 18, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 44, 45, 49, 53, 57, 59], "fals": [1, 2, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 44, 45, 49, 53, 57, 59], "run_in_thread": 1, "should_exit": 1, "stop": [1, 53], "none": [1, 2, 3, 5, 18, 21, 24, 27, 28, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 58, 59], "port": [1, 2, 27, 31, 41, 44, 48, 52], "int": [1, 2, 5, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 59], "ip": [1, 2, 27, 31, 38, 41, 44, 48, 52], "str": [1, 2, 3, 14, 18, 20, 24, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 49, 50, 52, 53, 57, 59], "external_ip": [1, 52], "external_port": 1, "max_work": [1, 47], "an": [1, 2, 8, 11, 19, 21, 22, 27, 31, 36, 40, 43, 45, 46, 49, 50, 52, 53, 59], "form": [1, 52], "core": [1, 52, 53], "part": 1, "": [1, 11, 14, 15, 17, 21, 28, 33, 38, 43, 45, 53, 59], "serv": [1, 2, 23, 27, 41, 44, 48], "reli": 1, "heavili": 1, "underli": 1, "fastapi": [1, 21], "router": [1, 52], "which": [1, 20, 29, 32, 43, 44, 45, 59], "endpoint": [1, 2, 21, 27, 31, 44, 52], "differ": [1, 3, 20, 37, 45, 50, 53], "method": [1, 21, 41, 43, 44, 45, 47, 50], "ar": [1, 21, 22, 36, 44, 45, 46, 47, 49, 59], "equip": 1, "deal": 1, "scenario": [1, 36], "network": [1, 4, 5, 9, 13, 21, 23, 27, 29, 31, 38, 41, 43, 44, 49, 58], "face": [1, 52], "accept": [1, 37, 47, 59], "multipl": [1, 21, 53], "argument": [1, 3, 37, 44, 47, 59], "like": [1, 3, 18, 44], "configur": [1, 3, 20], "address": [1, 24, 33, 34, 35, 38, 41, 44, 49, 57, 59], "bind": 1, "extern": [1, 52], "max": [1, 58], "worker": [1, 47], "kei": [1, 3, 29, 32, 34, 36, 44, 49, 57, 59], "involv": 1, "applic": [1, 43], "includ": [1, 21, 26, 30, 33, 35, 43], "attach": 1, "offer": 1, "flexibl": 1, "specifi": [1, 24, 33, 35, 38, 44], "custom": [1, 45], "rule": 1, "priorit": 1, "against": [1, 36], "encapsul": [1, 43], "add": [1, 3, 20, 33, 44, 45], "line": [1, 3, 53], "user": [1, 2, 18, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 59], "friendli": 1, "interact": [1, 44, 50], "program": 1, "support": [1, 36], "defin": [1, 36, 40], "behavior": [1, 45], "intern": [1, 43], "mechan": 1, "thread": [1, 28, 47, 53], "pool": 1, "concurr": 1, "us": [1, 21, 22, 28, 31, 33, 35, 36, 38, 40, 42, 43, 44, 45, 47, 53, 59], "level": 1, "exampl": [1, 21], "usag": 1, "python": [1, 61], "import": 1, "mysyanps": 1, "input": [1, 2, 21, 36, 40, 45, 59], "1": [1, 2, 47, 49, 55, 58], "output": 1, "def": 1, "appli": 1, "logic": [1, 43, 45], "2": [1, 2], "verify_my_synaps": 1, "option": [1, 21, 24, 36, 38, 40, 41, 42, 44, 45, 46, 53, 59], "fucntion": 1, "blacklist_my_synaps": 1, "non": [1, 22, 36, 40, 45, 59], "true": [1, 2, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 49, 53, 57, 59], "prioritize_my_synap": 1, "0": [1, 2, 21, 28, 29, 31, 32, 44, 49, 52, 53, 55, 58], "initi": [1, 38, 43, 47], "my_axon": 1, "my_config": 1, "my_wallet": 1, "9090": 1, "192": [1, 27, 31], "203": 1, "113": 1, "7070": 1, "forward_fn": 1, "forward_my_synaps": 1, "verify_fn": 1, "blacklist_fn": 1, "priority_fn": 1, "forward_my_synapse_2": 1, "verify_my_synapse_2": 1, "blacklist_my_synapse_2": 1, "prioritize_my_synape_2": 1, "netuid": [1, 2, 9, 10, 26, 27, 28, 29, 31, 32, 38, 41, 44, 48, 53, 58], "classmethod": [1, 2, 10, 14, 15, 17, 18, 20, 37, 41, 44, 45, 47, 59], "add_arg": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 37, 44, 47, 59], "parser": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 37, 44, 47, 59], "argumentpars": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 37, 44, 47, 59], "prefix": [1, 37, 44, 45, 47, 59], "axonserv": 1, "specif": [1, 26, 37, 43, 45, 47, 59], "argpars": [1, 59], "ad": [1, 45], "name": [1, 2, 18, 26, 36, 38, 41, 44, 45, 49, 59], "default": [1, 20, 21, 33, 35, 36, 40, 41, 44, 45, 49, 53, 59], "environ": [1, 36, 53], "variabl": [1, 36, 45], "valu": [1, 2, 18, 20, 26, 29, 32, 38, 41, 44, 45, 46, 49, 52, 55, 58], "callabl": [1, 43, 47, 49], "regist": [1, 4, 10, 13, 14, 18, 22, 24, 26, 28, 29, 30, 33, 41, 44, 53], "api": 1, "first": [1, 33, 45], "when": [1, 18, 22, 45, 47, 49, 52, 53], "access": [1, 45, 59], "should": [1, 28, 41, 43, 44, 45, 53, 59], "have": [1, 45, 47], "least": 1, "one": [1, 20, 41, 47], "filter": [1, 37], "undesir": 1, "take": [1, 2, 20, 43, 49], "same": [1, 53, 59], "boolean": [1, 20, 49], "mean": [1, 45, 53], "rank": [1, 2, 38], "numer": 1, "sort": [1, 5, 49], "self": [1, 20, 45, 55], "default_verifi": 1, "note": [1, 41, 52, 59], "design": [1, 21, 36, 43], "receiv": [1, 21], "assertionerror": 1, "doe": [1, 36, 40, 41, 44, 45, 49, 53], "signatur": [1, 18, 43], "yoursynaps": 1, "potenti": 1, "chain": [1, 5, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 44, 48, 58], "check_config": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 37], "hold": [1, 59], "set": [1, 3, 10, 13, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 56, 59], "rang": [1, 52], "1024": 1, "65535": 1, "pars": [1, 21, 43, 45], "authent": 1, "digit": 1, "ensur": [1, 43], "wa": [1, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45], "tamper": 1, "sent": [1, 43], "expect": [1, 43], "sender": 1, "receiver_hotkei": 1, "doesn": 1, "t": [1, 20, 38, 49], "match": 1, "nonc": [1, 28, 53], "larger": 1, "than": [1, 58], "previou": 1, "success": [1, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 45], "given": [1, 29, 32, 41, 44, 45, 46, 47, 49, 50, 53, 57], "assum": 1, "asymmetr": 1, "encrypt": [1, 36, 40, 59], "algorithm": 1, "where": [1, 36, 50], "sign": [1, 21], "privat": 1, "public": [1, 34, 44, 59], "help": [1, 37, 44, 59], "print": [1, 5, 8, 11, 21, 36, 37, 44, 53, 59], "text": 1, "list": [1, 2, 3, 4, 5, 9, 10, 13, 18, 20, 21, 28, 29, 32, 33, 35, 38, 41, 44, 46, 49, 53, 58, 59], "descript": [1, 18], "stdout": [1, 37, 44, 59], "info": [1, 2, 37, 44], "associ": [1, 2, 41, 44, 47], "pass": [1, 24, 29, 32, 33, 36, 41, 43, 44, 52, 58, 59], "connect": [1, 22, 44], "subnet": [1, 2, 9, 10, 28, 41, 44, 53, 58], "uid": [1, 2, 26, 27, 29, 31, 32, 33, 35, 38, 41, 42, 44, 58], "grpc": 1, "mark": 1, "verify_body_integr": 1, "asynchron": [1, 21, 43], "integr": 1, "bodi": [1, 43, 45], "requir": [1, 22, 36, 41, 43, 52, 53, 59], "field": [1, 45], "correspond": [1, 29, 32], "provid": [1, 21, 36, 42, 43, 45, 50, 61], "critic": 1, "payload": 1, "ha": [1, 2, 20, 43], "been": [1, 20, 43, 45, 47], "alter": 1, "dure": 1, "transmiss": 1, "establish": 1, "trust": [1, 2, 38], "secur": 1, "between": [1, 28, 50, 58], "contain": [1, 43, 59], "both": 1, "dictionari": [1, 2, 38, 45], "all": [1, 5, 9, 10, 15, 20, 21, 33, 35, 41, 44, 47, 52], "comparison": [1, 50], "indic": [1, 20, 36, 45, 49], "intact": 1, "dict": [1, 2, 18, 21, 38, 41, 43, 44, 45, 49, 53, 59], "jsonrespons": 1, "400": 1, "statu": [1, 45, 53], "code": [1, 45, 59], "issu": 1, "detail": 1, "mismatch": 1, "depend": 1, "rout": 1, "app": 1, "some_endpoint": 1, "body_dict": 1, "avail": [1, 18], "onli": [1, 41, 42, 59], "version": [2, 29, 32, 36, 38, 40, 41, 42, 48, 52], "ip_typ": [2, 41, 48, 52], "hotkei": [2, 3, 15, 17, 19, 22, 24, 29, 32, 33, 35, 38, 41, 42, 44, 59], "coldkei": [2, 3, 19, 33, 35, 38, 41, 42, 44, 59], "protocol": [2, 3, 14, 31, 41, 44], "4": [2, 27, 31, 52], "placeholder1": [2, 31, 41, 44], "placeholder2": [2, 31, 41, 44], "from_neuron_info": 2, "neuron_info": 2, "convert": [2, 45, 49, 50, 58], "axon_info": 2, "from_parameter_dict": 2, "parameter_dict": 2, "torch": [2, 29, 32, 38, 44, 46, 49, 58], "nn": [2, 38], "parameterdict": 2, "ip_str": [2, 52], "whole": 2, "string": [2, 20, 21, 36, 40, 45, 46, 49, 50, 52, 59], "properti": [2, 21, 36, 38, 40, 42, 44, 45, 47, 50, 59], "is_serv": 2, "to_parameter_dict": 2, "qualnam": 2, "boundari": 2, "enum": 2, "3": [2, 28, 44, 52, 53], "delegatedinfo": 2, "5": 2, "7": 2, "6": [2, 52], "8": [2, 49], "hotkey_ss58": [2, 33, 35, 41, 44], "total_stak": [2, 38, 44], "balanc": [2, 24, 33, 34, 35, 41, 44, 49, 59], "nomin": [2, 5, 22, 44], "tupl": [2, 41, 44, 58, 59], "owner_ss58": 2, "validator_permit": [2, 38], "registr": [2, 22, 23, 49], "return_per_1000": 2, "total_daily_return": 2, "dataclass": 2, "deleg": [2, 4, 22, 23, 33, 41, 44], "delegated_list_from_vec_u8": 2, "vec_u8": 2, "amount": [2, 15, 16, 17, 24, 33, 34, 35, 44, 50, 55], "stake": [2, 4, 5, 22, 23, 24, 34, 35, 38, 41, 44, 59], "fix_decoded_valu": 2, "decod": [2, 44], "fix": 2, "from_vec_u8": 2, "list_from_vec_u8": 2, "encod": [2, 45, 49], "can": [2, 43, 47, 59], "activ": [2, 14, 38, 41], "stake_dict": 2, "emiss": [2, 38], "incent": [2, 38, 44], "consensu": [2, 38], "validator_trust": [2, 38], "dividend": [2, 38], "last_upd": [2, 38], "weight": [2, 13, 29, 32, 38, 44, 58, 59], "bond": [2, 38, 44, 58], "prometheus_info": 2, "pruning_scor": 2, "is_nul": 2, "metadata": [2, 38, 41, 44], "neuron_info_decod": 2, "from_weights_bonds_and_neuron_lit": 2, "neuron_lit": 2, "weights_as_dict": 2, "bonds_as_dict": 2, "without": [2, 36], "block": [2, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 44, 49, 53], "prometheu": [2, 23, 41, 48], "prometheus_info_decod": 2, "typeddict": [2, 41, 44, 48], "ay": 2, "end": 2, "index": [2, 44, 49], "nai": 2, "threshold": 2, "coldkey_ss58": [2, 41, 44], "list_of_tuple_from_vec_u8": 2, "rho": [2, 41, 44], "kappa": [2, 41, 44], "immunity_period": [2, 44], "min_allowed_weight": [2, 44], "max_weight_limit": [2, 44], "tempo": [2, 44], "min_difficulti": 2, "max_difficulti": 2, "weights_vers": 2, "weights_rate_limit": 2, "adjustment_interv": 2, "activity_cutoff": 2, "registration_allow": 2, "target_regs_per_interv": 2, "min_burn": 2, "max_burn": 2, "bonds_moving_avg": 2, "max_regs_per_block": 2, "hyperparamet": [2, 10, 26], "difficulti": [2, 41, 44, 53], "max_allowed_valid": [2, 44], "scaling_law_pow": [2, 44], "subnetwork_n": [2, 44], "max_n": [2, 44], "blocks_since_epoch": [2, 44], "modal": 2, "connection_requir": 2, "emission_valu": 2, "burn": [2, 44], "byte": [2, 36, 40, 44, 49, 53, 57, 59], "scalecodec": [2, 14, 44], "scalebyt": 2, "type_nam": 2, "is_vec": 2, "is_opt": 2, "type_str": 2, "implement": [3, 20, 21, 43, 45, 47, 59], "interfac": [3, 36, 40, 43], "token": [3, 15, 16, 17, 41, 43, 44, 59], "transfer": [3, 4, 22, 23, 44, 59], "static": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 44, 46, 50], "essenti": 3, "exist": [3, 36, 40, 41, 44, 53, 59], "under": [3, 19, 36, 40, 59], "create_config": 3, "executor": [3, 47], "local": [3, 21, 41, 44, 52], "delegatestakecommand": [4, 5], "delegateunstakecommand": [4, 5], "listdelegatescommand": [4, 5], "mydelegatescommand": [4, 5], "nominatecommand": [4, 5], "show_deleg": [4, 5], "inspect": 4, "inspectcommand": [4, 6], "listcommand": [4, 7], "metagraphcommand": [4, 8], "misc": 4, "listsubnetscommand": [4, 9], "updatecommand": [4, 9], "registersubnetworkcommand": [4, 10], "subnetgethyperparamscommand": [4, 10], "subnethyperparamscommand": [4, 10], "subnetlistcommand": [4, 10], "subnetlockcostcommand": [4, 10], "subnetsudocommand": [4, 10], "overview": 4, "overviewcommand": [4, 11], "recycleregistercommand": [4, 12], "registercommand": [4, 12], "runfaucetcommand": [4, 12], "root": [4, 23, 38, 44, 49, 58], "rootgetweightscommand": [4, 13], "rootlist": [4, 13], "rootregistercommand": [4, 13], "rootsetweightscommand": [4, 13], "senat": [4, 23], "proposalscommand": [4, 14], "senatecommand": [4, 14], "senateleavecommand": [4, 14], "senateregistercommand": [4, 14], "showvotescommand": [4, 14], "votecommand": [4, 14], "display_vot": [4, 14], "format_call_data": [4, 14], "stakecommand": [4, 15], "stakeshow": [4, 15], "transfercommand": [4, 16], "unstak": [4, 22, 23, 24, 44, 59], "unstakecommand": [4, 17], "delegatesdetail": [4, 18], "intlistprompt": [4, 18], "check_for_cuda_reg_config": [4, 18], "check_netuid_set": [4, 18], "get_all_wallets_for_path": [4, 18], "get_coldkey_wallets_for_path": [4, 18], "get_delegates_detail": [4, 18], "get_hotkey_wallets_for_wallet": [4, 18], "newcoldkeycommand": [4, 19], "newhotkeycommand": [4, 19], "regencoldkeycommand": [4, 19], "regencoldkeypubcommand": [4, 19], "regenhotkeycommand": [4, 19], "updatewalletcommand": [4, 19], "walletcreatecommand": [4, 19], "undeleg": [5, 44], "prev_deleg": 5, "width": 5, "pretti": 5, "tabl": 5, "total": [5, 38, 45], "cold": [6, 36], "hot": 6, "pair": 6, "subnetwork": [10, 26], "view": [10, 14], "lock": 10, "cost": 10, "new": [10, 19, 26, 45, 53, 59], "colkei": [11, 59], "recycl": [12, 28, 44], "some": 12, "tao": [12, 24, 28, 33, 34, 35, 44, 50, 59], "get": [13, 20, 28, 37, 38, 45, 47, 49, 55, 59], "govern": 14, "propos": 14, "discard": 14, "membership": 14, "particip": 14, "vote": [14, 30, 44], "vote_data": 14, "delegate_info": 14, "call_data": 14, "genericcal": [14, 44], "show": 15, "account": [15, 29, 32, 33, 34, 41, 44, 49], "destin": [16, 32, 34, 44, 57, 58], "command_pars": 17, "url": [18, 49, 52], "from_json": 18, "json": [18, 21, 43, 59], "promptbas": 18, "prompt": [18, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44], "integ": [18, 45, 50, 52, 58], "check_choic": 18, "cuda": [18, 28, 44, 53], "would": [18, 45], "devic": [18, 28, 36, 40, 53, 59], "allow_non": 18, "path": [18, 36, 38, 40, 59], "hotk": 19, "coldkeypub": [19, 42, 59], "need": [19, 36], "In": [20, 21, 45, 52], "place": [20, 53], "yamlerror": 20, "defaultmunch": 20, "copi": 20, "is_set": 20, "param_nam": 20, "whether": [20, 21, 38, 59], "still": 20, "merg": [20, 21], "b": [20, 38], "current": [20, 36, 38, 40, 41, 44, 45, 53], "anoth": 20, "merge_al": 20, "conflict": 20, "last": [20, 38, 55], "preced": 20, "to_str": 20, "item": [20, 45], "update_with_kwarg": 20, "inherit": [21, 45], "pytorch": 21, "abstract": [21, 41, 43], "client": [21, 43], "brain": 21, "analogi": 21, "signal": 21, "case": 21, "here": 21, "send": [21, 43], "those": 21, "reciev": [21, 34], "keypair": [21, 36, 40, 42, 59], "make": [21, 34, 41], "http": [21, 45], "__str__": 21, "represent": [21, 31, 45, 52, 58], "__repr__": 21, "act": 21, "fallback": 21, "dendrite_obj": 21, "d": [21, 38], "ping": 21, "target_axon": 21, "pydant": [21, 43], "basemodel": [21, 43, 45, 46], "timeout": [21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 49], "12": [21, 59], "deseri": [21, 36, 43, 45, 46], "target": 21, "union": [21, 24, 28, 29, 32, 33, 34, 35, 46, 53, 57, 59], "durat": 21, "second": [21, 55], "close_sess": 21, "run_async": 21, "singl": 21, "preprocess_synapse_for_request": 21, "target_axon_info": 21, "build": 21, "process_server_respons": 21, "server_respons": 21, "json_respons": 21, "local_synaps": 21, "aiohttp": 21, "attribut": 21, "silent": 21, "ignor": [21, 36], "queri": [21, 22, 41, 44], "synchron": [21, 38], "session": 21, "clientsess": 21, "relat": 22, "baseexcept": 22, "transact": [22, 24], "thrown": 22, "corrupt": [22, 36, 40, 59], "writabl": [22, 36, 40], "readabl": [22, 36, 40], "password": [22, 36, 40, 59], "decrypt": [22, 36, 40, 59], "invalid": [22, 46], "you": 22, "try": 22, "delegate_extrins": [23, 24], "nominate_extrins": [23, 24], "undelegate_extrins": [23, 24], "log_util": 23, "register_subnetwork_extrins": [23, 26], "set_hyperparameter_extrins": [23, 26], "prometheus_extrins": [23, 27], "burned_register_extrins": [23, 28], "register_extrins": [23, 28], "run_faucet_extrins": [23, 28], "root_register_extrins": [23, 29], "set_root_weights_extrins": [23, 29], "leave_senate_extrins": [23, 30], "register_senate_extrins": [23, 30], "vote_senate_extrins": [23, 30], "serve_axon_extrins": [23, 31], "serve_extrins": [23, 31], "set_weight": [23, 44], "set_weights_extrins": [23, 32], "add_stake_extrins": [23, 33], "add_stake_multiple_extrins": [23, 33], "transfer_extrins": [23, 34], "unstake_extrins": [23, 35], "unstake_multiple_extrins": [23, 35], "delegate_ss58": [24, 44], "wait_for_inclus": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44], "wait_for_fin": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44], "ss58": [24, 33, 35, 41, 44, 49, 57, 59], "interpret": [24, 33, 34, 35], "wait": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47], "enter": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 59], "befor": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 53], "within": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 53], "final": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45], "confirm": [24, 26, 28, 29, 30, 31, 32, 33, 34, 35], "proceed": [24, 26, 28, 29, 30, 31, 32, 33, 34, 35], "flag": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44], "unclud": [24, 27, 28, 29, 31, 32, 33, 34, 35], "we": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 52], "did": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "inclus": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "becom": [24, 44], "un": 24, "subscrib": [27, 31, 59], "substensor": [27, 31], "host": [27, 31], "e": [27, 31, 38, 41, 44, 59], "122": [27, 31], "31": [27, 31], "number": [27, 28, 31, 38, 41, 44, 49, 53, 55, 58, 59], "9221": [27, 31], "max_allowed_attempt": [28, 44], "output_in_plac": [28, 44, 53], "dev_id": [28, 44, 53], "tpb": [28, 44, 53], "256": [28, 44, 45, 53], "num_process": [28, 44, 53], "update_interv": [28, 44, 53], "log_verbos": [28, 44, 53], "maximum": 28, "attempt": [28, 45, 52], "id": [28, 45, 53], "per": [28, 53, 55], "solv": [28, 53], "more": [28, 53], "continu": 28, "pow": [28, 50, 53], "faucet": 28, "test": [28, 36, 41, 42, 44], "net": 28, "longtensor": [29, 32, 44, 49, 58], "floattensor": [29, 32, 38, 44, 58], "version_kei": [29, 32, 44], "subent": [29, 32], "must": [29, 32, 43, 52, 59], "valid": [29, 32, 36, 38, 43, 44, 52, 57], "remov": [30, 35, 44], "proposal_hash": [30, 44], "proposal_idx": [30, 44], "being": [31, 43], "placehold": 31, "futur": [31, 47], "uint64": 32, "each": [33, 35, 44, 59], "common": [33, 35, 44], "dest": [34, 41, 44], "keep_al": 34, "fund": [34, 44, 59], "ss58_address": [34, 41, 44, 49, 57, 59], "ed25519": [34, 57], "keep": [34, 59], "aliv": 34, "abov": 34, "existenti": [34, 44], "deposit": [34, 44], "simul": 36, "actual": 36, "filesystem": 36, "store": [36, 40, 41, 50], "treat": [36, 40], "data": [36, 40, 43, 44, 45, 46], "serial": [36, 45, 46], "check_and_update_encrypt": 36, "no_prompt": 36, "print_result": 36, "do": [36, 40], "anyth": [36, 49], "sinc": [36, 55], "context": [36, 45], "valueerror": [36, 49, 53], "alwai": 36, "exists_on_devic": [36, 40], "although": 36, "file": [36, 40, 42, 59], "system": [36, 41], "get_keypair": [36, 40], "is_encrypt": [36, 40], "is_read": [36, 40], "read": 36, "is_writ": [36, 40], "written": 36, "make_dir": [36, 40], "directori": [36, 38, 40], "noth": [36, 40], "set_keypair": [36, 40], "overwrit": [36, 40, 59], "rtype": [36, 40, 41, 44, 52, 59], "keyfile_data": [36, 40], "coldkey_nam": 36, "ansibl": 36, "vault": 36, "ask": [36, 40], "retriev": [36, 43, 45], "decrypted_data": 36, "incorrect": [36, 40, 59], "substrateinterfac": [36, 40, 42, 44, 59], "load": [36, 38, 59], "cannot": [36, 52], "construct": [36, 45], "encrypted_data": 36, "found": 36, "substrat": [36, 41, 44], "result": [36, 45], "skip": 36, "most": 36, "nacl": 36, "els": [36, 49], "on_devic": [36, 40], "thei": [36, 40], "write": [36, 40], "forc": [36, 40, 41], "encryption_method": 36, "is_ans": 36, "legaci": 36, "is_legaci": 36, "is_nacl": 36, "polici": 36, "meet": 36, "standard": 37, "debug": 37, "trace": 37, "record_log": 37, "logging_dir": 37, "fro": 37, "sufix": 37, "get_level": 37, "log_filt": 37, "record": [37, 41], "log_formatt": 37, "format": [37, 41, 43, 44, 49, 52, 57], "accord": [37, 43], "extra": 37, "log_save_filt": 37, "log_save_formatt": 37, "set_debug": 37, "debug_on": 37, "cl": 37, "set_trac": 37, "trace_on": 37, "back": [37, 43], "warn": [37, 59], "dir_path": 38, "latest": [38, 44], "neural": 38, "graph": 38, "n": [38, 49, 51, 58], "permit": 38, "c": 38, "r": 38, "tv": 38, "w": [38, 52], "load_from_path": 38, "save": [38, 59], "sync": [38, 41, 44], "lite": [38, 41, 44], "keyfile_mock": 39, "subtensor_mock": 39, "axoninfodict": [39, 41], "infodict": [39, 41], "mockchainst": [39, 41], "mockmapresult": [39, 41], "mocksubtensor": [39, 41], "mocksubtensorst": [39, 41], "mocksubtensorvalu": [39, 41], "mocksystemst": [39, 41], "prometheusinfodict": [39, 41], "wallet_mock": 39, "mockwallet": [39, 42], "get_mock_coldkei": [39, 42], "get_mock_hotkei": [39, 42], "get_mock_keypair": [39, 42], "get_mock_wallet": [39, 42], "just": 40, "map": [41, 49, 52], "subtensormodul": 41, "g": [41, 44], "query_subtensor": [41, 44], "instead": [41, 43], "block_numb": [41, 44, 53], "chain_stat": 41, "create_subnet": 41, "do_block_step": 41, "force_register_neuron": 41, "\u03c40": 41, "000000000": 41, "force_set_bal": 41, "err_msg": 41, "get_all_subnets_info": [41, 44], "get_bal": [41, 44], "42": [41, 44], "get_block_hash": [41, 44], "block_id": [41, 44], "get_current_block": [41, 44], "blocknumb": [41, 44], "get_delegate_by_hotkei": [41, 44], "get_deleg": [41, 44], "get_subnet_info": [41, 44], "get_transfer_fe": [41, 44], "neuron_for_uid": [41, 44], "particular": [41, 44], "neuron_for_uid_lit": [41, 44], "pull": [41, 44], "neurons_lit": [41, 44], "query_const": [41, 44], "module_nam": [41, 44], "constant_nam": [41, 44], "query_map_subtensor": [41, 44], "doubl": 41, "reset": 41, "set_difficulti": 41, "setup": 41, "sudo_force_set_bal": 41, "immunityperiod": 41, "networksad": 41, "validatorbatchs": 41, "meant": 42, "coldkey_fil": [42, 59], "coldkeypub_fil": [42, 59], "hotkey_fil": [42, 59], "test_nam": 42, "seed": [42, 59], "uniqu": [42, 52], "model": 43, "streamer": 43, "btstreamingrespons": 43, "await": 43, "content": [43, 49], "typic": [43, 45], "them": [43, 59], "conform": 43, "clear": 43, "token_stream": 43, "asgi": 43, "abc": 43, "subclass": [43, 45], "extract": [43, 45], "streamingrespons": 43, "special": 43, "intend": [43, 45], "directli": [43, 45], "instanti": 43, "modifi": 43, "develop": 43, "create_streaming_respons": 43, "stream_respons": 43, "appropri": [43, 45], "event": [43, 55], "validate_assign": [43, 45, 46], "readi": 43, "extract_response_json": 43, "structur": 43, "process_streaming_respons": 43, "accumul": 43, "chunk": 43, "_mock": 44, "factori": 44, "By": [44, 45], "finnei": 44, "main": 44, "add_stak": 44, "add_stake_multipl": 44, "associated_validator_ip_info": 44, "validator_ip_info": 44, "burned_regist": 44, "determine_chain_endpoint_and_network": 44, "chain_endpoint": 44, "choic": 44, "overrid": 44, "does_hotkey_exist": 44, "get_all_neurons_for_pubkei": 44, "get_all_subnet_netuid": 44, "get_all_uids_for_hotkei": 44, "get_axon_info": 44, "get_delegate_tak": 44, "get_emission_value_by_subnet": 44, "get_existential_deposit": 44, "get_hotkey_own": 44, "get_netuids_for_hotkei": 44, "get_neuron_for_pubkey_and_subnet": 44, "get_nominators_for_hotkei": 44, "get_prometheus_info": 44, "get_proposal_call_data": 44, "get_proposal_hash": 44, "get_proposal_vote_data": 44, "get_propos": 44, "get_senate_memb": 44, "get_stak": 44, "get_stake_for_coldkey_and_hotkei": 44, "get_stake_info_for_coldkei": 44, "coldkey_ss58_list": 44, "get_subnet_burn_cost": 44, "get_subnet_connection_requir": 44, "netuid_0": 44, "netuid_1": 44, "get_subnet_hyperparamet": 44, "get_subnet_mod": 44, "get_subnet_own": 44, "get_subnet": 44, "get_total_stake_for_coldkei": 44, "get_total_stake_for_hotkei": 44, "get_total_subnet": 44, "get_uid_for_hotkey_on_subnet": 44, "get_vote_data": 44, "i_map": 44, "is_hotkey_deleg": 44, "is_hotkey_regist": 44, "is_hotkey_registered_ani": 44, "is_hotkey_registered_on_subnet": 44, "is_senate_memb": 44, "leave_sen": 44, "neuron_for_wallet": 44, "neuron_has_validator_permit": 44, "query_map": 44, "querymapresult": 44, "query_modul": 44, "query_runtime_api": 44, "runtime_api": 44, "scale": 44, "register_sen": 44, "register_subnetwork": 44, "root_regist": 44, "root_set_weight": 44, "run_faucet": 44, "serve_axon": 44, "serve_prometheu": 44, "serving_rate_limit": 44, "set_hyperparamet": 44, "610": 44, "setup_config": 44, "state_cal": 44, "subnet_exist": 44, "synergy_scaling_law_pow": 44, "total_issu": 44, "tx_rate_limit": 44, "unstake_multipl": 44, "validator_batch_s": 44, "validator_epoch_length": 44, "validator_epochs_per_reset": 44, "validator_exclude_quantil": 44, "validator_logits_diverg": 44, "validator_prune_len": 44, "validator_sequence_length": 44, "vote_sen": 44, "body_hash": 45, "comput": 45, "sha3": 45, "compris": 45, "its": 45, "required_fields_hash": 45, "concaten": 45, "hexadecim": 45, "overridden": 45, "superclass": 45, "simpli": 45, "itself": 45, "own": 45, "desir": 45, "failed_verif": 45, "401": 45, "unauthor": 45, "otherwis": [45, 47, 57], "from_head": 45, "get_total_s": 45, "size": 45, "calcul": 45, "assign": 45, "total_s": 45, "is_blacklist": 45, "403": 45, "forbidden": 45, "is_failur": 45, "failur": 45, "200": 45, "is_success": 45, "is_timeout": 45, "408": 45, "parse_headers_to_input": 45, "input_obj": 45, "identifi": 45, "transform": 45, "remain": 45, "set_name_typ": 45, "to_head": 45, "taken": 45, "further": 45, "shape": [45, 46], "For": 45, "raw": [45, 46], "obj": 45, "seen": 45, "recurs": 45, "find": 45, "travers": 45, "everi": 45, "sum": [45, 58], "buffer": 46, "dtype": 46, "encount": 46, "numpi": 46, "ndarrai": 46, "tolist": 46, "cast": 46, "element": 46, "threadpoolexecutor": 47, "brokenexecutor": 47, "maxsiz": 47, "thread_name_prefix": 47, "initarg": 47, "queue": 47, "is_empti": 47, "shutdown": 47, "clean": 47, "up": 47, "resourc": 47, "safe": [47, 59], "sever": 47, "until": 47, "finish": 47, "reclaim": 47, "cancel_futur": 47, "cancel": 47, "pend": 47, "complet": 47, "submit": 47, "fn": 47, "schedul": 47, "x": [49, 58], "network_map": 49, "explor": 49, "Or": 49, "block_hash": [49, 53], "known": 49, "utf": 49, "val": 49, "liter": 49, "supress": 49, "truth": 49, "y": [49, 58], "ye": 49, "f": 49, "off": 49, "empti": 49, "u8_kei": 49, "u8": 49, "k": 49, "dim": 49, "largest": 49, "select": 49, "topk": 49, "bia": 49, "lower": 49, "equal": [49, 53], "15": 49, "get_human_read": [49, 51], "millifi": [49, 51], "externalipnotfound": [49, 52], "get_external_ip": [49, 52], "get_formatted_ws_endpoint_url": [49, 52], "int_to_ip": [49, 52], "ip__str__": [49, 52], "ip_to_int": [49, 52], "ip_vers": [49, 52], "cudaexcept": [49, 53], "powsolut": [49, 53], "registrationstatist": [49, 53], "registrationstatisticslogg": [49, 53], "create_pow": [49, 53], "get_cpu_count": [49, 53], "registratrion_old": 49, "stat": [49, 53], "amountpersecondrollingaverag": [49, 55], "eventspersecondrollingaverag": [49, 55], "timed_rolling_avg": [49, 55], "test_util": 49, "get_random_unused_port": [49, 56], "wallet_util": 49, "get_ss58_format": [49, 57], "is_valid_bittensor_address_or_public_kei": [49, 57], "is_valid_ed25519_pubkei": [49, 57], "is_valid_ss58_address": [49, 57], "weight_util": 49, "convert_bond_uids_and_vals_to_tensor": [49, 58], "convert_root_weight_uids_and_vals_to_tensor": [49, 58], "convert_weight_uids_and_vals_to_tensor": [49, 58], "convert_weights_and_uids_for_emit": [49, 58], "normalize_max_weight": [49, 58], "process_weights_for_netuid": [49, 58], "rao": 50, "wai": [50, 59], "two": 50, "unit": 50, "well": 50, "arithmet": 50, "symbol": 50, "rao_unit": 50, "give": 50, "from_float": 50, "10": 50, "9": 50, "from_rao": 50, "from_tao": 50, "\u03c1": 50, "\u03c4": 50, "num": 51, "suffix": 51, "h": 51, "attain": 52, "your": [52, 59], "curl": 52, "urllib": 52, "ipifi": 52, "aw": 52, "endpoint_url": 52, "websocket": 52, "lack": 52, "thereof": 52, "left": 52, "unchang": 52, "wss": 52, "formatted_endpoint_url": 52, "int_val": 52, "4028237e": 52, "38": 52, "int128": 52, "Of": 52, "ipv4": 52, "ipv6": 52, "str_val": 52, "tyep": 52, "netaddr": 52, "addrformaterror": 52, "either": [52, 59], "occur": 53, "seal": 53, "solut": 53, "problem": 53, "is_stal": 53, "stale": 53, "time_spent_tot": 53, "rounds_tot": 53, "time_averag": 53, "time_sp": 53, "hash_rate_perpetu": 53, "hash_rat": 53, "statist": 53, "consol": 53, "rich": 53, "get_status_messag": 53, "verbos": 53, "proof": 53, "work": 53, "progress": 53, "32": 53, "cpu": 53, "alreadi": 53, "exponenti": 55, "move": 55, "averag": 55, "initial_valu": 55, "alpha": 55, "count": 55, "quantiti": 55, "new_valu": 55, "allocated_port": 56, "public_kei": [57, 59], "convers": 58, "row": 58, "row_bond": 58, "invers": 58, "row_weight": 58, "u32": 58, "max_int_weight": 58, "weight_val": 58, "weight_uid": 58, "limit": 58, "normal": 58, "so": 58, "greater": 58, "max_valu": 58, "exclude_quantil": 58, "key_typ": 59, "displai": 59, "mnemon": 59, "mainten": 59, "primari": 59, "node": 59, "hand": 59, "link": 59, "through": 59, "cryptokeyerror": 59, "incorrec": 59, "txt": 59, "colkeypub": 59, "coldkey_use_password": 59, "hotkey_use_password": 59, "create_coldkey_from_uri": 59, "uri": 59, "use_password": 59, "suppress": 59, "suri": 59, "alic": 59, "bob": 59, "protect": 59, "Will": 59, "newli": 59, "create_hotkey_from_uri": 59, "create_if_non_exist": 59, "create_new_coldkei": 59, "n_word": 59, "disk": 59, "word": 59, "create_new_hotkei": 59, "get_coldkei": 59, "get_coldkeypub": 59, "get_hotkei": 59, "new_coldkei": 59, "new_hotkei": 59, "recreat": 59, "regen_coldkei": 59, "regener": 59, "space": 59, "separ": 59, "hex": 59, "restor": 59, "backup": 59, "json_data": 59, "passphras": 59, "order": 59, "regen_coldkeypub": 59, "re": 59, "regen_hotkei": 59, "regenerate_coldkei": 59, "regenerate_coldkeypub": 59, "regenerate_hotkei": 59, "set_coldkei": 59, "set_coldkeypub": 59, "set_hotkei": 59, "packag": [60, 61], "subpackag": [60, 61], "submodul": [60, 61], "section": 61, "search": 61, "page": 61}, "objects": {"bittensor": [[1, 0, 0, "-", "axon"], [2, 0, 0, "-", "chain_data"], [3, 0, 0, "-", "cli"], [4, 0, 0, "-", "commands"], [20, 0, 0, "-", "config"], [21, 0, 0, "-", "dendrite"], [22, 0, 0, "-", "errors"], [23, 0, 0, "-", "extrinsics"], [36, 0, 0, "-", "keyfile"], [37, 0, 0, "-", "logging"], [38, 0, 0, "-", "metagraph"], [39, 0, 0, "-", "mock"], [43, 0, 0, "-", "stream"], [44, 0, 0, "-", "subtensor"], [45, 0, 0, "-", "synapse"], [46, 0, 0, "-", "tensor"], [47, 0, 0, "-", "threadpool"], [48, 0, 0, "-", "types"], [49, 0, 0, "-", "utils"], [59, 0, 0, "-", "wallet"]], "bittensor.axon": [[1, 1, 1, "", "AxonMiddleware"], [1, 1, 1, "", "FastAPIThreadedServer"], [1, 1, 1, "", "axon"]], "bittensor.axon.AxonMiddleware": [[1, 2, 1, "", "blacklist"], [1, 2, 1, "", "dispatch"], [1, 2, 1, "", "postprocess"], [1, 2, 1, "", "preprocess"], [1, 2, 1, "", "priority"], [1, 2, 1, "", "run"], [1, 2, 1, "", "verify"]], "bittensor.axon.FastAPIThreadedServer": [[1, 2, 1, "", "install_signal_handlers"], [1, 3, 1, "", "is_running"], [1, 2, 1, "", "run_in_thread"], [1, 3, 1, "", "should_exit"], [1, 2, 1, "", "start"], [1, 2, 1, "", "stop"]], "bittensor.axon.axon": [[1, 2, 1, "", "add_args"], [1, 2, 1, "", "attach"], [1, 2, 1, "", "check_config"], [1, 2, 1, "", "config"], [1, 2, 1, "", "default_verify"], [1, 2, 1, "", "help"], [1, 2, 1, "", "info"], [1, 2, 1, "", "serve"], [1, 2, 1, "", "start"], [1, 2, 1, "", "stop"], [1, 2, 1, "", "verify_body_integrity"]], "bittensor.chain_data": [[2, 1, 1, "", "AxonInfo"], [2, 1, 1, "", "ChainDataType"], [2, 1, 1, "", "DelegateInfo"], [2, 1, 1, "", "IPInfo"], [2, 1, 1, "", "NeuronInfo"], [2, 1, 1, "", "NeuronInfoLite"], [2, 1, 1, "", "PrometheusInfo"], [2, 1, 1, "", "ProposalVoteData"], [2, 1, 1, "", "StakeInfo"], [2, 1, 1, "", "SubnetHyperparameters"], [2, 1, 1, "", "SubnetInfo"], [2, 5, 1, "", "from_scale_encoding"], [2, 5, 1, "", "from_scale_encoding_using_type_string"]], "bittensor.chain_data.AxonInfo": [[2, 3, 1, "", "coldkey"], [2, 2, 1, "", "from_neuron_info"], [2, 2, 1, "", "from_parameter_dict"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "ip"], [2, 2, 1, "", "ip_str"], [2, 3, 1, "", "ip_type"], [2, 4, 1, "", "is_serving"], [2, 3, 1, "", "placeholder1"], [2, 3, 1, "", "placeholder2"], [2, 3, 1, "", "port"], [2, 3, 1, "", "protocol"], [2, 2, 1, "", "to_parameter_dict"], [2, 3, 1, "", "version"]], "bittensor.chain_data.ChainDataType": [[2, 3, 1, "", "DelegateInfo"], [2, 3, 1, "", "DelegatedInfo"], [2, 3, 1, "", "IPInfo"], [2, 3, 1, "", "NeuronInfo"], [2, 3, 1, "", "NeuronInfoLite"], [2, 3, 1, "", "StakeInfo"], [2, 3, 1, "", "SubnetHyperparameters"], [2, 3, 1, "", "SubnetInfo"]], "bittensor.chain_data.DelegateInfo": [[2, 2, 1, "", "delegated_list_from_vec_u8"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey_ss58"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "nominators"], [2, 3, 1, "", "owner_ss58"], [2, 3, 1, "", "registrations"], [2, 3, 1, "", "return_per_1000"], [2, 3, 1, "", "take"], [2, 3, 1, "", "total_daily_return"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "validator_permits"]], "bittensor.chain_data.IPInfo": [[2, 2, 1, "", "encode"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "ip"], [2, 3, 1, "", "ip_type"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "protocol"], [2, 2, 1, "", "to_parameter_dict"]], "bittensor.chain_data.NeuronInfo": [[2, 3, 1, "", "active"], [2, 3, 1, "", "axon_info"], [2, 3, 1, "", "bonds"], [2, 3, 1, "", "coldkey"], [2, 3, 1, "", "consensus"], [2, 3, 1, "", "dividends"], [2, 3, 1, "", "emission"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 2, 1, "", "from_weights_bonds_and_neuron_lite"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "incentive"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "last_update"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "prometheus_info"], [2, 3, 1, "", "pruning_score"], [2, 3, 1, "", "rank"], [2, 3, 1, "", "stake"], [2, 3, 1, "", "stake_dict"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "trust"], [2, 3, 1, "", "uid"], [2, 3, 1, "", "validator_permit"], [2, 3, 1, "", "validator_trust"], [2, 3, 1, "", "weights"]], "bittensor.chain_data.NeuronInfoLite": [[2, 3, 1, "", "active"], [2, 3, 1, "", "axon_info"], [2, 3, 1, "", "coldkey"], [2, 3, 1, "", "consensus"], [2, 3, 1, "", "dividends"], [2, 3, 1, "", "emission"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "incentive"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "last_update"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "prometheus_info"], [2, 3, 1, "", "pruning_score"], [2, 3, 1, "", "rank"], [2, 3, 1, "", "stake"], [2, 3, 1, "", "stake_dict"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "trust"], [2, 3, 1, "", "uid"], [2, 3, 1, "", "validator_permit"], [2, 3, 1, "", "validator_trust"]], "bittensor.chain_data.PrometheusInfo": [[2, 3, 1, "", "block"], [2, 2, 1, "", "fix_decoded_values"], [2, 3, 1, "", "ip"], [2, 3, 1, "", "ip_type"], [2, 3, 1, "", "port"], [2, 3, 1, "", "version"]], "bittensor.chain_data.ProposalVoteData": [[2, 3, 1, "", "ayes"], [2, 3, 1, "", "end"], [2, 3, 1, "", "index"], [2, 3, 1, "", "nays"], [2, 3, 1, "", "threshold"]], "bittensor.chain_data.StakeInfo": [[2, 3, 1, "", "coldkey_ss58"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey_ss58"], [2, 2, 1, "", "list_from_vec_u8"], [2, 2, 1, "", "list_of_tuple_from_vec_u8"], [2, 3, 1, "", "stake"]], "bittensor.chain_data.SubnetHyperparameters": [[2, 3, 1, "", "activity_cutoff"], [2, 3, 1, "", "adjustment_interval"], [2, 3, 1, "", "bonds_moving_avg"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "immunity_period"], [2, 3, 1, "", "kappa"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "max_burn"], [2, 3, 1, "", "max_difficulty"], [2, 3, 1, "", "max_regs_per_block"], [2, 3, 1, "", "max_weight_limit"], [2, 3, 1, "", "min_allowed_weights"], [2, 3, 1, "", "min_burn"], [2, 3, 1, "", "min_difficulty"], [2, 3, 1, "", "registration_allowed"], [2, 3, 1, "", "rho"], [2, 3, 1, "", "target_regs_per_interval"], [2, 3, 1, "", "tempo"], [2, 2, 1, "", "to_parameter_dict"], [2, 3, 1, "", "weights_rate_limit"], [2, 3, 1, "", "weights_version"]], "bittensor.chain_data.SubnetInfo": [[2, 3, 1, "", "blocks_since_epoch"], [2, 3, 1, "", "burn"], [2, 3, 1, "", "connection_requirements"], [2, 3, 1, "", "difficulty"], [2, 3, 1, "", "emission_value"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "immunity_period"], [2, 3, 1, "", "kappa"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "max_allowed_validators"], [2, 3, 1, "", "max_n"], [2, 3, 1, "", "max_weight_limit"], [2, 3, 1, "", "min_allowed_weights"], [2, 3, 1, "", "modality"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "owner_ss58"], [2, 3, 1, "", "rho"], [2, 3, 1, "", "scaling_law_power"], [2, 3, 1, "", "subnetwork_n"], [2, 3, 1, "", "tempo"], [2, 2, 1, "", "to_parameter_dict"]], "bittensor.cli": [[3, 1, 1, "", "cli"]], "bittensor.cli.cli": [[3, 2, 1, "", "check_config"], [3, 2, 1, "", "create_config"], [3, 2, 1, "", "run"]], "bittensor.commands": [[5, 0, 0, "-", "delegates"], [6, 0, 0, "-", "inspect"], [7, 0, 0, "-", "list"], [8, 0, 0, "-", "metagraph"], [9, 0, 0, "-", "misc"], [10, 0, 0, "-", "network"], [11, 0, 0, "-", "overview"], [12, 0, 0, "-", "register"], [13, 0, 0, "-", "root"], [14, 0, 0, "-", "senate"], [15, 0, 0, "-", "stake"], [16, 0, 0, "-", "transfer"], [17, 0, 0, "-", "unstake"], [18, 0, 0, "-", "utils"], [19, 0, 0, "-", "wallets"]], "bittensor.commands.delegates": [[5, 1, 1, "", "DelegateStakeCommand"], [5, 1, 1, "", "DelegateUnstakeCommand"], [5, 1, 1, "", "ListDelegatesCommand"], [5, 1, 1, "", "MyDelegatesCommand"], [5, 1, 1, "", "NominateCommand"], [5, 5, 1, "", "show_delegates"]], "bittensor.commands.delegates.DelegateStakeCommand": [[5, 2, 1, "", "add_args"], [5, 2, 1, "", "check_config"], [5, 2, 1, "", "run"]], "bittensor.commands.delegates.DelegateUnstakeCommand": [[5, 2, 1, "", "add_args"], [5, 2, 1, "", "check_config"], [5, 2, 1, "", "run"]], "bittensor.commands.delegates.ListDelegatesCommand": [[5, 2, 1, "", "add_args"], [5, 2, 1, "", "check_config"], [5, 2, 1, "", "run"]], "bittensor.commands.delegates.MyDelegatesCommand": [[5, 2, 1, "", "add_args"], [5, 2, 1, "", "check_config"], [5, 2, 1, "", "run"]], "bittensor.commands.delegates.NominateCommand": [[5, 2, 1, "", "add_args"], [5, 2, 1, "", "check_config"], [5, 2, 1, "", "run"]], "bittensor.commands.inspect": [[6, 1, 1, "", "InspectCommand"]], "bittensor.commands.inspect.InspectCommand": [[6, 2, 1, "", "add_args"], [6, 2, 1, "", "check_config"], [6, 2, 1, "", "run"]], "bittensor.commands.list": [[7, 1, 1, "", "ListCommand"]], "bittensor.commands.list.ListCommand": [[7, 2, 1, "", "add_args"], [7, 2, 1, "", "check_config"], [7, 2, 1, "", "run"]], "bittensor.commands.metagraph": [[8, 1, 1, "", "MetagraphCommand"]], "bittensor.commands.metagraph.MetagraphCommand": [[8, 2, 1, "", "add_args"], [8, 2, 1, "", "check_config"], [8, 2, 1, "", "run"]], "bittensor.commands.misc": [[9, 1, 1, "", "ListSubnetsCommand"], [9, 1, 1, "", "UpdateCommand"]], "bittensor.commands.misc.ListSubnetsCommand": [[9, 2, 1, "", "add_args"], [9, 2, 1, "", "check_config"], [9, 2, 1, "", "run"]], "bittensor.commands.misc.UpdateCommand": [[9, 2, 1, "", "add_args"], [9, 2, 1, "", "check_config"], [9, 2, 1, "", "run"]], "bittensor.commands.network": [[10, 1, 1, "", "RegisterSubnetworkCommand"], [10, 1, 1, "", "SubnetGetHyperparamsCommand"], [10, 1, 1, "", "SubnetHyperparamsCommand"], [10, 1, 1, "", "SubnetListCommand"], [10, 1, 1, "", "SubnetLockCostCommand"], [10, 1, 1, "", "SubnetSudoCommand"]], "bittensor.commands.network.RegisterSubnetworkCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.network.SubnetGetHyperparamsCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.network.SubnetHyperparamsCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.network.SubnetListCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.network.SubnetLockCostCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.network.SubnetSudoCommand": [[10, 2, 1, "", "add_args"], [10, 2, 1, "", "check_config"], [10, 2, 1, "", "run"]], "bittensor.commands.overview": [[11, 1, 1, "", "OverviewCommand"]], "bittensor.commands.overview.OverviewCommand": [[11, 2, 1, "", "add_args"], [11, 2, 1, "", "check_config"], [11, 2, 1, "", "run"]], "bittensor.commands.register": [[12, 1, 1, "", "RecycleRegisterCommand"], [12, 1, 1, "", "RegisterCommand"], [12, 1, 1, "", "RunFaucetCommand"]], "bittensor.commands.register.RecycleRegisterCommand": [[12, 2, 1, "", "add_args"], [12, 2, 1, "", "check_config"], [12, 2, 1, "", "run"]], "bittensor.commands.register.RegisterCommand": [[12, 2, 1, "", "add_args"], [12, 2, 1, "", "check_config"], [12, 2, 1, "", "run"]], "bittensor.commands.register.RunFaucetCommand": [[12, 2, 1, "", "add_args"], [12, 2, 1, "", "check_config"], [12, 2, 1, "", "run"]], "bittensor.commands.root": [[13, 1, 1, "", "RootGetWeightsCommand"], [13, 1, 1, "", "RootList"], [13, 1, 1, "", "RootRegisterCommand"], [13, 1, 1, "", "RootSetWeightsCommand"]], "bittensor.commands.root.RootGetWeightsCommand": [[13, 2, 1, "", "add_args"], [13, 2, 1, "", "check_config"], [13, 2, 1, "", "run"]], "bittensor.commands.root.RootList": [[13, 2, 1, "", "add_args"], [13, 2, 1, "", "check_config"], [13, 2, 1, "", "run"]], "bittensor.commands.root.RootRegisterCommand": [[13, 2, 1, "", "add_args"], [13, 2, 1, "", "check_config"], [13, 2, 1, "", "run"]], "bittensor.commands.root.RootSetWeightsCommand": [[13, 2, 1, "", "add_args"], [13, 2, 1, "", "check_config"], [13, 2, 1, "", "run"]], "bittensor.commands.senate": [[14, 1, 1, "", "ProposalsCommand"], [14, 1, 1, "", "SenateCommand"], [14, 1, 1, "", "SenateLeaveCommand"], [14, 1, 1, "", "SenateRegisterCommand"], [14, 1, 1, "", "ShowVotesCommand"], [14, 1, 1, "", "VoteCommand"], [14, 5, 1, "", "display_votes"], [14, 5, 1, "", "format_call_data"]], "bittensor.commands.senate.ProposalsCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.senate.SenateCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.senate.SenateLeaveCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.senate.SenateRegisterCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.senate.ShowVotesCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.senate.VoteCommand": [[14, 2, 1, "", "add_args"], [14, 2, 1, "", "check_config"], [14, 2, 1, "", "run"]], "bittensor.commands.stake": [[15, 1, 1, "", "StakeCommand"], [15, 1, 1, "", "StakeShow"]], "bittensor.commands.stake.StakeCommand": [[15, 2, 1, "", "add_args"], [15, 2, 1, "", "check_config"], [15, 2, 1, "", "run"]], "bittensor.commands.stake.StakeShow": [[15, 2, 1, "", "add_args"], [15, 2, 1, "", "check_config"], [15, 2, 1, "", "run"]], "bittensor.commands.transfer": [[16, 1, 1, "", "TransferCommand"]], "bittensor.commands.transfer.TransferCommand": [[16, 2, 1, "", "add_args"], [16, 2, 1, "", "check_config"], [16, 2, 1, "", "run"]], "bittensor.commands.unstake": [[17, 1, 1, "", "UnStakeCommand"]], "bittensor.commands.unstake.UnStakeCommand": [[17, 2, 1, "", "add_args"], [17, 2, 1, "", "check_config"], [17, 2, 1, "", "run"]], "bittensor.commands.utils": [[18, 1, 1, "", "DelegatesDetails"], [18, 1, 1, "", "IntListPrompt"], [18, 5, 1, "", "check_for_cuda_reg_config"], [18, 5, 1, "", "check_netuid_set"], [18, 5, 1, "", "get_all_wallets_for_path"], [18, 5, 1, "", "get_coldkey_wallets_for_path"], [18, 5, 1, "", "get_delegates_details"], [18, 5, 1, "", "get_hotkey_wallets_for_wallet"]], "bittensor.commands.utils.DelegatesDetails": [[18, 3, 1, "", "description"], [18, 2, 1, "", "from_json"], [18, 3, 1, "", "name"], [18, 3, 1, "", "signature"], [18, 3, 1, "", "url"]], "bittensor.commands.utils.IntListPrompt": [[18, 2, 1, "", "check_choice"]], "bittensor.commands.wallets": [[19, 1, 1, "", "NewColdkeyCommand"], [19, 1, 1, "", "NewHotkeyCommand"], [19, 1, 1, "", "RegenColdkeyCommand"], [19, 1, 1, "", "RegenColdkeypubCommand"], [19, 1, 1, "", "RegenHotkeyCommand"], [19, 1, 1, "", "UpdateWalletCommand"], [19, 1, 1, "", "WalletCreateCommand"]], "bittensor.commands.wallets.NewColdkeyCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.NewHotkeyCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeyCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeypubCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.RegenHotkeyCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.UpdateWalletCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.commands.wallets.WalletCreateCommand": [[19, 2, 1, "", "add_args"], [19, 2, 1, "", "check_config"], [19, 2, 1, "", "run"]], "bittensor.config": [[20, 1, 1, "", "DefaultConfig"], [20, 6, 1, "", "InvalidConfigFile"], [20, 1, 1, "", "config"]], "bittensor.config.DefaultConfig": [[20, 2, 1, "", "default"]], "bittensor.config.config": [[20, 2, 1, "", "copy"], [20, 2, 1, "", "is_set"], [20, 2, 1, "", "merge"], [20, 2, 1, "", "merge_all"], [20, 2, 1, "", "to_string"], [20, 2, 1, "", "update_with_kwargs"]], "bittensor.dendrite": [[21, 1, 1, "", "dendrite"]], "bittensor.dendrite.dendrite": [[21, 2, 1, "", "__repr__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "call"], [21, 2, 1, "", "close_session"], [21, 2, 1, "", "forward"], [21, 3, 1, "", "keypair"], [21, 2, 1, "", "preprocess_synapse_for_request"], [21, 2, 1, "", "process_server_response"], [21, 2, 1, "", "query"], [21, 4, 1, "", "session"]], "bittensor.errors": [[22, 6, 1, "", "ChainConnectionError"], [22, 6, 1, "", "ChainError"], [22, 6, 1, "", "ChainQueryError"], [22, 6, 1, "", "ChainTransactionError"], [22, 6, 1, "", "KeyFileError"], [22, 6, 1, "", "NominationError"], [22, 6, 1, "", "NotDelegateError"], [22, 6, 1, "", "NotRegisteredError"], [22, 6, 1, "", "RegistrationError"], [22, 6, 1, "", "StakeError"], [22, 6, 1, "", "TransferError"], [22, 6, 1, "", "UnstakeError"]], "bittensor.extrinsics": [[24, 0, 0, "-", "delegation"], [26, 0, 0, "-", "network"], [27, 0, 0, "-", "prometheus"], [28, 0, 0, "-", "registration"], [29, 0, 0, "-", "root"], [30, 0, 0, "-", "senate"], [31, 0, 0, "-", "serving"], [32, 0, 0, "-", "set_weights"], [33, 0, 0, "-", "staking"], [34, 0, 0, "-", "transfer"], [35, 0, 0, "-", "unstaking"]], "bittensor.extrinsics.delegation": [[24, 5, 1, "", "delegate_extrinsic"], [24, 5, 1, "", "nominate_extrinsic"], [24, 5, 1, "", "undelegate_extrinsic"]], "bittensor.extrinsics.network": [[26, 5, 1, "", "register_subnetwork_extrinsic"], [26, 5, 1, "", "set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[27, 5, 1, "", "prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[28, 5, 1, "", "burned_register_extrinsic"], [28, 5, 1, "", "register_extrinsic"], [28, 5, 1, "", "run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[29, 5, 1, "", "root_register_extrinsic"], [29, 5, 1, "", "set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[30, 5, 1, "", "leave_senate_extrinsic"], [30, 5, 1, "", "register_senate_extrinsic"], [30, 5, 1, "", "vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[31, 5, 1, "", "serve_axon_extrinsic"], [31, 5, 1, "", "serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[32, 5, 1, "", "set_weights_extrinsic"]], "bittensor.extrinsics.staking": [[33, 5, 1, "", "add_stake_extrinsic"], [33, 5, 1, "", "add_stake_multiple_extrinsic"]], "bittensor.extrinsics.transfer": [[34, 5, 1, "", "transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[35, 5, 1, "", "unstake_extrinsic"], [35, 5, 1, "", "unstake_multiple_extrinsic"]], "bittensor.keyfile": [[36, 1, 1, "", "Mockkeyfile"], [36, 5, 1, "", "ask_password_to_encrypt"], [36, 5, 1, "", "decrypt_keyfile_data"], [36, 5, 1, "", "deserialize_keypair_from_keyfile_data"], [36, 5, 1, "", "encrypt_keyfile_data"], [36, 5, 1, "", "get_coldkey_password_from_environment"], [36, 1, 1, "", "keyfile"], [36, 5, 1, "", "keyfile_data_encryption_method"], [36, 5, 1, "", "keyfile_data_is_encrypted"], [36, 5, 1, "", "keyfile_data_is_encrypted_ansible"], [36, 5, 1, "", "keyfile_data_is_encrypted_legacy"], [36, 5, 1, "", "keyfile_data_is_encrypted_nacl"], [36, 5, 1, "", "legacy_encrypt_keyfile_data"], [36, 5, 1, "", "serialized_keypair_to_keyfile_data"], [36, 5, 1, "", "validate_password"]], "bittensor.keyfile.Mockkeyfile": [[36, 2, 1, "", "check_and_update_encryption"], [36, 4, 1, "", "data"], [36, 2, 1, "", "decrypt"], [36, 2, 1, "", "encrypt"], [36, 2, 1, "", "exists_on_device"], [36, 2, 1, "", "get_keypair"], [36, 2, 1, "", "is_encrypted"], [36, 2, 1, "", "is_readable"], [36, 2, 1, "", "is_writable"], [36, 4, 1, "", "keypair"], [36, 2, 1, "", "make_dirs"], [36, 2, 1, "", "set_keypair"]], "bittensor.keyfile.keyfile": [[36, 2, 1, "", "check_and_update_encryption"], [36, 4, 1, "", "data"], [36, 2, 1, "", "decrypt"], [36, 2, 1, "", "encrypt"], [36, 2, 1, "", "exists_on_device"], [36, 2, 1, "", "get_keypair"], [36, 2, 1, "", "is_encrypted"], [36, 2, 1, "", "is_readable"], [36, 2, 1, "", "is_writable"], [36, 4, 1, "", "keyfile_data"], [36, 4, 1, "", "keypair"], [36, 2, 1, "", "make_dirs"], [36, 2, 1, "", "set_keypair"]], "bittensor.logging": [[37, 1, 1, "", "logging"]], "bittensor.logging.logging": [[37, 2, 1, "", "add_args"], [37, 2, 1, "", "check_config"], [37, 2, 1, "", "config"], [37, 2, 1, "", "debug"], [37, 2, 1, "", "error"], [37, 2, 1, "", "get_level"], [37, 2, 1, "", "help"], [37, 2, 1, "", "info"], [37, 2, 1, "", "log_filter"], [37, 2, 1, "", "log_formatter"], [37, 2, 1, "", "log_save_filter"], [37, 2, 1, "", "log_save_formatter"], [37, 2, 1, "", "set_debug"], [37, 2, 1, "", "set_trace"], [37, 2, 1, "", "success"], [37, 2, 1, "", "trace"], [37, 2, 1, "", "warning"]], "bittensor.metagraph": [[38, 5, 1, "", "get_save_dir"], [38, 5, 1, "", "latest_block_path"], [38, 1, 1, "", "metagraph"]], "bittensor.metagraph.metagraph": [[38, 4, 1, "", "B"], [38, 4, 1, "", "C"], [38, 4, 1, "", "D"], [38, 4, 1, "", "E"], [38, 4, 1, "", "I"], [38, 4, 1, "", "R"], [38, 4, 1, "", "S"], [38, 4, 1, "", "T"], [38, 4, 1, "", "Tv"], [38, 4, 1, "", "W"], [38, 3, 1, "", "active"], [38, 4, 1, "", "addresses"], [38, 3, 1, "", "axons"], [38, 3, 1, "", "block"], [38, 3, 1, "", "bonds"], [38, 4, 1, "", "coldkeys"], [38, 3, 1, "", "consensus"], [38, 3, 1, "", "dividends"], [38, 3, 1, "", "emission"], [38, 4, 1, "", "hotkeys"], [38, 3, 1, "", "incentive"], [38, 3, 1, "", "last_update"], [38, 2, 1, "", "load"], [38, 2, 1, "", "load_from_path"], [38, 2, 1, "", "metadata"], [38, 3, 1, "", "n"], [38, 3, 1, "", "netuid"], [38, 3, 1, "", "network"], [38, 3, 1, "", "ranks"], [38, 2, 1, "", "save"], [38, 3, 1, "", "stake"], [38, 2, 1, "", "sync"], [38, 3, 1, "", "total_stake"], [38, 3, 1, "", "trust"], [38, 3, 1, "", "uids"], [38, 3, 1, "", "validator_permit"], [38, 3, 1, "", "validator_trust"], [38, 3, 1, "", "version"], [38, 3, 1, "", "weights"]], "bittensor.mock": [[40, 0, 0, "-", "keyfile_mock"], [41, 0, 0, "-", "subtensor_mock"], [42, 0, 0, "-", "wallet_mock"]], "bittensor.mock.keyfile_mock": [[40, 1, 1, "", "MockKeyfile"]], "bittensor.mock.keyfile_mock.MockKeyfile": [[40, 4, 1, "", "data"], [40, 2, 1, "", "decrypt"], [40, 2, 1, "", "encrypt"], [40, 2, 1, "", "exists_on_device"], [40, 2, 1, "", "get_keypair"], [40, 2, 1, "", "is_encrypted"], [40, 2, 1, "", "is_readable"], [40, 2, 1, "", "is_writable"], [40, 4, 1, "", "keyfile_data"], [40, 4, 1, "", "keypair"], [40, 2, 1, "", "make_dirs"], [40, 2, 1, "", "set_keypair"]], "bittensor.mock.subtensor_mock": [[41, 1, 1, "", "AxonInfoDict"], [41, 1, 1, "", "AxonServeCallParams"], [41, 1, 1, "", "InfoDict"], [41, 1, 1, "", "MockChainState"], [41, 1, 1, "", "MockMapResult"], [41, 1, 1, "", "MockSubtensor"], [41, 1, 1, "", "MockSubtensorState"], [41, 1, 1, "", "MockSubtensorValue"], [41, 1, 1, "", "MockSystemState"], [41, 1, 1, "", "PrometheusInfoDict"], [41, 1, 1, "", "PrometheusServeCallParams"]], "bittensor.mock.subtensor_mock.AxonInfoDict": [[41, 3, 1, "", "block"], [41, 2, 1, "", "default"], [41, 3, 1, "", "ip"], [41, 3, 1, "", "ip_type"], [41, 3, 1, "", "placeholder1"], [41, 3, 1, "", "placeholder2"], [41, 3, 1, "", "port"], [41, 3, 1, "", "protocol"], [41, 3, 1, "", "version"]], "bittensor.mock.subtensor_mock.AxonServeCallParams": [[41, 3, 1, "", "ip"], [41, 3, 1, "", "ip_type"], [41, 3, 1, "", "netuid"], [41, 3, 1, "", "port"], [41, 3, 1, "", "version"]], "bittensor.mock.subtensor_mock.InfoDict": [[41, 2, 1, "", "default"]], "bittensor.mock.subtensor_mock.MockChainState": [[41, 3, 1, "", "SubtensorModule"], [41, 3, 1, "", "System"]], "bittensor.mock.subtensor_mock.MockMapResult": [[41, 3, 1, "", "records"]], "bittensor.mock.subtensor_mock.MockSubtensor": [[41, 3, 1, "", "block_number"], [41, 3, 1, "", "chain_state"], [41, 2, 1, "", "create_subnet"], [41, 2, 1, "", "do_block_step"], [41, 2, 1, "", "force_register_neuron"], [41, 2, 1, "", "force_set_balance"], [41, 2, 1, "", "get_all_subnets_info"], [41, 2, 1, "", "get_balance"], [41, 2, 1, "", "get_balances"], [41, 2, 1, "", "get_block_hash"], [41, 2, 1, "", "get_current_block"], [41, 2, 1, "", "get_delegate_by_hotkey"], [41, 2, 1, "", "get_delegated"], [41, 2, 1, "", "get_delegates"], [41, 2, 1, "", "get_subnet_info"], [41, 2, 1, "", "get_transfer_fee"], [41, 2, 1, "", "neuron_for_uid"], [41, 2, 1, "", "neuron_for_uid_lite"], [41, 2, 1, "", "neurons"], [41, 2, 1, "", "neurons_lite"], [41, 2, 1, "", "query_constant"], [41, 2, 1, "", "query_map_subtensor"], [41, 2, 1, "", "query_subtensor"], [41, 2, 1, "", "reset"], [41, 2, 1, "", "set_difficulty"], [41, 2, 1, "", "setup"], [41, 2, 1, "", "sudo_force_set_balance"]], "bittensor.mock.subtensor_mock.MockSubtensorState": [[41, 3, 1, "", "Active"], [41, 3, 1, "", "Delegates"], [41, 3, 1, "", "Difficulty"], [41, 3, 1, "", "ImmunityPeriod"], [41, 3, 1, "", "Kappa"], [41, 3, 1, "", "NetworksAdded"], [41, 3, 1, "", "Rho"], [41, 3, 1, "", "Stake"], [41, 3, 1, "", "ValidatorBatchSize"]], "bittensor.mock.subtensor_mock.MockSubtensorValue": [[41, 3, 1, "", "value"]], "bittensor.mock.subtensor_mock.MockSystemState": [[41, 3, 1, "", "Account"]], "bittensor.mock.subtensor_mock.PrometheusInfoDict": [[41, 3, 1, "", "block"], [41, 2, 1, "", "default"], [41, 3, 1, "", "ip"], [41, 3, 1, "", "ip_type"], [41, 3, 1, "", "port"], [41, 3, 1, "", "version"]], "bittensor.mock.subtensor_mock.PrometheusServeCallParams": [[41, 3, 1, "", "ip"], [41, 3, 1, "", "ip_type"], [41, 3, 1, "", "netuid"], [41, 3, 1, "", "port"], [41, 3, 1, "", "version"]], "bittensor.mock.wallet_mock": [[42, 1, 1, "", "MockWallet"], [42, 5, 1, "", "get_mock_coldkey"], [42, 5, 1, "", "get_mock_hotkey"], [42, 5, 1, "", "get_mock_keypair"], [42, 5, 1, "", "get_mock_wallet"]], "bittensor.mock.wallet_mock.MockWallet": [[42, 4, 1, "", "coldkey_file"], [42, 4, 1, "", "coldkeypub_file"], [42, 4, 1, "", "hotkey_file"]], "bittensor.stream": [[43, 1, 1, "", "BTStreamingResponseModel"], [43, 1, 1, "", "StreamingSynapse"]], "bittensor.stream.BTStreamingResponseModel": [[43, 3, 1, "id0", "token_streamer"]], "bittensor.stream.StreamingSynapse": [[43, 1, 1, "", "BTStreamingResponse"], [43, 1, 1, "", "Config"], [43, 2, 1, "", "create_streaming_response"], [43, 2, 1, "", "extract_response_json"], [43, 2, 1, "", "process_streaming_response"]], "bittensor.stream.StreamingSynapse.BTStreamingResponse": [[43, 2, 1, "", "stream_response"]], "bittensor.stream.StreamingSynapse.Config": [[43, 3, 1, "", "validate_assignment"]], "bittensor.subtensor": [[44, 1, 1, "", "ParamWithTypes"], [44, 1, 1, "", "subtensor"]], "bittensor.subtensor.ParamWithTypes": [[44, 3, 1, "", "name"], [44, 3, 1, "", "type"]], "bittensor.subtensor.subtensor": [[44, 2, 1, "", "add_args"], [44, 2, 1, "", "add_stake"], [44, 2, 1, "", "add_stake_multiple"], [44, 2, 1, "", "associated_validator_ip_info"], [44, 4, 1, "", "block"], [44, 2, 1, "", "blocks_since_epoch"], [44, 2, 1, "", "bonds"], [44, 2, 1, "", "burn"], [44, 2, 1, "", "burned_register"], [44, 2, 1, "", "config"], [44, 2, 1, "", "delegate"], [44, 2, 1, "", "determine_chain_endpoint_and_network"], [44, 2, 1, "", "difficulty"], [44, 2, 1, "", "does_hotkey_exist"], [44, 2, 1, "", "get_all_neurons_for_pubkey"], [44, 2, 1, "", "get_all_subnet_netuids"], [44, 2, 1, "", "get_all_subnets_info"], [44, 2, 1, "", "get_all_uids_for_hotkey"], [44, 2, 1, "", "get_axon_info"], [44, 2, 1, "", "get_balance"], [44, 2, 1, "", "get_balances"], [44, 2, 1, "", "get_block_hash"], [44, 2, 1, "", "get_current_block"], [44, 2, 1, "", "get_delegate_by_hotkey"], [44, 2, 1, "", "get_delegate_take"], [44, 2, 1, "", "get_delegated"], [44, 2, 1, "", "get_delegates"], [44, 2, 1, "", "get_emission_value_by_subnet"], [44, 2, 1, "", "get_existential_deposit"], [44, 2, 1, "", "get_hotkey_owner"], [44, 2, 1, "", "get_netuids_for_hotkey"], [44, 2, 1, "", "get_neuron_for_pubkey_and_subnet"], [44, 2, 1, "", "get_nominators_for_hotkey"], [44, 2, 1, "", "get_prometheus_info"], [44, 2, 1, "", "get_proposal_call_data"], [44, 2, 1, "", "get_proposal_hashes"], [44, 2, 1, "", "get_proposal_vote_data"], [44, 2, 1, "", "get_proposals"], [44, 2, 1, "", "get_senate_members"], [44, 2, 1, "", "get_stake"], [44, 2, 1, "", "get_stake_for_coldkey_and_hotkey"], [44, 2, 1, "", "get_stake_info_for_coldkey"], [44, 2, 1, "", "get_stake_info_for_coldkeys"], [44, 2, 1, "", "get_subnet_burn_cost"], [44, 2, 1, "", "get_subnet_connection_requirement"], [44, 2, 1, "", "get_subnet_connection_requirements"], [44, 2, 1, "", "get_subnet_hyperparameters"], [44, 2, 1, "", "get_subnet_info"], [44, 2, 1, "", "get_subnet_modality"], [44, 2, 1, "", "get_subnet_owner"], [44, 2, 1, "", "get_subnets"], [44, 2, 1, "", "get_total_stake_for_coldkey"], [44, 2, 1, "", "get_total_stake_for_hotkey"], [44, 2, 1, "", "get_total_subnets"], [44, 2, 1, "", "get_transfer_fee"], [44, 2, 1, "", "get_uid_for_hotkey_on_subnet"], [44, 2, 1, "", "get_vote_data"], [44, 2, 1, "", "help"], [44, 2, 1, "", "immunity_period"], [44, 2, 1, "", "incentive"], [44, 2, 1, "", "is_hotkey_delegate"], [44, 2, 1, "", "is_hotkey_registered"], [44, 2, 1, "", "is_hotkey_registered_any"], [44, 2, 1, "", "is_hotkey_registered_on_subnet"], [44, 2, 1, "", "is_senate_member"], [44, 2, 1, "", "kappa"], [44, 2, 1, "", "leave_senate"], [44, 2, 1, "", "max_allowed_validators"], [44, 2, 1, "", "max_n"], [44, 2, 1, "", "max_weight_limit"], [44, 2, 1, "", "metagraph"], [44, 2, 1, "", "min_allowed_weights"], [44, 2, 1, "", "neuron_for_uid"], [44, 2, 1, "", "neuron_for_uid_lite"], [44, 2, 1, "", "neuron_for_wallet"], [44, 2, 1, "", "neuron_has_validator_permit"], [44, 2, 1, "", "neurons"], [44, 2, 1, "", "neurons_lite"], [44, 2, 1, "", "nominate"], [44, 2, 1, "", "query_constant"], [44, 2, 1, "", "query_map"], [44, 2, 1, "", "query_map_subtensor"], [44, 2, 1, "", "query_module"], [44, 2, 1, "", "query_runtime_api"], [44, 2, 1, "", "query_subtensor"], [44, 2, 1, "", "register"], [44, 2, 1, "", "register_senate"], [44, 2, 1, "", "register_subnetwork"], [44, 2, 1, "", "rho"], [44, 2, 1, "", "root_register"], [44, 2, 1, "", "root_set_weights"], [44, 2, 1, "", "run_faucet"], [44, 2, 1, "", "scaling_law_power"], [44, 2, 1, "", "serve"], [44, 2, 1, "", "serve_axon"], [44, 2, 1, "", "serve_prometheus"], [44, 2, 1, "", "serving_rate_limit"], [44, 2, 1, "", "set_hyperparameter"], [44, 2, 1, "", "set_weights"], [44, 2, 1, "", "setup_config"], [44, 2, 1, "", "state_call"], [44, 2, 1, "", "subnet_exists"], [44, 2, 1, "", "subnetwork_n"], [44, 2, 1, "", "synergy_scaling_law_power"], [44, 2, 1, "", "tempo"], [44, 2, 1, "", "total_issuance"], [44, 2, 1, "", "total_stake"], [44, 2, 1, "", "transfer"], [44, 2, 1, "", "tx_rate_limit"], [44, 2, 1, "", "undelegate"], [44, 2, 1, "", "unstake"], [44, 2, 1, "", "unstake_multiple"], [44, 2, 1, "", "validator_batch_size"], [44, 2, 1, "", "validator_epoch_length"], [44, 2, 1, "", "validator_epochs_per_reset"], [44, 2, 1, "", "validator_exclude_quantile"], [44, 2, 1, "", "validator_logits_divergence"], [44, 2, 1, "", "validator_prune_len"], [44, 2, 1, "", "validator_sequence_length"], [44, 2, 1, "", "vote_senate"], [44, 2, 1, "", "weights"]], "bittensor.synapse": [[45, 1, 1, "", "Synapse"], [45, 1, 1, "", "TerminalInfo"], [45, 5, 1, "", "cast_float"], [45, 5, 1, "", "cast_int"], [45, 5, 1, "", "get_size"]], "bittensor.synapse.Synapse": [[45, 1, 1, "", "Config"], [45, 4, 1, "", "body_hash"], [45, 2, 1, "", "deserialize"], [45, 4, 1, "", "failed_verification"], [45, 2, 1, "", "from_headers"], [45, 2, 1, "", "get_total_size"], [45, 4, 1, "", "is_blacklist"], [45, 4, 1, "", "is_failure"], [45, 4, 1, "", "is_success"], [45, 4, 1, "", "is_timeout"], [45, 2, 1, "", "parse_headers_to_inputs"], [45, 2, 1, "", "set_name_type"], [45, 2, 1, "", "to_headers"]], "bittensor.synapse.Synapse.Config": [[45, 3, 1, "", "validate_assignment"]], "bittensor.synapse.TerminalInfo": [[45, 1, 1, "", "Config"]], "bittensor.synapse.TerminalInfo.Config": [[45, 3, 1, "", "validate_assignment"]], "bittensor.tensor": [[46, 1, 1, "", "Tensor"], [46, 5, 1, "", "cast_dtype"], [46, 5, 1, "", "cast_shape"], [46, 1, 1, "", "tensor"]], "bittensor.tensor.Tensor": [[46, 1, 1, "", "Config"], [46, 3, 1, "", "buffer"], [46, 2, 1, "", "deserialize"], [46, 3, 1, "", "dtype"], [46, 2, 1, "", "numpy"], [46, 2, 1, "", "serialize"], [46, 3, 1, "", "shape"], [46, 2, 1, "", "tensor"], [46, 2, 1, "", "tolist"]], "bittensor.tensor.Tensor.Config": [[46, 3, 1, "", "validate_assignment"]], "bittensor.threadpool": [[47, 6, 1, "", "BrokenThreadPool"], [47, 1, 1, "", "PriorityThreadPoolExecutor"]], "bittensor.threadpool.PriorityThreadPoolExecutor": [[47, 2, 1, "", "add_args"], [47, 2, 1, "", "config"], [47, 4, 1, "", "is_empty"], [47, 2, 1, "", "shutdown"], [47, 2, 1, "", "submit"]], "bittensor.types": [[48, 1, 1, "", "AxonServeCallParams"], [48, 1, 1, "", "PrometheusServeCallParams"]], "bittensor.types.AxonServeCallParams": [[48, 3, 1, "", "ip"], [48, 3, 1, "", "ip_type"], [48, 3, 1, "", "netuid"], [48, 3, 1, "", "port"], [48, 3, 1, "", "version"]], "bittensor.types.PrometheusServeCallParams": [[48, 3, 1, "", "ip"], [48, 3, 1, "", "ip_type"], [48, 3, 1, "", "netuid"], [48, 3, 1, "", "port"], [48, 3, 1, "", "version"]], "bittensor.utils": [[49, 5, 1, "", "U16_NORMALIZED_FLOAT"], [49, 5, 1, "", "U64_NORMALIZED_FLOAT"], [50, 0, 0, "-", "balance"], [51, 0, 0, "-", "formatting"], [49, 5, 1, "", "get_explorer_root_url_by_network_from_map"], [49, 5, 1, "", "get_explorer_url_for_network"], [49, 5, 1, "", "hash"], [52, 0, 0, "-", "networking"], [53, 0, 0, "-", "registration"], [49, 5, 1, "", "ss58_address_to_bytes"], [49, 5, 1, "", "ss58_to_vec_u8"], [55, 0, 0, "-", "stats"], [49, 5, 1, "", "strtobool"], [49, 5, 1, "", "strtobool_with_default"], [56, 0, 0, "-", "test_utils"], [49, 5, 1, "", "u8_key_to_ss58"], [49, 5, 1, "", "unbiased_topk"], [49, 5, 1, "", "version_checking"], [57, 0, 0, "-", "wallet_utils"], [58, 0, 0, "-", "weight_utils"]], "bittensor.utils.balance": [[50, 1, 1, "", "Balance"]], "bittensor.utils.balance.Balance": [[50, 2, 1, "", "from_float"], [50, 2, 1, "", "from_rao"], [50, 2, 1, "", "from_tao"], [50, 3, 1, "id0", "rao"], [50, 3, 1, "id1", "rao_unit"], [50, 4, 1, "id2", "tao"], [50, 3, 1, "id3", "unit"]], "bittensor.utils.formatting": [[51, 5, 1, "", "get_human_readable"], [51, 5, 1, "", "millify"]], "bittensor.utils.networking": [[52, 6, 1, "", "ExternalIPNotFound"], [52, 5, 1, "", "get_external_ip"], [52, 5, 1, "", "get_formatted_ws_endpoint_url"], [52, 5, 1, "", "int_to_ip"], [52, 5, 1, "", "ip__str__"], [52, 5, 1, "", "ip_to_int"], [52, 5, 1, "", "ip_version"]], "bittensor.utils.registration": [[53, 6, 1, "", "CUDAException"], [53, 1, 1, "", "POWSolution"], [53, 1, 1, "", "RegistrationStatistics"], [53, 1, 1, "", "RegistrationStatisticsLogger"], [53, 5, 1, "", "create_pow"], [53, 5, 1, "", "get_cpu_count"]], "bittensor.utils.registration.POWSolution": [[53, 3, 1, "", "block_number"], [53, 3, 1, "", "difficulty"], [53, 2, 1, "", "is_stale"], [53, 3, 1, "", "nonce"], [53, 3, 1, "", "seal"]], "bittensor.utils.registration.RegistrationStatistics": [[53, 3, 1, "", "block_hash"], [53, 3, 1, "", "block_number"], [53, 3, 1, "", "difficulty"], [53, 3, 1, "", "hash_rate"], [53, 3, 1, "", "hash_rate_perpetual"], [53, 3, 1, "", "rounds_total"], [53, 3, 1, "", "time_average"], [53, 3, 1, "", "time_spent"], [53, 3, 1, "", "time_spent_total"]], "bittensor.utils.registration.RegistrationStatisticsLogger": [[53, 3, 1, "", "console"], [53, 2, 1, "", "get_status_message"], [53, 2, 1, "", "start"], [53, 3, 1, "", "status"], [53, 2, 1, "", "stop"], [53, 2, 1, "", "update"]], "bittensor.utils.stats": [[55, 1, 1, "", "AmountPerSecondRollingAverage"], [55, 1, 1, "", "EventsPerSecondRollingAverage"], [55, 1, 1, "", "timed_rolling_avg"]], "bittensor.utils.stats.AmountPerSecondRollingAverage": [[55, 2, 1, "", "event"], [55, 2, 1, "", "get"]], "bittensor.utils.stats.EventsPerSecondRollingAverage": [[55, 2, 1, "", "event"], [55, 2, 1, "", "get"]], "bittensor.utils.stats.timed_rolling_avg": [[55, 2, 1, "", "update"]], "bittensor.utils.test_utils": [[56, 5, 1, "", "get_random_unused_port"]], "bittensor.utils.wallet_utils": [[57, 5, 1, "", "get_ss58_format"], [57, 5, 1, "", "is_valid_bittensor_address_or_public_key"], [57, 5, 1, "", "is_valid_ed25519_pubkey"], [57, 5, 1, "", "is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[58, 5, 1, "", "convert_bond_uids_and_vals_to_tensor"], [58, 5, 1, "", "convert_root_weight_uids_and_vals_to_tensor"], [58, 5, 1, "", "convert_weight_uids_and_vals_to_tensor"], [58, 5, 1, "", "convert_weights_and_uids_for_emit"], [58, 5, 1, "", "normalize_max_weight"], [58, 5, 1, "", "process_weights_for_netuid"]], "bittensor.wallet": [[59, 5, 1, "", "display_mnemonic_msg"], [59, 1, 1, "", "wallet"]], "bittensor.wallet.wallet": [[59, 2, 1, "", "add_args"], [59, 4, 1, "", "coldkey"], [59, 4, 1, "", "coldkey_file"], [59, 4, 1, "", "coldkeypub"], [59, 4, 1, "", "coldkeypub_file"], [59, 2, 1, "", "config"], [59, 2, 1, "", "create"], [59, 2, 1, "", "create_coldkey_from_uri"], [59, 2, 1, "", "create_hotkey_from_uri"], [59, 2, 1, "", "create_if_non_existent"], [59, 2, 1, "", "create_new_coldkey"], [59, 2, 1, "", "create_new_hotkey"], [59, 2, 1, "", "get_coldkey"], [59, 2, 1, "", "get_coldkeypub"], [59, 2, 1, "", "get_hotkey"], [59, 2, 1, "", "help"], [59, 4, 1, "", "hotkey"], [59, 4, 1, "", "hotkey_file"], [59, 2, 1, "", "new_coldkey"], [59, 2, 1, "", "new_hotkey"], [59, 2, 1, "", "recreate"], [59, 2, 1, "", "regen_coldkey"], [59, 2, 1, "", "regen_coldkeypub"], [59, 2, 1, "", "regen_hotkey"], [59, 2, 1, "", "regenerate_coldkey"], [59, 2, 1, "", "regenerate_coldkeypub"], [59, 2, 1, "", "regenerate_hotkey"], [59, 2, 1, "", "set_coldkey"], [59, 2, 1, "", "set_coldkeypub"], [59, 2, 1, "", "set_hotkey"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"bittensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "packag": [0, 4, 23, 39, 49], "subpackag": 0, "submodul": [0, 4, 23, 39, 49], "axon": 1, "modul": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "chain_data": 2, "cli": 3, "command": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "deleg": [5, 24], "inspect": 6, "list": 7, "metagraph": [8, 38], "misc": 9, "network": [10, 26, 52], "overview": 11, "regist": 12, "root": [13, 29], "senat": [14, 30], "stake": [15, 33], "transfer": [16, 34], "unstak": [17, 35], "util": [18, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "wallet": [19, 59], "config": 20, "dendrit": 21, "error": 22, "extrins": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "log_util": 25, "prometheu": 27, "registr": [28, 53], "serv": 31, "set_weight": 32, "keyfil": 36, "log": 37, "mock": [39, 40, 41, 42], "keyfile_mock": 40, "subtensor_mock": 41, "wallet_mock": 42, "stream": 43, "subtensor": 44, "synaps": 45, "tensor": 46, "threadpool": 47, "type": 48, "balanc": 50, "format": 51, "registratrion_old": 54, "stat": 55, "test_util": 56, "wallet_util": 57, "weight_util": 58, "welcom": 61, "api": 61, "document": 61, "index": 61}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"bittensor package": [[0, "bittensor-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"], [4, "submodules"], [23, "submodules"], [39, "submodules"], [49, "submodules"]], "bittensor.axon module": [[1, "module-bittensor.axon"]], "bittensor.chain_data module": [[2, "module-bittensor.chain_data"]], "bittensor.cli module": [[3, "module-bittensor.cli"]], "bittensor.commands package": [[4, "module-bittensor.commands"]], "bittensor.commands.delegates module": [[5, "module-bittensor.commands.delegates"]], "bittensor.commands.inspect module": [[6, "module-bittensor.commands.inspect"]], "bittensor.commands.list module": [[7, "module-bittensor.commands.list"]], "bittensor.commands.metagraph module": [[8, "module-bittensor.commands.metagraph"]], "bittensor.commands.misc module": [[9, "module-bittensor.commands.misc"]], "bittensor.commands.network module": [[10, "module-bittensor.commands.network"]], "bittensor.commands.overview module": [[11, "module-bittensor.commands.overview"]], "bittensor.commands.register module": [[12, "module-bittensor.commands.register"]], "bittensor.commands.root module": [[13, "module-bittensor.commands.root"]], "bittensor.commands.senate module": [[14, "module-bittensor.commands.senate"]], "bittensor.commands.stake module": [[15, "module-bittensor.commands.stake"]], "bittensor.commands.transfer module": [[16, "module-bittensor.commands.transfer"]], "bittensor.commands.unstake module": [[17, "module-bittensor.commands.unstake"]], "bittensor.commands.utils module": [[18, "module-bittensor.commands.utils"]], "bittensor.commands.wallets module": [[19, "module-bittensor.commands.wallets"]], "bittensor.config module": [[20, "module-bittensor.config"]], "bittensor.dendrite module": [[21, "module-bittensor.dendrite"]], "bittensor.errors module": [[22, "module-bittensor.errors"]], "bittensor.extrinsics package": [[23, "module-bittensor.extrinsics"]], "bittensor.extrinsics.delegation module": [[24, "module-bittensor.extrinsics.delegation"]], "bittensor.extrinsics.log_utilities module": [[25, "bittensor-extrinsics-log-utilities-module"]], "bittensor.extrinsics.network module": [[26, "module-bittensor.extrinsics.network"]], "bittensor.extrinsics.prometheus module": [[27, "module-bittensor.extrinsics.prometheus"]], "bittensor.extrinsics.registration module": [[28, "module-bittensor.extrinsics.registration"]], "bittensor.extrinsics.root module": [[29, "module-bittensor.extrinsics.root"]], "bittensor.extrinsics.senate module": [[30, "module-bittensor.extrinsics.senate"]], "bittensor.extrinsics.serving module": [[31, "module-bittensor.extrinsics.serving"]], "bittensor.extrinsics.set_weights module": [[32, "module-bittensor.extrinsics.set_weights"]], "bittensor.extrinsics.staking module": [[33, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer module": [[34, "module-bittensor.extrinsics.transfer"]], "bittensor.extrinsics.unstaking module": [[35, "module-bittensor.extrinsics.unstaking"]], "bittensor.keyfile module": [[36, "module-bittensor.keyfile"]], "bittensor.logging module": [[37, "module-bittensor.logging"]], "bittensor.metagraph module": [[38, "module-bittensor.metagraph"]], "bittensor.mock package": [[39, "module-bittensor.mock"]], "bittensor.mock.keyfile_mock module": [[40, "module-bittensor.mock.keyfile_mock"]], "bittensor.mock.subtensor_mock module": [[41, "module-bittensor.mock.subtensor_mock"]], "bittensor.mock.wallet_mock module": [[42, "module-bittensor.mock.wallet_mock"]], "bittensor.stream module": [[43, "module-bittensor.stream"]], "bittensor.subtensor module": [[44, "module-bittensor.subtensor"]], "bittensor.synapse module": [[45, "module-bittensor.synapse"]], "bittensor.tensor module": [[46, "module-bittensor.tensor"]], "bittensor.threadpool module": [[47, "module-bittensor.threadpool"]], "bittensor.types module": [[48, "module-bittensor.types"]], "bittensor.utils package": [[49, "module-bittensor.utils"]], "bittensor.utils.balance module": [[50, "module-bittensor.utils.balance"]], "bittensor.utils.formatting module": [[51, "module-bittensor.utils.formatting"]], "bittensor.utils.networking module": [[52, "module-bittensor.utils.networking"]], "bittensor.utils.registration module": [[53, "module-bittensor.utils.registration"]], "bittensor.utils.registratrion_old module": [[54, "bittensor-utils-registratrion-old-module"]], "bittensor.utils.stats module": [[55, "module-bittensor.utils.stats"]], "bittensor.utils.test_utils module": [[56, "module-bittensor.utils.test_utils"]], "bittensor.utils.wallet_utils module": [[57, "module-bittensor.utils.wallet_utils"]], "bittensor.utils.weight_utils module": [[58, "module-bittensor.utils.weight_utils"]], "bittensor.wallet module": [[59, "module-bittensor.wallet"]], "bittensor": [[60, "bittensor"]], "Welcome to Bittensor API Documentation": [[61, "welcome-to-bittensor-api-documentation"]], "Index": [[61, "index"]]}, "indexentries": {"axonmiddleware (class in bittensor.axon)": [[1, "bittensor.axon.AxonMiddleware"]], "fastapithreadedserver (class in bittensor.axon)": [[1, "bittensor.axon.FastAPIThreadedServer"]], "add_args() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.add_args"]], "attach() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.attach"]], "axon (class in bittensor.axon)": [[1, "bittensor.axon.axon"]], "bittensor.axon": [[1, "module-bittensor.axon"]], "blacklist() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.blacklist"]], "check_config() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.check_config"]], "config() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.config"]], "default_verify() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.default_verify"]], "dispatch() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.dispatch"]], "help() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.help"]], "info() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.info"]], "install_signal_handlers() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.install_signal_handlers"]], "is_running (bittensor.axon.fastapithreadedserver attribute)": [[1, "bittensor.axon.FastAPIThreadedServer.is_running"]], "module": [[1, "module-bittensor.axon"], [2, "module-bittensor.chain_data"], [3, "module-bittensor.cli"], [4, "module-bittensor.commands"], [5, "module-bittensor.commands.delegates"], [6, "module-bittensor.commands.inspect"], [7, "module-bittensor.commands.list"], [8, "module-bittensor.commands.metagraph"], [9, "module-bittensor.commands.misc"], [10, "module-bittensor.commands.network"], [11, "module-bittensor.commands.overview"], [12, "module-bittensor.commands.register"], [13, "module-bittensor.commands.root"], [14, "module-bittensor.commands.senate"], [15, "module-bittensor.commands.stake"], [16, "module-bittensor.commands.transfer"], [17, "module-bittensor.commands.unstake"], [18, "module-bittensor.commands.utils"], [19, "module-bittensor.commands.wallets"], [20, "module-bittensor.config"], [21, "module-bittensor.dendrite"], [22, "module-bittensor.errors"], [23, "module-bittensor.extrinsics"], [24, "module-bittensor.extrinsics.delegation"], [26, "module-bittensor.extrinsics.network"], [27, "module-bittensor.extrinsics.prometheus"], [28, "module-bittensor.extrinsics.registration"], [29, "module-bittensor.extrinsics.root"], [30, "module-bittensor.extrinsics.senate"], [31, "module-bittensor.extrinsics.serving"], [32, "module-bittensor.extrinsics.set_weights"], [33, "module-bittensor.extrinsics.staking"], [34, "module-bittensor.extrinsics.transfer"], [35, "module-bittensor.extrinsics.unstaking"], [36, "module-bittensor.keyfile"], [37, "module-bittensor.logging"], [38, "module-bittensor.metagraph"], [39, "module-bittensor.mock"], [40, "module-bittensor.mock.keyfile_mock"], [41, "module-bittensor.mock.subtensor_mock"], [42, "module-bittensor.mock.wallet_mock"], [43, "module-bittensor.stream"], [44, "module-bittensor.subtensor"], [45, "module-bittensor.synapse"], [46, "module-bittensor.tensor"], [47, "module-bittensor.threadpool"], [48, "module-bittensor.types"], [49, "module-bittensor.utils"], [50, "module-bittensor.utils.balance"], [51, "module-bittensor.utils.formatting"], [52, "module-bittensor.utils.networking"], [53, "module-bittensor.utils.registration"], [55, "module-bittensor.utils.stats"], [56, "module-bittensor.utils.test_utils"], [57, "module-bittensor.utils.wallet_utils"], [58, "module-bittensor.utils.weight_utils"], [59, "module-bittensor.wallet"]], "postprocess() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.postprocess"]], "preprocess() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.preprocess"]], "priority() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.priority"]], "run() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.run"]], "run_in_thread() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.run_in_thread"]], "serve() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.serve"]], "should_exit (bittensor.axon.fastapithreadedserver attribute)": [[1, "bittensor.axon.FastAPIThreadedServer.should_exit"]], "start() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.start"]], "start() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.start"]], "stop() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.stop"]], "stop() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.stop"]], "verify() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.verify"]], "verify_body_integrity() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.verify_body_integrity"]], "axoninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.AxonInfo"]], "chaindatatype (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ChainDataType"]], "delegateinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.DelegateInfo"]], "delegatedinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegatedInfo"]], "ipinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.IPInfo"]], "ipinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.IPInfo"]], "neuroninfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfo"]], "neuroninfolite (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfoLite"]], "prometheusinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.PrometheusInfo"]], "proposalvotedata (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalVoteData"]], "stakeinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.StakeInfo"]], "subnethyperparameters (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetHyperparameters"]], "subnetinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetInfo"]], "active (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.active"]], "active (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.active"]], "activity_cutoff (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.activity_cutoff"]], "adjustment_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.adjustment_interval"]], "axon_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.axon_info"]], "axon_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.axon_info"]], "ayes (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.ayes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "block (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.block"]], "blocks_since_epoch (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.blocks_since_epoch"]], "bonds (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.bonds"]], "bonds_moving_avg (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.bonds_moving_avg"]], "burn (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.burn"]], "coldkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.coldkey"]], "coldkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.coldkey_ss58"]], "connection_requirements (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.connection_requirements"]], "consensus (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.consensus"]], "consensus (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.consensus"]], "delegated_list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.delegated_list_from_vec_u8"]], "difficulty (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.difficulty"]], "dividends (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.dividends"]], "dividends (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.dividends"]], "emission (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.emission"]], "emission (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.emission"]], "emission_value (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.emission_value"]], "encode() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.encode"]], "end (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.end"]], "fix_decoded_values() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.prometheusinfo class method)": [[2, "bittensor.chain_data.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.fix_decoded_values"]], "from_neuron_info() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding_using_type_string"]], "from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "hotkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.hotkey"]], "hotkey_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.hotkey_ss58"]], "immunity_period (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.immunity_period"]], "incentive (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.incentive"]], "incentive (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.incentive"]], "index (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.index"]], "ip (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip"]], "ip (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip"]], "ip (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip"]], "ip_str() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.ip_str"]], "ip_type (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip_type"]], "ip_type (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip_type"]], "ip_type (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip_type"]], "is_null (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.is_null"]], "is_null (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.is_null"]], "is_serving (bittensor.chain_data.axoninfo property)": [[2, "bittensor.chain_data.AxonInfo.is_serving"]], "kappa (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.kappa"]], "kappa (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.kappa"]], "last_update (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.last_update"]], "last_update (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.last_update"]], "list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_of_tuple_from_vec_u8"]], "max_allowed_validators (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_allowed_validators"]], "max_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_n"]], "max_regs_per_block (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_weight_limit"]], "min_allowed_weights (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.min_allowed_weights"]], "min_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.modality"]], "nays (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.nays"]], "netuid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.netuid"]], "netuid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.netuid"]], "netuid (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.netuid"]], "nominators (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.nominators"]], "owner_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.owner_ss58"]], "placeholder1 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder1"]], "placeholder2 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder2"]], "port (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.port"]], "port (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.port"]], "prometheus_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.protocol"]], "protocol (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.protocol"]], "pruning_score (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.pruning_score"]], "pruning_score (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.pruning_score"]], "rank (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.rank"]], "rank (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.rank"]], "registration_allowed (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.registrations"]], "return_per_1000 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.return_per_1000"]], "rho (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.rho"]], "rho (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.rho"]], "scaling_law_power (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.scaling_law_power"]], "stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake"]], "stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake"]], "stake (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.stake"]], "stake_dict (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake_dict"]], "stake_dict (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake_dict"]], "subnetwork_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.subnetwork_n"]], "take (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.take"]], "target_regs_per_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.tempo"]], "tempo (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.tempo"]], "threshold (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.threshold"]], "to_parameter_dict() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnethyperparameters method)": [[2, "bittensor.chain_data.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnetinfo method)": [[2, "bittensor.chain_data.SubnetInfo.to_parameter_dict"]], "total_daily_return (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_daily_return"]], "total_stake (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.total_stake"]], "trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.trust"]], "trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.trust"]], "uid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.uid"]], "uid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.uid"]], "validator_permit (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_permit"]], "validator_permit (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.validator_permits"]], "validator_trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_trust"]], "validator_trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_trust"]], "version (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.version"]], "version (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.version"]], "weights (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.weights"]], "weights_rate_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_version"]], "bittensor.cli": [[3, "module-bittensor.cli"]], "check_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.check_config"]], "cli (class in bittensor.cli)": [[3, "bittensor.cli.cli"]], "create_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.create_config"]], "run() (bittensor.cli.cli method)": [[3, "bittensor.cli.cli.run"]], "bittensor.commands": [[4, "module-bittensor.commands"]], "delegatestakecommand (class in bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.DelegateStakeCommand"]], "delegateunstakecommand (class in bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.DelegateUnstakeCommand"]], "listdelegatescommand (class in bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.ListDelegatesCommand"]], "mydelegatescommand (class in bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.MyDelegatesCommand"]], "nominatecommand (class in bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.NominateCommand"]], "add_args() (bittensor.commands.delegates.delegatestakecommand static method)": [[5, "bittensor.commands.delegates.DelegateStakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.delegateunstakecommand static method)": [[5, "bittensor.commands.delegates.DelegateUnstakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.listdelegatescommand static method)": [[5, "bittensor.commands.delegates.ListDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.mydelegatescommand static method)": [[5, "bittensor.commands.delegates.MyDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.nominatecommand static method)": [[5, "bittensor.commands.delegates.NominateCommand.add_args"]], "bittensor.commands.delegates": [[5, "module-bittensor.commands.delegates"]], "check_config() (bittensor.commands.delegates.delegatestakecommand static method)": [[5, "bittensor.commands.delegates.DelegateStakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.delegateunstakecommand static method)": [[5, "bittensor.commands.delegates.DelegateUnstakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.listdelegatescommand static method)": [[5, "bittensor.commands.delegates.ListDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.mydelegatescommand static method)": [[5, "bittensor.commands.delegates.MyDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.nominatecommand static method)": [[5, "bittensor.commands.delegates.NominateCommand.check_config"]], "run() (bittensor.commands.delegates.delegatestakecommand static method)": [[5, "bittensor.commands.delegates.DelegateStakeCommand.run"]], "run() (bittensor.commands.delegates.delegateunstakecommand static method)": [[5, "bittensor.commands.delegates.DelegateUnstakeCommand.run"]], "run() (bittensor.commands.delegates.listdelegatescommand static method)": [[5, "bittensor.commands.delegates.ListDelegatesCommand.run"]], "run() (bittensor.commands.delegates.mydelegatescommand static method)": [[5, "bittensor.commands.delegates.MyDelegatesCommand.run"]], "run() (bittensor.commands.delegates.nominatecommand static method)": [[5, "bittensor.commands.delegates.NominateCommand.run"]], "show_delegates() (in module bittensor.commands.delegates)": [[5, "bittensor.commands.delegates.show_delegates"]], "inspectcommand (class in bittensor.commands.inspect)": [[6, "bittensor.commands.inspect.InspectCommand"]], "add_args() (bittensor.commands.inspect.inspectcommand static method)": [[6, "bittensor.commands.inspect.InspectCommand.add_args"]], "bittensor.commands.inspect": [[6, "module-bittensor.commands.inspect"]], "check_config() (bittensor.commands.inspect.inspectcommand static method)": [[6, "bittensor.commands.inspect.InspectCommand.check_config"]], "run() (bittensor.commands.inspect.inspectcommand static method)": [[6, "bittensor.commands.inspect.InspectCommand.run"]], "listcommand (class in bittensor.commands.list)": [[7, "bittensor.commands.list.ListCommand"]], "add_args() (bittensor.commands.list.listcommand static method)": [[7, "bittensor.commands.list.ListCommand.add_args"]], "bittensor.commands.list": [[7, "module-bittensor.commands.list"]], "check_config() (bittensor.commands.list.listcommand static method)": [[7, "bittensor.commands.list.ListCommand.check_config"]], "run() (bittensor.commands.list.listcommand static method)": [[7, "bittensor.commands.list.ListCommand.run"]], "metagraphcommand (class in bittensor.commands.metagraph)": [[8, "bittensor.commands.metagraph.MetagraphCommand"]], "add_args() (bittensor.commands.metagraph.metagraphcommand static method)": [[8, "bittensor.commands.metagraph.MetagraphCommand.add_args"]], "bittensor.commands.metagraph": [[8, "module-bittensor.commands.metagraph"]], "check_config() (bittensor.commands.metagraph.metagraphcommand static method)": [[8, "bittensor.commands.metagraph.MetagraphCommand.check_config"]], "run() (bittensor.commands.metagraph.metagraphcommand static method)": [[8, "bittensor.commands.metagraph.MetagraphCommand.run"]], "listsubnetscommand (class in bittensor.commands.misc)": [[9, "bittensor.commands.misc.ListSubnetsCommand"]], "updatecommand (class in bittensor.commands.misc)": [[9, "bittensor.commands.misc.UpdateCommand"]], "add_args() (bittensor.commands.misc.listsubnetscommand static method)": [[9, "bittensor.commands.misc.ListSubnetsCommand.add_args"]], "add_args() (bittensor.commands.misc.updatecommand static method)": [[9, "bittensor.commands.misc.UpdateCommand.add_args"]], "bittensor.commands.misc": [[9, "module-bittensor.commands.misc"]], "check_config() (bittensor.commands.misc.listsubnetscommand static method)": [[9, "bittensor.commands.misc.ListSubnetsCommand.check_config"]], "check_config() (bittensor.commands.misc.updatecommand static method)": [[9, "bittensor.commands.misc.UpdateCommand.check_config"]], "run() (bittensor.commands.misc.listsubnetscommand static method)": [[9, "bittensor.commands.misc.ListSubnetsCommand.run"]], "run() (bittensor.commands.misc.updatecommand static method)": [[9, "bittensor.commands.misc.UpdateCommand.run"]], "registersubnetworkcommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.RegisterSubnetworkCommand"]], "subnetgethyperparamscommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.SubnetGetHyperparamsCommand"]], "subnethyperparamscommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.SubnetHyperparamsCommand"]], "subnetlistcommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.SubnetListCommand"]], "subnetlockcostcommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.SubnetLockCostCommand"]], "subnetsudocommand (class in bittensor.commands.network)": [[10, "bittensor.commands.network.SubnetSudoCommand"]], "add_args() (bittensor.commands.network.registersubnetworkcommand class method)": [[10, "bittensor.commands.network.RegisterSubnetworkCommand.add_args"]], "add_args() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetGetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlistcommand static method)": [[10, "bittensor.commands.network.SubnetListCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlockcostcommand class method)": [[10, "bittensor.commands.network.SubnetLockCostCommand.add_args"]], "add_args() (bittensor.commands.network.subnetsudocommand static method)": [[10, "bittensor.commands.network.SubnetSudoCommand.add_args"]], "bittensor.commands.network": [[10, "module-bittensor.commands.network"]], "check_config() (bittensor.commands.network.registersubnetworkcommand class method)": [[10, "bittensor.commands.network.RegisterSubnetworkCommand.check_config"]], "check_config() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetGetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlistcommand static method)": [[10, "bittensor.commands.network.SubnetListCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlockcostcommand class method)": [[10, "bittensor.commands.network.SubnetLockCostCommand.check_config"]], "check_config() (bittensor.commands.network.subnetsudocommand static method)": [[10, "bittensor.commands.network.SubnetSudoCommand.check_config"]], "run() (bittensor.commands.network.registersubnetworkcommand static method)": [[10, "bittensor.commands.network.RegisterSubnetworkCommand.run"]], "run() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetGetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnethyperparamscommand static method)": [[10, "bittensor.commands.network.SubnetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnetlistcommand static method)": [[10, "bittensor.commands.network.SubnetListCommand.run"]], "run() (bittensor.commands.network.subnetlockcostcommand static method)": [[10, "bittensor.commands.network.SubnetLockCostCommand.run"]], "run() (bittensor.commands.network.subnetsudocommand static method)": [[10, "bittensor.commands.network.SubnetSudoCommand.run"]], "overviewcommand (class in bittensor.commands.overview)": [[11, "bittensor.commands.overview.OverviewCommand"]], "add_args() (bittensor.commands.overview.overviewcommand static method)": [[11, "bittensor.commands.overview.OverviewCommand.add_args"]], "bittensor.commands.overview": [[11, "module-bittensor.commands.overview"]], "check_config() (bittensor.commands.overview.overviewcommand static method)": [[11, "bittensor.commands.overview.OverviewCommand.check_config"]], "run() (bittensor.commands.overview.overviewcommand static method)": [[11, "bittensor.commands.overview.OverviewCommand.run"]], "recycleregistercommand (class in bittensor.commands.register)": [[12, "bittensor.commands.register.RecycleRegisterCommand"]], "registercommand (class in bittensor.commands.register)": [[12, "bittensor.commands.register.RegisterCommand"]], "runfaucetcommand (class in bittensor.commands.register)": [[12, "bittensor.commands.register.RunFaucetCommand"]], "add_args() (bittensor.commands.register.recycleregistercommand static method)": [[12, "bittensor.commands.register.RecycleRegisterCommand.add_args"]], "add_args() (bittensor.commands.register.registercommand static method)": [[12, "bittensor.commands.register.RegisterCommand.add_args"]], "add_args() (bittensor.commands.register.runfaucetcommand static method)": [[12, "bittensor.commands.register.RunFaucetCommand.add_args"]], "bittensor.commands.register": [[12, "module-bittensor.commands.register"]], "check_config() (bittensor.commands.register.recycleregistercommand static method)": [[12, "bittensor.commands.register.RecycleRegisterCommand.check_config"]], "check_config() (bittensor.commands.register.registercommand static method)": [[12, "bittensor.commands.register.RegisterCommand.check_config"]], "check_config() (bittensor.commands.register.runfaucetcommand static method)": [[12, "bittensor.commands.register.RunFaucetCommand.check_config"]], "run() (bittensor.commands.register.recycleregistercommand static method)": [[12, "bittensor.commands.register.RecycleRegisterCommand.run"]], "run() (bittensor.commands.register.registercommand static method)": [[12, "bittensor.commands.register.RegisterCommand.run"]], "run() (bittensor.commands.register.runfaucetcommand static method)": [[12, "bittensor.commands.register.RunFaucetCommand.run"]], "rootgetweightscommand (class in bittensor.commands.root)": [[13, "bittensor.commands.root.RootGetWeightsCommand"]], "rootlist (class in bittensor.commands.root)": [[13, "bittensor.commands.root.RootList"]], "rootregistercommand (class in bittensor.commands.root)": [[13, "bittensor.commands.root.RootRegisterCommand"]], "rootsetweightscommand (class in bittensor.commands.root)": [[13, "bittensor.commands.root.RootSetWeightsCommand"]], "add_args() (bittensor.commands.root.rootgetweightscommand static method)": [[13, "bittensor.commands.root.RootGetWeightsCommand.add_args"]], "add_args() (bittensor.commands.root.rootlist static method)": [[13, "bittensor.commands.root.RootList.add_args"]], "add_args() (bittensor.commands.root.rootregistercommand static method)": [[13, "bittensor.commands.root.RootRegisterCommand.add_args"]], "add_args() (bittensor.commands.root.rootsetweightscommand static method)": [[13, "bittensor.commands.root.RootSetWeightsCommand.add_args"]], "bittensor.commands.root": [[13, "module-bittensor.commands.root"]], "check_config() (bittensor.commands.root.rootgetweightscommand static method)": [[13, "bittensor.commands.root.RootGetWeightsCommand.check_config"]], "check_config() (bittensor.commands.root.rootlist static method)": [[13, "bittensor.commands.root.RootList.check_config"]], "check_config() (bittensor.commands.root.rootregistercommand static method)": [[13, "bittensor.commands.root.RootRegisterCommand.check_config"]], "check_config() (bittensor.commands.root.rootsetweightscommand static method)": [[13, "bittensor.commands.root.RootSetWeightsCommand.check_config"]], "run() (bittensor.commands.root.rootgetweightscommand static method)": [[13, "bittensor.commands.root.RootGetWeightsCommand.run"]], "run() (bittensor.commands.root.rootlist static method)": [[13, "bittensor.commands.root.RootList.run"]], "run() (bittensor.commands.root.rootregistercommand static method)": [[13, "bittensor.commands.root.RootRegisterCommand.run"]], "run() (bittensor.commands.root.rootsetweightscommand static method)": [[13, "bittensor.commands.root.RootSetWeightsCommand.run"]], "proposalscommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.ProposalsCommand"]], "senatecommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.SenateCommand"]], "senateleavecommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.SenateLeaveCommand"]], "senateregistercommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.SenateRegisterCommand"]], "showvotescommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.ShowVotesCommand"]], "votecommand (class in bittensor.commands.senate)": [[14, "bittensor.commands.senate.VoteCommand"]], "add_args() (bittensor.commands.senate.proposalscommand class method)": [[14, "bittensor.commands.senate.ProposalsCommand.add_args"]], "add_args() (bittensor.commands.senate.senatecommand class method)": [[14, "bittensor.commands.senate.SenateCommand.add_args"]], "add_args() (bittensor.commands.senate.senateleavecommand class method)": [[14, "bittensor.commands.senate.SenateLeaveCommand.add_args"]], "add_args() (bittensor.commands.senate.senateregistercommand class method)": [[14, "bittensor.commands.senate.SenateRegisterCommand.add_args"]], "add_args() (bittensor.commands.senate.showvotescommand class method)": [[14, "bittensor.commands.senate.ShowVotesCommand.add_args"]], "add_args() (bittensor.commands.senate.votecommand class method)": [[14, "bittensor.commands.senate.VoteCommand.add_args"]], "bittensor.commands.senate": [[14, "module-bittensor.commands.senate"]], "check_config() (bittensor.commands.senate.proposalscommand class method)": [[14, "bittensor.commands.senate.ProposalsCommand.check_config"]], "check_config() (bittensor.commands.senate.senatecommand class method)": [[14, "bittensor.commands.senate.SenateCommand.check_config"]], "check_config() (bittensor.commands.senate.senateleavecommand class method)": [[14, "bittensor.commands.senate.SenateLeaveCommand.check_config"]], "check_config() (bittensor.commands.senate.senateregistercommand class method)": [[14, "bittensor.commands.senate.SenateRegisterCommand.check_config"]], "check_config() (bittensor.commands.senate.showvotescommand class method)": [[14, "bittensor.commands.senate.ShowVotesCommand.check_config"]], "check_config() (bittensor.commands.senate.votecommand class method)": [[14, "bittensor.commands.senate.VoteCommand.check_config"]], "display_votes() (in module bittensor.commands.senate)": [[14, "bittensor.commands.senate.display_votes"]], "format_call_data() (in module bittensor.commands.senate)": [[14, "bittensor.commands.senate.format_call_data"]], "run() (bittensor.commands.senate.proposalscommand static method)": [[14, "bittensor.commands.senate.ProposalsCommand.run"]], "run() (bittensor.commands.senate.senatecommand static method)": [[14, "bittensor.commands.senate.SenateCommand.run"]], "run() (bittensor.commands.senate.senateleavecommand static method)": [[14, "bittensor.commands.senate.SenateLeaveCommand.run"]], "run() (bittensor.commands.senate.senateregistercommand static method)": [[14, "bittensor.commands.senate.SenateRegisterCommand.run"]], "run() (bittensor.commands.senate.showvotescommand static method)": [[14, "bittensor.commands.senate.ShowVotesCommand.run"]], "run() (bittensor.commands.senate.votecommand static method)": [[14, "bittensor.commands.senate.VoteCommand.run"]], "stakecommand (class in bittensor.commands.stake)": [[15, "bittensor.commands.stake.StakeCommand"]], "stakeshow (class in bittensor.commands.stake)": [[15, "bittensor.commands.stake.StakeShow"]], "add_args() (bittensor.commands.stake.stakecommand class method)": [[15, "bittensor.commands.stake.StakeCommand.add_args"]], "add_args() (bittensor.commands.stake.stakeshow static method)": [[15, "bittensor.commands.stake.StakeShow.add_args"]], "bittensor.commands.stake": [[15, "module-bittensor.commands.stake"]], "check_config() (bittensor.commands.stake.stakecommand class method)": [[15, "bittensor.commands.stake.StakeCommand.check_config"]], "check_config() (bittensor.commands.stake.stakeshow static method)": [[15, "bittensor.commands.stake.StakeShow.check_config"]], "run() (bittensor.commands.stake.stakecommand static method)": [[15, "bittensor.commands.stake.StakeCommand.run"]], "run() (bittensor.commands.stake.stakeshow static method)": [[15, "bittensor.commands.stake.StakeShow.run"]], "transfercommand (class in bittensor.commands.transfer)": [[16, "bittensor.commands.transfer.TransferCommand"]], "add_args() (bittensor.commands.transfer.transfercommand static method)": [[16, "bittensor.commands.transfer.TransferCommand.add_args"]], "bittensor.commands.transfer": [[16, "module-bittensor.commands.transfer"]], "check_config() (bittensor.commands.transfer.transfercommand static method)": [[16, "bittensor.commands.transfer.TransferCommand.check_config"]], "run() (bittensor.commands.transfer.transfercommand static method)": [[16, "bittensor.commands.transfer.TransferCommand.run"]], "unstakecommand (class in bittensor.commands.unstake)": [[17, "bittensor.commands.unstake.UnStakeCommand"]], "add_args() (bittensor.commands.unstake.unstakecommand static method)": [[17, "bittensor.commands.unstake.UnStakeCommand.add_args"]], "bittensor.commands.unstake": [[17, "module-bittensor.commands.unstake"]], "check_config() (bittensor.commands.unstake.unstakecommand class method)": [[17, "bittensor.commands.unstake.UnStakeCommand.check_config"]], "run() (bittensor.commands.unstake.unstakecommand static method)": [[17, "bittensor.commands.unstake.UnStakeCommand.run"]], "delegatesdetails (class in bittensor.commands.utils)": [[18, "bittensor.commands.utils.DelegatesDetails"]], "intlistprompt (class in bittensor.commands.utils)": [[18, "bittensor.commands.utils.IntListPrompt"]], "bittensor.commands.utils": [[18, "module-bittensor.commands.utils"]], "check_choice() (bittensor.commands.utils.intlistprompt method)": [[18, "bittensor.commands.utils.IntListPrompt.check_choice"]], "check_for_cuda_reg_config() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.check_for_cuda_reg_config"]], "check_netuid_set() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.check_netuid_set"]], "description (bittensor.commands.utils.delegatesdetails attribute)": [[18, "bittensor.commands.utils.DelegatesDetails.description"]], "from_json() (bittensor.commands.utils.delegatesdetails class method)": [[18, "bittensor.commands.utils.DelegatesDetails.from_json"]], "get_all_wallets_for_path() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.get_all_wallets_for_path"]], "get_coldkey_wallets_for_path() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.get_coldkey_wallets_for_path"]], "get_delegates_details() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.get_delegates_details"]], "get_hotkey_wallets_for_wallet() (in module bittensor.commands.utils)": [[18, "bittensor.commands.utils.get_hotkey_wallets_for_wallet"]], "name (bittensor.commands.utils.delegatesdetails attribute)": [[18, "bittensor.commands.utils.DelegatesDetails.name"]], "signature (bittensor.commands.utils.delegatesdetails attribute)": [[18, "bittensor.commands.utils.DelegatesDetails.signature"]], "url (bittensor.commands.utils.delegatesdetails attribute)": [[18, "bittensor.commands.utils.DelegatesDetails.url"]], "newcoldkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.NewColdkeyCommand"]], "newhotkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.NewHotkeyCommand"]], "regencoldkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand"]], "regencoldkeypubcommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand"]], "regenhotkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand"]], "updatewalletcommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.UpdateWalletCommand"]], "walletcreatecommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.WalletCreateCommand"]], "add_args() (bittensor.commands.wallets.newcoldkeycommand static method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.newhotkeycommand static method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeycommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.add_args"]], "add_args() (bittensor.commands.wallets.regenhotkeycommand static method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.add_args"]], "add_args() (bittensor.commands.wallets.walletcreatecommand static method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.add_args"]], "bittensor.commands.wallets": [[19, "module-bittensor.commands.wallets"]], "check_config() (bittensor.commands.wallets.newcoldkeycommand static method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.newhotkeycommand static method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeycommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.check_config"]], "check_config() (bittensor.commands.wallets.regenhotkeycommand static method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.check_config"]], "check_config() (bittensor.commands.wallets.walletcreatecommand static method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.check_config"]], "run() (bittensor.commands.wallets.newcoldkeycommand method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.run"]], "run() (bittensor.commands.wallets.newhotkeycommand method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeycommand method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeypubcommand method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.run"]], "run() (bittensor.commands.wallets.regenhotkeycommand method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.run"]], "run() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.run"]], "run() (bittensor.commands.wallets.walletcreatecommand method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.run"]], "defaultconfig (class in bittensor.config)": [[20, "bittensor.config.DefaultConfig"]], "invalidconfigfile": [[20, "bittensor.config.InvalidConfigFile"]], "bittensor.config": [[20, "module-bittensor.config"]], "config (class in bittensor.config)": [[20, "bittensor.config.config"]], "copy() (bittensor.config.config method)": [[20, "bittensor.config.config.copy"]], "default() (bittensor.config.defaultconfig class method)": [[20, "bittensor.config.DefaultConfig.default"]], "is_set() (bittensor.config.config method)": [[20, "bittensor.config.config.is_set"]], "merge() (bittensor.config.config method)": [[20, "bittensor.config.config.merge"]], "merge_all() (bittensor.config.config class method)": [[20, "bittensor.config.config.merge_all"]], "to_string() (bittensor.config.config method)": [[20, "bittensor.config.config.to_string"]], "update_with_kwargs() (bittensor.config.config method)": [[20, "bittensor.config.config.update_with_kwargs"]], "__repr__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__repr__"]], "__str__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__str__"]], "bittensor.dendrite": [[21, "module-bittensor.dendrite"]], "call() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.call"]], "close_session() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.close_session"]], "dendrite (class in bittensor.dendrite)": [[21, "bittensor.dendrite.dendrite"]], "forward() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.forward"]], "keypair (bittensor.dendrite.dendrite attribute)": [[21, "bittensor.dendrite.dendrite.keypair"]], "preprocess_synapse_for_request() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.preprocess_synapse_for_request"]], "process_server_response() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.process_server_response"]], "query() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.query"]], "session (bittensor.dendrite.dendrite property)": [[21, "bittensor.dendrite.dendrite.session"]], "chainconnectionerror": [[22, "bittensor.errors.ChainConnectionError"]], "chainerror": [[22, "bittensor.errors.ChainError"]], "chainqueryerror": [[22, "bittensor.errors.ChainQueryError"]], "chaintransactionerror": [[22, "bittensor.errors.ChainTransactionError"]], "keyfileerror": [[22, "bittensor.errors.KeyFileError"]], "nominationerror": [[22, "bittensor.errors.NominationError"]], "notdelegateerror": [[22, "bittensor.errors.NotDelegateError"]], "notregisterederror": [[22, "bittensor.errors.NotRegisteredError"]], "registrationerror": [[22, "bittensor.errors.RegistrationError"]], "stakeerror": [[22, "bittensor.errors.StakeError"]], "transfererror": [[22, "bittensor.errors.TransferError"]], "unstakeerror": [[22, "bittensor.errors.UnstakeError"]], "bittensor.errors": [[22, "module-bittensor.errors"]], "bittensor.extrinsics": [[23, "module-bittensor.extrinsics"]], "bittensor.extrinsics.delegation": [[24, "module-bittensor.extrinsics.delegation"]], "delegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.delegate_extrinsic"]], "nominate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.nominate_extrinsic"]], "undelegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.undelegate_extrinsic"]], "bittensor.extrinsics.network": [[26, "module-bittensor.extrinsics.network"]], "register_subnetwork_extrinsic() (in module bittensor.extrinsics.network)": [[26, "bittensor.extrinsics.network.register_subnetwork_extrinsic"]], "set_hyperparameter_extrinsic() (in module bittensor.extrinsics.network)": [[26, "bittensor.extrinsics.network.set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[27, "module-bittensor.extrinsics.prometheus"]], "prometheus_extrinsic() (in module bittensor.extrinsics.prometheus)": [[27, "bittensor.extrinsics.prometheus.prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[28, "module-bittensor.extrinsics.registration"]], "burned_register_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.burned_register_extrinsic"]], "register_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.register_extrinsic"]], "run_faucet_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[29, "module-bittensor.extrinsics.root"]], "root_register_extrinsic() (in module bittensor.extrinsics.root)": [[29, "bittensor.extrinsics.root.root_register_extrinsic"]], "set_root_weights_extrinsic() (in module bittensor.extrinsics.root)": [[29, "bittensor.extrinsics.root.set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[30, "module-bittensor.extrinsics.senate"]], "leave_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.leave_senate_extrinsic"]], "register_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.register_senate_extrinsic"]], "vote_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[31, "module-bittensor.extrinsics.serving"]], "serve_axon_extrinsic() (in module bittensor.extrinsics.serving)": [[31, "bittensor.extrinsics.serving.serve_axon_extrinsic"]], "serve_extrinsic() (in module bittensor.extrinsics.serving)": [[31, "bittensor.extrinsics.serving.serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[32, "module-bittensor.extrinsics.set_weights"]], "set_weights_extrinsic() (in module bittensor.extrinsics.set_weights)": [[32, "bittensor.extrinsics.set_weights.set_weights_extrinsic"]], "add_stake_extrinsic() (in module bittensor.extrinsics.staking)": [[33, "bittensor.extrinsics.staking.add_stake_extrinsic"]], "add_stake_multiple_extrinsic() (in module bittensor.extrinsics.staking)": [[33, "bittensor.extrinsics.staking.add_stake_multiple_extrinsic"]], "bittensor.extrinsics.staking": [[33, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[34, "module-bittensor.extrinsics.transfer"]], "transfer_extrinsic() (in module bittensor.extrinsics.transfer)": [[34, "bittensor.extrinsics.transfer.transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[35, "module-bittensor.extrinsics.unstaking"]], "unstake_extrinsic() (in module bittensor.extrinsics.unstaking)": [[35, "bittensor.extrinsics.unstaking.unstake_extrinsic"]], "unstake_multiple_extrinsic() (in module bittensor.extrinsics.unstaking)": [[35, "bittensor.extrinsics.unstaking.unstake_multiple_extrinsic"]], "mockkeyfile (class in bittensor.keyfile)": [[36, "bittensor.keyfile.Mockkeyfile"]], "ask_password_to_encrypt() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.ask_password_to_encrypt"]], "bittensor.keyfile": [[36, "module-bittensor.keyfile"]], "check_and_update_encryption() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.check_and_update_encryption"]], "data (bittensor.keyfile.mockkeyfile property)": [[36, "bittensor.keyfile.Mockkeyfile.data"]], "data (bittensor.keyfile.keyfile property)": [[36, "bittensor.keyfile.keyfile.data"]], "decrypt() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.decrypt_keyfile_data"]], "deserialize_keypair_from_keyfile_data() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.deserialize_keypair_from_keyfile_data"]], "encrypt() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.encrypt_keyfile_data"]], "exists_on_device() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.exists_on_device"]], "get_coldkey_password_from_environment() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.get_coldkey_password_from_environment"]], "get_keypair() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.get_keypair"]], "is_encrypted() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.is_encrypted"]], "is_readable() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.is_readable"]], "is_writable() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.is_writable"]], "keyfile (class in bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile"]], "keyfile_data (bittensor.keyfile.keyfile property)": [[36, "bittensor.keyfile.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.keyfile.mockkeyfile property)": [[36, "bittensor.keyfile.Mockkeyfile.keypair"]], "keypair (bittensor.keyfile.keyfile property)": [[36, "bittensor.keyfile.keyfile.keypair"]], "legacy_encrypt_keyfile_data() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.legacy_encrypt_keyfile_data"]], "make_dirs() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.make_dirs"]], "serialized_keypair_to_keyfile_data() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.serialized_keypair_to_keyfile_data"]], "set_keypair() (bittensor.keyfile.mockkeyfile method)": [[36, "bittensor.keyfile.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile.keyfile method)": [[36, "bittensor.keyfile.keyfile.set_keypair"]], "validate_password() (in module bittensor.keyfile)": [[36, "bittensor.keyfile.validate_password"]], "add_args() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.add_args"]], "bittensor.logging": [[37, "module-bittensor.logging"]], "check_config() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.check_config"]], "config() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.config"]], "debug() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.debug"]], "error() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.error"]], "get_level() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.get_level"]], "help() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.help"]], "info() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.info"]], "log_filter() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.log_filter"]], "log_formatter() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.log_formatter"]], "log_save_filter() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.log_save_formatter"]], "logging (class in bittensor.logging)": [[37, "bittensor.logging.logging"]], "set_debug() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.set_debug"]], "set_trace() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.set_trace"]], "success() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.success"]], "trace() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.trace"]], "warning() (bittensor.logging.logging class method)": [[37, "bittensor.logging.logging.warning"]], "b (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.B"]], "c (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.C"]], "d (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.D"]], "e (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.E"]], "i (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.I"]], "r (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.R"]], "s (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.S"]], "t (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.T"]], "tv (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.Tv"]], "w (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.W"]], "active (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.active"]], "addresses (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.addresses"]], "axons (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.axons"]], "bittensor.metagraph": [[38, "module-bittensor.metagraph"]], "block (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.block"]], "bonds (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.bonds"]], "coldkeys (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.coldkeys"]], "consensus (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.consensus"]], "dividends (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.dividends"]], "emission (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.emission"]], "get_save_dir() (in module bittensor.metagraph)": [[38, "bittensor.metagraph.get_save_dir"]], "hotkeys (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.hotkeys"]], "incentive (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.incentive"]], "last_update (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.last_update"]], "latest_block_path() (in module bittensor.metagraph)": [[38, "bittensor.metagraph.latest_block_path"]], "load() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.load"]], "load_from_path() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.load_from_path"]], "metadata() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.metadata"]], "metagraph (class in bittensor.metagraph)": [[38, "bittensor.metagraph.metagraph"]], "n (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.n"]], "netuid (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.netuid"]], "network (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.network"]], "ranks (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.ranks"]], "save() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.save"]], "stake (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.stake"]], "sync() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.sync"]], "total_stake (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.total_stake"]], "trust (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.trust"]], "uids (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.uids"]], "validator_permit (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.validator_permit"]], "validator_trust (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.validator_trust"]], "version (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.version"]], "weights (bittensor.metagraph.metagraph attribute)": [[38, "bittensor.metagraph.metagraph.weights"]], "bittensor.mock": [[39, "module-bittensor.mock"]], "mockkeyfile (class in bittensor.mock.keyfile_mock)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile"]], "bittensor.mock.keyfile_mock": [[40, "module-bittensor.mock.keyfile_mock"]], "data (bittensor.mock.keyfile_mock.mockkeyfile property)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.data"]], "decrypt() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.decrypt"]], "encrypt() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.encrypt"]], "exists_on_device() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.exists_on_device"]], "get_keypair() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.get_keypair"]], "is_encrypted() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.is_encrypted"]], "is_readable() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.is_readable"]], "is_writable() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.is_writable"]], "keyfile_data (bittensor.mock.keyfile_mock.mockkeyfile property)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.keyfile_data"]], "keypair (bittensor.mock.keyfile_mock.mockkeyfile property)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.keypair"]], "make_dirs() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.make_dirs"]], "set_keypair() (bittensor.mock.keyfile_mock.mockkeyfile method)": [[40, "bittensor.mock.keyfile_mock.MockKeyfile.set_keypair"]], "account (bittensor.mock.subtensor_mock.mocksystemstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSystemState.Account"]], "active (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Active"]], "axoninfodict (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict"]], "axonservecallparams (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams"]], "delegates (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Delegates"]], "difficulty (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Difficulty"]], "immunityperiod (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.ImmunityPeriod"]], "infodict (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.InfoDict"]], "kappa (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Kappa"]], "mockchainstate (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockChainState"]], "mockmapresult (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockMapResult"]], "mocksubtensor (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor"]], "mocksubtensorstate (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState"]], "mocksubtensorvalue (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorValue"]], "mocksystemstate (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.MockSystemState"]], "networksadded (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.NetworksAdded"]], "prometheusinfodict (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict"]], "prometheusservecallparams (class in bittensor.mock.subtensor_mock)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams"]], "rho (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Rho"]], "stake (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.Stake"]], "subtensormodule (bittensor.mock.subtensor_mock.mockchainstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockChainState.SubtensorModule"]], "system (bittensor.mock.subtensor_mock.mockchainstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockChainState.System"]], "validatorbatchsize (bittensor.mock.subtensor_mock.mocksubtensorstate attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorState.ValidatorBatchSize"]], "bittensor.mock.subtensor_mock": [[41, "module-bittensor.mock.subtensor_mock"]], "block (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.block"]], "block (bittensor.mock.subtensor_mock.prometheusinfodict attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.block"]], "block_number (bittensor.mock.subtensor_mock.mocksubtensor attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.block_number"]], "chain_state (bittensor.mock.subtensor_mock.mocksubtensor attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.chain_state"]], "create_subnet() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.create_subnet"]], "default() (bittensor.mock.subtensor_mock.axoninfodict class method)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.default"]], "default() (bittensor.mock.subtensor_mock.infodict class method)": [[41, "bittensor.mock.subtensor_mock.InfoDict.default"]], "default() (bittensor.mock.subtensor_mock.prometheusinfodict class method)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.default"]], "do_block_step() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.do_block_step"]], "force_register_neuron() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.force_register_neuron"]], "force_set_balance() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.force_set_balance"]], "get_all_subnets_info() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_all_subnets_info"]], "get_balance() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_balance"]], "get_balances() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_balances"]], "get_block_hash() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_block_hash"]], "get_current_block() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_delegate_by_hotkey"]], "get_delegated() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_delegated"]], "get_delegates() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_delegates"]], "get_subnet_info() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_subnet_info"]], "get_transfer_fee() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.get_transfer_fee"]], "ip (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.ip"]], "ip (bittensor.mock.subtensor_mock.axonservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams.ip"]], "ip (bittensor.mock.subtensor_mock.prometheusinfodict attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.ip"]], "ip (bittensor.mock.subtensor_mock.prometheusservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams.ip"]], "ip_type (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.ip_type"]], "ip_type (bittensor.mock.subtensor_mock.axonservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams.ip_type"]], "ip_type (bittensor.mock.subtensor_mock.prometheusinfodict attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.ip_type"]], "ip_type (bittensor.mock.subtensor_mock.prometheusservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.mock.subtensor_mock.axonservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams.netuid"]], "netuid (bittensor.mock.subtensor_mock.prometheusservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams.netuid"]], "neuron_for_uid() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.neuron_for_uid_lite"]], "neurons() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.neurons"]], "neurons_lite() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.neurons_lite"]], "placeholder1 (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.placeholder1"]], "placeholder2 (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.placeholder2"]], "port (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.port"]], "port (bittensor.mock.subtensor_mock.axonservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams.port"]], "port (bittensor.mock.subtensor_mock.prometheusinfodict attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.port"]], "port (bittensor.mock.subtensor_mock.prometheusservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams.port"]], "protocol (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.protocol"]], "query_constant() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.query_constant"]], "query_map_subtensor() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.query_map_subtensor"]], "query_subtensor() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.query_subtensor"]], "records (bittensor.mock.subtensor_mock.mockmapresult attribute)": [[41, "bittensor.mock.subtensor_mock.MockMapResult.records"]], "reset() (bittensor.mock.subtensor_mock.mocksubtensor class method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.reset"]], "set_difficulty() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.set_difficulty"]], "setup() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.setup"]], "sudo_force_set_balance() (bittensor.mock.subtensor_mock.mocksubtensor method)": [[41, "bittensor.mock.subtensor_mock.MockSubtensor.sudo_force_set_balance"]], "value (bittensor.mock.subtensor_mock.mocksubtensorvalue attribute)": [[41, "bittensor.mock.subtensor_mock.MockSubtensorValue.value"]], "version (bittensor.mock.subtensor_mock.axoninfodict attribute)": [[41, "bittensor.mock.subtensor_mock.AxonInfoDict.version"]], "version (bittensor.mock.subtensor_mock.axonservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.AxonServeCallParams.version"]], "version (bittensor.mock.subtensor_mock.prometheusinfodict attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusInfoDict.version"]], "version (bittensor.mock.subtensor_mock.prometheusservecallparams attribute)": [[41, "bittensor.mock.subtensor_mock.PrometheusServeCallParams.version"]], "mockwallet (class in bittensor.mock.wallet_mock)": [[42, "bittensor.mock.wallet_mock.MockWallet"]], "bittensor.mock.wallet_mock": [[42, "module-bittensor.mock.wallet_mock"]], "coldkey_file (bittensor.mock.wallet_mock.mockwallet property)": [[42, "bittensor.mock.wallet_mock.MockWallet.coldkey_file"]], "coldkeypub_file (bittensor.mock.wallet_mock.mockwallet property)": [[42, "bittensor.mock.wallet_mock.MockWallet.coldkeypub_file"]], "get_mock_coldkey() (in module bittensor.mock.wallet_mock)": [[42, "bittensor.mock.wallet_mock.get_mock_coldkey"]], "get_mock_hotkey() (in module bittensor.mock.wallet_mock)": [[42, "bittensor.mock.wallet_mock.get_mock_hotkey"]], "get_mock_keypair() (in module bittensor.mock.wallet_mock)": [[42, "bittensor.mock.wallet_mock.get_mock_keypair"]], "get_mock_wallet() (in module bittensor.mock.wallet_mock)": [[42, "bittensor.mock.wallet_mock.get_mock_wallet"]], "hotkey_file (bittensor.mock.wallet_mock.mockwallet property)": [[42, "bittensor.mock.wallet_mock.MockWallet.hotkey_file"]], "btstreamingresponsemodel (class in bittensor.stream)": [[43, "bittensor.stream.BTStreamingResponseModel"]], "streamingsynapse (class in bittensor.stream)": [[43, "bittensor.stream.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor.stream)": [[43, "bittensor.stream.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor.stream)": [[43, "bittensor.stream.StreamingSynapse.Config"]], "bittensor.stream": [[43, "module-bittensor.stream"]], "create_streaming_response() (bittensor.stream.streamingsynapse method)": [[43, "bittensor.stream.StreamingSynapse.create_streaming_response"]], "extract_response_json() (bittensor.stream.streamingsynapse method)": [[43, "bittensor.stream.StreamingSynapse.extract_response_json"]], "process_streaming_response() (bittensor.stream.streamingsynapse method)": [[43, "bittensor.stream.StreamingSynapse.process_streaming_response"]], "stream_response() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[43, "bittensor.stream.StreamingSynapse.BTStreamingResponse.stream_response"]], "token_streamer (bittensor.stream.btstreamingresponsemodel attribute)": [[43, "bittensor.stream.BTStreamingResponseModel.token_streamer"], [43, "id0"]], "validate_assignment (bittensor.stream.streamingsynapse.config attribute)": [[43, "bittensor.stream.StreamingSynapse.Config.validate_assignment"]], "paramwithtypes (class in bittensor.subtensor)": [[44, "bittensor.subtensor.ParamWithTypes"]], "add_args() (bittensor.subtensor.subtensor class method)": [[44, "bittensor.subtensor.subtensor.add_args"]], "add_stake() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.add_stake_multiple"]], "associated_validator_ip_info() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.associated_validator_ip_info"]], "bittensor.subtensor": [[44, "module-bittensor.subtensor"]], "block (bittensor.subtensor.subtensor property)": [[44, "bittensor.subtensor.subtensor.block"]], "blocks_since_epoch() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.blocks_since_epoch"]], "bonds() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.bonds"]], "burn() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.burn"]], "burned_register() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.burned_register"]], "config() (bittensor.subtensor.subtensor static method)": [[44, "bittensor.subtensor.subtensor.config"]], "delegate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.delegate"]], "determine_chain_endpoint_and_network() (bittensor.subtensor.subtensor static method)": [[44, "bittensor.subtensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.difficulty"]], "does_hotkey_exist() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.does_hotkey_exist"]], "get_all_neurons_for_pubkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_block_hash"]], "get_current_block() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_existential_deposit"]], "get_hotkey_owner() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_hotkey_owner"]], "get_netuids_for_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_senate_members"]], "get_stake() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_subnets"]], "get_total_stake_for_coldkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.get_vote_data"]], "help() (bittensor.subtensor.subtensor class method)": [[44, "bittensor.subtensor.subtensor.help"]], "immunity_period() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.immunity_period"]], "incentive() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.incentive"]], "is_hotkey_delegate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.is_hotkey_registered_on_subnet"]], "is_senate_member() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.is_senate_member"]], "kappa() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.kappa"]], "leave_senate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.leave_senate"]], "max_allowed_validators() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.max_allowed_validators"]], "max_n() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.max_n"]], "max_weight_limit() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.max_weight_limit"]], "metagraph() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.metagraph"]], "min_allowed_weights() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.min_allowed_weights"]], "name (bittensor.subtensor.paramwithtypes attribute)": [[44, "bittensor.subtensor.ParamWithTypes.name"]], "neuron_for_uid() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.neurons_lite"]], "nominate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.nominate"]], "query_constant() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_constant"]], "query_map() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.query_subtensor"]], "register() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.register"]], "register_senate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.register_subnetwork"]], "rho() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.rho"]], "root_register() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.run_faucet"]], "scaling_law_power() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.scaling_law_power"]], "serve() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.serving_rate_limit"]], "set_hyperparameter() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.set_hyperparameter"]], "set_weights() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor.subtensor static method)": [[44, "bittensor.subtensor.subtensor.setup_config"]], "state_call() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.state_call"]], "subnet_exists() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.subnet_exists"]], "subnetwork_n() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor.subtensor)": [[44, "bittensor.subtensor.subtensor"]], "synergy_scaling_law_power() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.synergy_scaling_law_power"]], "tempo() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.tempo"]], "total_issuance() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.total_issuance"]], "total_stake() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.total_stake"]], "transfer() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.transfer"]], "tx_rate_limit() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.tx_rate_limit"]], "type (bittensor.subtensor.paramwithtypes attribute)": [[44, "bittensor.subtensor.ParamWithTypes.type"]], "undelegate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.unstake_multiple"]], "validator_batch_size() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_logits_divergence"]], "validator_prune_len() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.validator_sequence_length"]], "vote_senate() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.vote_senate"]], "weights() (bittensor.subtensor.subtensor method)": [[44, "bittensor.subtensor.subtensor.weights"]], "synapse (class in bittensor.synapse)": [[45, "bittensor.synapse.Synapse"]], "synapse.config (class in bittensor.synapse)": [[45, "bittensor.synapse.Synapse.Config"]], "terminalinfo (class in bittensor.synapse)": [[45, "bittensor.synapse.TerminalInfo"]], "terminalinfo.config (class in bittensor.synapse)": [[45, "bittensor.synapse.TerminalInfo.Config"]], "bittensor.synapse": [[45, "module-bittensor.synapse"]], "body_hash (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.body_hash"]], "cast_float() (in module bittensor.synapse)": [[45, "bittensor.synapse.cast_float"]], "cast_int() (in module bittensor.synapse)": [[45, "bittensor.synapse.cast_int"]], "deserialize() (bittensor.synapse.synapse method)": [[45, "bittensor.synapse.Synapse.deserialize"]], "failed_verification (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.failed_verification"]], "from_headers() (bittensor.synapse.synapse class method)": [[45, "bittensor.synapse.Synapse.from_headers"]], "get_size() (in module bittensor.synapse)": [[45, "bittensor.synapse.get_size"]], "get_total_size() (bittensor.synapse.synapse method)": [[45, "bittensor.synapse.Synapse.get_total_size"]], "is_blacklist (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.is_blacklist"]], "is_failure (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.is_failure"]], "is_success (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.is_success"]], "is_timeout (bittensor.synapse.synapse property)": [[45, "bittensor.synapse.Synapse.is_timeout"]], "parse_headers_to_inputs() (bittensor.synapse.synapse class method)": [[45, "bittensor.synapse.Synapse.parse_headers_to_inputs"]], "set_name_type() (bittensor.synapse.synapse method)": [[45, "bittensor.synapse.Synapse.set_name_type"]], "to_headers() (bittensor.synapse.synapse method)": [[45, "bittensor.synapse.Synapse.to_headers"]], "validate_assignment (bittensor.synapse.synapse.config attribute)": [[45, "bittensor.synapse.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.terminalinfo.config attribute)": [[45, "bittensor.synapse.TerminalInfo.Config.validate_assignment"]], "tensor (class in bittensor.tensor)": [[46, "bittensor.tensor.Tensor"], [46, "bittensor.tensor.tensor"]], "tensor.config (class in bittensor.tensor)": [[46, "bittensor.tensor.Tensor.Config"]], "bittensor.tensor": [[46, "module-bittensor.tensor"]], "buffer (bittensor.tensor.tensor attribute)": [[46, "bittensor.tensor.Tensor.buffer"]], "cast_dtype() (in module bittensor.tensor)": [[46, "bittensor.tensor.cast_dtype"]], "cast_shape() (in module bittensor.tensor)": [[46, "bittensor.tensor.cast_shape"]], "deserialize() (bittensor.tensor.tensor method)": [[46, "bittensor.tensor.Tensor.deserialize"]], "dtype (bittensor.tensor.tensor attribute)": [[46, "bittensor.tensor.Tensor.dtype"]], "numpy() (bittensor.tensor.tensor method)": [[46, "bittensor.tensor.Tensor.numpy"]], "serialize() (bittensor.tensor.tensor static method)": [[46, "bittensor.tensor.Tensor.serialize"]], "shape (bittensor.tensor.tensor attribute)": [[46, "bittensor.tensor.Tensor.shape"]], "tensor() (bittensor.tensor.tensor method)": [[46, "bittensor.tensor.Tensor.tensor"]], "tolist() (bittensor.tensor.tensor method)": [[46, "bittensor.tensor.Tensor.tolist"]], "validate_assignment (bittensor.tensor.tensor.config attribute)": [[46, "bittensor.tensor.Tensor.Config.validate_assignment"]], "brokenthreadpool": [[47, "bittensor.threadpool.BrokenThreadPool"]], "prioritythreadpoolexecutor (class in bittensor.threadpool)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor"]], "add_args() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor.add_args"]], "bittensor.threadpool": [[47, "module-bittensor.threadpool"]], "config() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor.config"]], "is_empty (bittensor.threadpool.prioritythreadpoolexecutor property)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor.is_empty"]], "shutdown() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor.shutdown"]], "submit() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[47, "bittensor.threadpool.PriorityThreadPoolExecutor.submit"]], "axonservecallparams (class in bittensor.types)": [[48, "bittensor.types.AxonServeCallParams"]], "prometheusservecallparams (class in bittensor.types)": [[48, "bittensor.types.PrometheusServeCallParams"]], "bittensor.types": [[48, "module-bittensor.types"]], "ip (bittensor.types.axonservecallparams attribute)": [[48, "bittensor.types.AxonServeCallParams.ip"]], "ip (bittensor.types.prometheusservecallparams attribute)": [[48, "bittensor.types.PrometheusServeCallParams.ip"]], "ip_type (bittensor.types.axonservecallparams attribute)": [[48, "bittensor.types.AxonServeCallParams.ip_type"]], "ip_type (bittensor.types.prometheusservecallparams attribute)": [[48, "bittensor.types.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.types.axonservecallparams attribute)": [[48, "bittensor.types.AxonServeCallParams.netuid"]], "netuid (bittensor.types.prometheusservecallparams attribute)": [[48, "bittensor.types.PrometheusServeCallParams.netuid"]], "port (bittensor.types.axonservecallparams attribute)": [[48, "bittensor.types.AxonServeCallParams.port"]], "port (bittensor.types.prometheusservecallparams attribute)": [[48, "bittensor.types.PrometheusServeCallParams.port"]], "version (bittensor.types.axonservecallparams attribute)": [[48, "bittensor.types.AxonServeCallParams.version"]], "version (bittensor.types.prometheusservecallparams attribute)": [[48, "bittensor.types.PrometheusServeCallParams.version"]], "u16_normalized_float() (in module bittensor.utils)": [[49, "bittensor.utils.U16_NORMALIZED_FLOAT"]], "u64_normalized_float() (in module bittensor.utils)": [[49, "bittensor.utils.U64_NORMALIZED_FLOAT"]], "bittensor.utils": [[49, "module-bittensor.utils"]], "get_explorer_root_url_by_network_from_map() (in module bittensor.utils)": [[49, "bittensor.utils.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor.utils)": [[49, "bittensor.utils.get_explorer_url_for_network"]], "hash() (in module bittensor.utils)": [[49, "bittensor.utils.hash"]], "ss58_address_to_bytes() (in module bittensor.utils)": [[49, "bittensor.utils.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor.utils)": [[49, "bittensor.utils.ss58_to_vec_u8"]], "strtobool() (in module bittensor.utils)": [[49, "bittensor.utils.strtobool"]], "strtobool_with_default() (in module bittensor.utils)": [[49, "bittensor.utils.strtobool_with_default"]], "u8_key_to_ss58() (in module bittensor.utils)": [[49, "bittensor.utils.u8_key_to_ss58"]], "unbiased_topk() (in module bittensor.utils)": [[49, "bittensor.utils.unbiased_topk"]], "version_checking() (in module bittensor.utils)": [[49, "bittensor.utils.version_checking"]], "balance (class in bittensor.utils.balance)": [[50, "bittensor.utils.balance.Balance"]], "bittensor.utils.balance": [[50, "module-bittensor.utils.balance"]], "from_float() (bittensor.utils.balance.balance static method)": [[50, "bittensor.utils.balance.Balance.from_float"]], "from_rao() (bittensor.utils.balance.balance static method)": [[50, "bittensor.utils.balance.Balance.from_rao"]], "from_tao() (bittensor.utils.balance.balance static method)": [[50, "bittensor.utils.balance.Balance.from_tao"]], "rao (bittensor.utils.balance.balance attribute)": [[50, "bittensor.utils.balance.Balance.rao"], [50, "id0"]], "rao_unit (bittensor.utils.balance.balance attribute)": [[50, "bittensor.utils.balance.Balance.rao_unit"], [50, "id1"]], "tao (bittensor.utils.balance.balance attribute)": [[50, "bittensor.utils.balance.Balance.tao"]], "tao (bittensor.utils.balance.balance property)": [[50, "id2"]], "unit (bittensor.utils.balance.balance attribute)": [[50, "bittensor.utils.balance.Balance.unit"], [50, "id3"]], "bittensor.utils.formatting": [[51, "module-bittensor.utils.formatting"]], "get_human_readable() (in module bittensor.utils.formatting)": [[51, "bittensor.utils.formatting.get_human_readable"]], "millify() (in module bittensor.utils.formatting)": [[51, "bittensor.utils.formatting.millify"]], "externalipnotfound": [[52, "bittensor.utils.networking.ExternalIPNotFound"]], "bittensor.utils.networking": [[52, "module-bittensor.utils.networking"]], "get_external_ip() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.get_external_ip"]], "get_formatted_ws_endpoint_url() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.get_formatted_ws_endpoint_url"]], "int_to_ip() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.int_to_ip"]], "ip__str__() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.ip__str__"]], "ip_to_int() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.ip_to_int"]], "ip_version() (in module bittensor.utils.networking)": [[52, "bittensor.utils.networking.ip_version"]], "cudaexception": [[53, "bittensor.utils.registration.CUDAException"]], "powsolution (class in bittensor.utils.registration)": [[53, "bittensor.utils.registration.POWSolution"]], "registrationstatistics (class in bittensor.utils.registration)": [[53, "bittensor.utils.registration.RegistrationStatistics"]], "registrationstatisticslogger (class in bittensor.utils.registration)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger"]], "bittensor.utils.registration": [[53, "module-bittensor.utils.registration"]], "block_hash (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.block_hash"]], "block_number (bittensor.utils.registration.powsolution attribute)": [[53, "bittensor.utils.registration.POWSolution.block_number"]], "block_number (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.block_number"]], "console (bittensor.utils.registration.registrationstatisticslogger attribute)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.console"]], "create_pow() (in module bittensor.utils.registration)": [[53, "bittensor.utils.registration.create_pow"]], "difficulty (bittensor.utils.registration.powsolution attribute)": [[53, "bittensor.utils.registration.POWSolution.difficulty"]], "difficulty (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.difficulty"]], "get_cpu_count() (in module bittensor.utils.registration)": [[53, "bittensor.utils.registration.get_cpu_count"]], "get_status_message() (bittensor.utils.registration.registrationstatisticslogger method)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.get_status_message"]], "hash_rate (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.hash_rate"]], "hash_rate_perpetual (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.hash_rate_perpetual"]], "is_stale() (bittensor.utils.registration.powsolution method)": [[53, "bittensor.utils.registration.POWSolution.is_stale"]], "nonce (bittensor.utils.registration.powsolution attribute)": [[53, "bittensor.utils.registration.POWSolution.nonce"]], "rounds_total (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.rounds_total"]], "seal (bittensor.utils.registration.powsolution attribute)": [[53, "bittensor.utils.registration.POWSolution.seal"]], "start() (bittensor.utils.registration.registrationstatisticslogger method)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.start"]], "status (bittensor.utils.registration.registrationstatisticslogger attribute)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.status"]], "stop() (bittensor.utils.registration.registrationstatisticslogger method)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.stop"]], "time_average (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.time_average"]], "time_spent (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.time_spent"]], "time_spent_total (bittensor.utils.registration.registrationstatistics attribute)": [[53, "bittensor.utils.registration.RegistrationStatistics.time_spent_total"]], "update() (bittensor.utils.registration.registrationstatisticslogger method)": [[53, "bittensor.utils.registration.RegistrationStatisticsLogger.update"]], "amountpersecondrollingaverage (class in bittensor.utils.stats)": [[55, "bittensor.utils.stats.AmountPerSecondRollingAverage"]], "eventspersecondrollingaverage (class in bittensor.utils.stats)": [[55, "bittensor.utils.stats.EventsPerSecondRollingAverage"]], "bittensor.utils.stats": [[55, "module-bittensor.utils.stats"]], "event() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[55, "bittensor.utils.stats.AmountPerSecondRollingAverage.event"]], "event() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[55, "bittensor.utils.stats.EventsPerSecondRollingAverage.event"]], "get() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[55, "bittensor.utils.stats.AmountPerSecondRollingAverage.get"]], "get() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[55, "bittensor.utils.stats.EventsPerSecondRollingAverage.get"]], "timed_rolling_avg (class in bittensor.utils.stats)": [[55, "bittensor.utils.stats.timed_rolling_avg"]], "update() (bittensor.utils.stats.timed_rolling_avg method)": [[55, "bittensor.utils.stats.timed_rolling_avg.update"]], "bittensor.utils.test_utils": [[56, "module-bittensor.utils.test_utils"]], "get_random_unused_port() (in module bittensor.utils.test_utils)": [[56, "bittensor.utils.test_utils.get_random_unused_port"]], "bittensor.utils.wallet_utils": [[57, "module-bittensor.utils.wallet_utils"]], "get_ss58_format() (in module bittensor.utils.wallet_utils)": [[57, "bittensor.utils.wallet_utils.get_ss58_format"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils.wallet_utils)": [[57, "bittensor.utils.wallet_utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils.wallet_utils)": [[57, "bittensor.utils.wallet_utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils.wallet_utils)": [[57, "bittensor.utils.wallet_utils.is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[58, "module-bittensor.utils.weight_utils"]], "convert_bond_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.convert_bond_uids_and_vals_to_tensor"]], "convert_root_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.convert_root_weight_uids_and_vals_to_tensor"]], "convert_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.convert_weight_uids_and_vals_to_tensor"]], "convert_weights_and_uids_for_emit() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.convert_weights_and_uids_for_emit"]], "normalize_max_weight() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.normalize_max_weight"]], "process_weights_for_netuid() (in module bittensor.utils.weight_utils)": [[58, "bittensor.utils.weight_utils.process_weights_for_netuid"]], "add_args() (bittensor.wallet.wallet class method)": [[59, "bittensor.wallet.wallet.add_args"]], "bittensor.wallet": [[59, "module-bittensor.wallet"]], "coldkey (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.coldkey"]], "coldkey_file (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.coldkey_file"]], "coldkeypub (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.coldkeypub_file"]], "config() (bittensor.wallet.wallet class method)": [[59, "bittensor.wallet.wallet.config"]], "create() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.create_new_hotkey"]], "display_mnemonic_msg() (in module bittensor.wallet)": [[59, "bittensor.wallet.display_mnemonic_msg"]], "get_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.get_coldkey"]], "get_coldkeypub() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.get_coldkeypub"]], "get_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.get_hotkey"]], "help() (bittensor.wallet.wallet class method)": [[59, "bittensor.wallet.wallet.help"]], "hotkey (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.hotkey"]], "hotkey_file (bittensor.wallet.wallet property)": [[59, "bittensor.wallet.wallet.hotkey_file"]], "new_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.new_hotkey"]], "recreate() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.recreate"]], "regen_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regen_coldkey"]], "regen_coldkeypub() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regen_coldkeypub"]], "regen_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.regenerate_hotkey"]], "set_coldkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.set_coldkeypub"]], "set_hotkey() (bittensor.wallet.wallet method)": [[59, "bittensor.wallet.wallet.set_hotkey"]], "wallet (class in bittensor.wallet)": [[59, "bittensor.wallet.wallet"]]}})