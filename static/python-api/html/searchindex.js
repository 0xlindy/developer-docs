Search.setIndex({"docnames": ["autoapi/bittensor/axon/index", "autoapi/bittensor/chain_data/index", "autoapi/bittensor/config/index", "autoapi/bittensor/dendrite/index", "autoapi/bittensor/errors/index", "autoapi/bittensor/extrinsics/delegation/index", "autoapi/bittensor/extrinsics/index", "autoapi/bittensor/extrinsics/log_utilities/index", "autoapi/bittensor/extrinsics/network/index", "autoapi/bittensor/extrinsics/prometheus/index", "autoapi/bittensor/extrinsics/registration/index", "autoapi/bittensor/extrinsics/root/index", "autoapi/bittensor/extrinsics/senate/index", "autoapi/bittensor/extrinsics/serving/index", "autoapi/bittensor/extrinsics/set_weights/index", "autoapi/bittensor/extrinsics/staking/index", "autoapi/bittensor/extrinsics/transfer/index", "autoapi/bittensor/extrinsics/unstaking/index", "autoapi/bittensor/index", "autoapi/bittensor/keyfile/index", "autoapi/bittensor/logging/index", "autoapi/bittensor/metagraph/index", "autoapi/bittensor/stream/index", "autoapi/bittensor/subtensor/index", "autoapi/bittensor/synapse/index", "autoapi/bittensor/tensor/index", "autoapi/bittensor/threadpool/index", "autoapi/bittensor/types/index", "autoapi/bittensor/utils/_register_cuda/index", "autoapi/bittensor/utils/balance/index", "autoapi/bittensor/utils/formatting/index", "autoapi/bittensor/utils/index", "autoapi/bittensor/utils/networking/index", "autoapi/bittensor/utils/registration/index", "autoapi/bittensor/utils/stats/index", "autoapi/bittensor/utils/test_utils/index", "autoapi/bittensor/utils/wallet_utils/index", "autoapi/bittensor/utils/weight_utils/index", "autoapi/bittensor/wallet/index", "autoapi/index", "autoapi/miner/index", "autoapi/neurons/index", "autoapi/neurons/validators/index", "autoapi/neurons/validators/validator/index", "autoapi/prompting/baseminer/blacklist/index", "autoapi/prompting/baseminer/config/index", "autoapi/prompting/baseminer/index", "autoapi/prompting/baseminer/miner/index", "autoapi/prompting/baseminer/priority/index", "autoapi/prompting/baseminer/run/index", "autoapi/prompting/baseminer/set_weights/index", "autoapi/prompting/index", "autoapi/prompting/protocol/index", "autoapi/prompting/validators/config/index", "autoapi/prompting/validators/criteria/index", "autoapi/prompting/validators/dataset/index", "autoapi/prompting/validators/event/index", "autoapi/prompting/validators/forward/index", "autoapi/prompting/validators/gating/index", "autoapi/prompting/validators/index", "autoapi/prompting/validators/misc/index", "autoapi/prompting/validators/penalty/content_match/index", "autoapi/prompting/validators/penalty/index", "autoapi/prompting/validators/penalty/keyword_match/index", "autoapi/prompting/validators/penalty/penalty/index", "autoapi/prompting/validators/penalty/task_validation/index", "autoapi/prompting/validators/prompts/index", "autoapi/prompting/validators/reward/blacklist/index", "autoapi/prompting/validators/reward/config/index", "autoapi/prompting/validators/reward/dahoas/index", "autoapi/prompting/validators/reward/diversity/index", "autoapi/prompting/validators/reward/dpo/index", "autoapi/prompting/validators/reward/index", "autoapi/prompting/validators/reward/nsfw/index", "autoapi/prompting/validators/reward/open_assistant/index", "autoapi/prompting/validators/reward/prompt/index", "autoapi/prompting/validators/reward/reciprocate/index", "autoapi/prompting/validators/reward/relevance/index", "autoapi/prompting/validators/reward/reward/index", "autoapi/prompting/validators/tasks/index", "autoapi/prompting/validators/utils/index", "autoapi/prompting/validators/weights/index", "index", "testing"], "filenames": ["autoapi/bittensor/axon/index.rst", "autoapi/bittensor/chain_data/index.rst", "autoapi/bittensor/config/index.rst", "autoapi/bittensor/dendrite/index.rst", "autoapi/bittensor/errors/index.rst", "autoapi/bittensor/extrinsics/delegation/index.rst", "autoapi/bittensor/extrinsics/index.rst", "autoapi/bittensor/extrinsics/log_utilities/index.rst", "autoapi/bittensor/extrinsics/network/index.rst", "autoapi/bittensor/extrinsics/prometheus/index.rst", "autoapi/bittensor/extrinsics/registration/index.rst", "autoapi/bittensor/extrinsics/root/index.rst", "autoapi/bittensor/extrinsics/senate/index.rst", "autoapi/bittensor/extrinsics/serving/index.rst", "autoapi/bittensor/extrinsics/set_weights/index.rst", "autoapi/bittensor/extrinsics/staking/index.rst", "autoapi/bittensor/extrinsics/transfer/index.rst", "autoapi/bittensor/extrinsics/unstaking/index.rst", "autoapi/bittensor/index.rst", "autoapi/bittensor/keyfile/index.rst", "autoapi/bittensor/logging/index.rst", "autoapi/bittensor/metagraph/index.rst", "autoapi/bittensor/stream/index.rst", "autoapi/bittensor/subtensor/index.rst", "autoapi/bittensor/synapse/index.rst", "autoapi/bittensor/tensor/index.rst", "autoapi/bittensor/threadpool/index.rst", "autoapi/bittensor/types/index.rst", "autoapi/bittensor/utils/_register_cuda/index.rst", "autoapi/bittensor/utils/balance/index.rst", "autoapi/bittensor/utils/formatting/index.rst", "autoapi/bittensor/utils/index.rst", "autoapi/bittensor/utils/networking/index.rst", "autoapi/bittensor/utils/registration/index.rst", "autoapi/bittensor/utils/stats/index.rst", "autoapi/bittensor/utils/test_utils/index.rst", "autoapi/bittensor/utils/wallet_utils/index.rst", "autoapi/bittensor/utils/weight_utils/index.rst", "autoapi/bittensor/wallet/index.rst", "autoapi/index.rst", "autoapi/miner/index.rst", "autoapi/neurons/index.rst", "autoapi/neurons/validators/index.rst", "autoapi/neurons/validators/validator/index.rst", "autoapi/prompting/baseminer/blacklist/index.rst", "autoapi/prompting/baseminer/config/index.rst", "autoapi/prompting/baseminer/index.rst", "autoapi/prompting/baseminer/miner/index.rst", "autoapi/prompting/baseminer/priority/index.rst", "autoapi/prompting/baseminer/run/index.rst", "autoapi/prompting/baseminer/set_weights/index.rst", "autoapi/prompting/index.rst", "autoapi/prompting/protocol/index.rst", "autoapi/prompting/validators/config/index.rst", "autoapi/prompting/validators/criteria/index.rst", "autoapi/prompting/validators/dataset/index.rst", "autoapi/prompting/validators/event/index.rst", "autoapi/prompting/validators/forward/index.rst", "autoapi/prompting/validators/gating/index.rst", "autoapi/prompting/validators/index.rst", "autoapi/prompting/validators/misc/index.rst", "autoapi/prompting/validators/penalty/content_match/index.rst", "autoapi/prompting/validators/penalty/index.rst", "autoapi/prompting/validators/penalty/keyword_match/index.rst", "autoapi/prompting/validators/penalty/penalty/index.rst", "autoapi/prompting/validators/penalty/task_validation/index.rst", "autoapi/prompting/validators/prompts/index.rst", "autoapi/prompting/validators/reward/blacklist/index.rst", "autoapi/prompting/validators/reward/config/index.rst", "autoapi/prompting/validators/reward/dahoas/index.rst", "autoapi/prompting/validators/reward/diversity/index.rst", "autoapi/prompting/validators/reward/dpo/index.rst", "autoapi/prompting/validators/reward/index.rst", "autoapi/prompting/validators/reward/nsfw/index.rst", "autoapi/prompting/validators/reward/open_assistant/index.rst", "autoapi/prompting/validators/reward/prompt/index.rst", "autoapi/prompting/validators/reward/reciprocate/index.rst", "autoapi/prompting/validators/reward/relevance/index.rst", "autoapi/prompting/validators/reward/reward/index.rst", "autoapi/prompting/validators/tasks/index.rst", "autoapi/prompting/validators/utils/index.rst", "autoapi/prompting/validators/weights/index.rst", "index.rst", "testing.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.axon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.chain_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.dendrite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.errors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.delegation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.log_utilities</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.network</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.prometheus</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.registration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.root</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.senate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.serving</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.staking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.transfer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.unstaking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.keyfile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.metagraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.stream</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.subtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.synapse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.threadpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils._register_cuda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.balance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.formatting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.networking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.registration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.stats</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.test_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.wallet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.weight_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.wallet</span></code>", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators.validator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.priority</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.run</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.protocol</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.event</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.forward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.gating</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.content_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.keyword_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.task_validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.prompts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dahoas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.diversity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.nsfw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.open_assistant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.prompt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reciprocate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.relevance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.tasks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.weights</span></code>", "Welcome to Bittensor API Documentation", "Documentation Updates"], "terms": {"creat": [0, 1, 2, 18, 19, 21, 22, 24, 31, 33, 38, 39, 45, 52, 54, 58, 61, 62, 64, 65, 68, 70, 72, 77, 79], "init": 0, "whcih": 0, "servic": 0, "forward": [0, 3, 18, 39, 49, 51, 58, 59, 69, 70, 72, 77], "backward": [0, 58], "request": [0, 3, 7, 18, 22, 24, 40, 47, 49], "from": [0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 31, 32, 33, 37, 38, 40, 45, 47, 52, 55, 57, 66, 67, 71, 72, 80], "other": [0, 1, 3, 18, 26, 29, 38, 47, 49, 50, 66], "neuron": [0, 1, 3, 4, 7, 14, 18, 21, 23, 37, 39, 80, 82], "fastapithreadedserv": 0, "config": [0, 7, 18, 20, 22, 23, 24, 25, 26, 38, 39, 40, 43, 46, 47, 51, 52, 58, 59, 72], "base": [0, 1, 2, 3, 4, 10, 18, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 40, 47, 52, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80], "uvicorn": 0, "server": [0, 3, 7, 18, 22], "paramet": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 43, 44, 45, 47, 48, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "should_exit": [0, 49], "bool": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 29, 31, 33, 36, 38, 44, 47, 50, 54, 56, 60, 66, 67, 72, 80, 81], "fals": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 31, 33, 36, 38, 50, 54, 60, 66, 69, 72, 80], "is_run": 0, "install_signal_handl": 0, "run_in_thread": 0, "_wrapper_run": 0, "start": [0, 7, 18, 28, 33, 40, 47, 49, 54, 80], "stop": [0, 18, 33, 47, 49], "wallet": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 29, 31, 33, 39, 43, 45, 47, 50], "none": [0, 2, 3, 5, 7, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 37, 38, 40, 47, 50, 56, 57, 58, 69, 72], "port": [0, 1, 9, 13, 18, 23, 24, 27, 32], "ip": [0, 1, 3, 9, 13, 18, 21, 23, 24, 27, 32], "external_ip": [0, 3, 7, 18, 32], "external_port": [0, 18], "max_work": [0, 18, 26], "The": [0, 3, 5, 7, 10, 13, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 36, 38, 40, 45, 47, 49, 50, 52, 58, 66, 67, 70, 72, 77, 78, 80, 83], "i": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 37, 38, 40, 47, 49, 50, 52, 57, 58, 66, 67, 70, 71, 72, 77, 80, 83], "an": [0, 1, 3, 4, 9, 13, 17, 18, 19, 22, 23, 24, 25, 29, 31, 32, 33, 38, 40, 47, 49, 50, 52, 56, 58, 61, 62, 64, 65, 66, 67, 72, 79], "object": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 45, 47, 50, 52, 53, 56, 58, 66, 80], "form": [0, 2, 18, 32, 40], "core": [0, 18, 31, 32, 33], "part": [0, 18, 22, 66], "": [0, 1, 3, 7, 10, 15, 18, 19, 21, 22, 23, 24, 31, 33, 38, 40, 47, 49, 50, 52, 66, 67, 70, 71, 72, 77, 78], "serv": [0, 1, 6, 9, 18, 23, 27, 39, 49, 80], "synaps": [0, 3, 7, 18, 22, 39, 40, 44, 47, 48, 52, 62, 64, 72, 78], "reli": [0, 3, 18, 66], "heavili": [0, 18], "underli": [0, 18], "fastapi": [0, 3, 18], "router": [0, 18, 32], "which": [0, 2, 11, 14, 18, 21, 22, 23, 24, 38, 40, 47, 49, 52, 66, 71, 72], "util": [0, 1, 5, 15, 16, 17, 18, 23, 39, 40, 51, 59], "endpoint": [0, 1, 3, 7, 9, 13, 18, 23, 32], "differ": [0, 2, 18, 20, 24, 29, 31, 33, 52, 66, 67, 70, 72, 77, 78], "messag": [0, 3, 18, 20, 23, 38, 40, 45, 47, 52, 58, 70, 72, 77], "type": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 47, 48, 50, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "method": [0, 1, 3, 18, 22, 23, 24, 26, 29, 33, 40, 45, 47, 50, 52, 54, 58, 62, 64, 67, 68, 70, 72, 77, 78], "thi": [0, 1, 2, 3, 7, 16, 18, 19, 22, 23, 24, 26, 29, 33, 38, 39, 40, 45, 47, 49, 50, 52, 58, 66, 67, 70, 72, 77, 78, 82, 83], "ar": [0, 2, 3, 4, 18, 19, 23, 24, 25, 26, 31, 38, 40, 45, 47, 49, 52, 58, 66, 67, 70, 72, 77, 78, 83], "equip": [0, 18], "deal": [0, 18, 52], "incom": [0, 18, 40, 47, 49, 52], "scenario": [0, 3, 18, 19, 52], "network": [0, 3, 6, 7, 9, 11, 13, 18, 21, 22, 23, 31, 33, 37, 39, 47, 49, 50, 52, 58, 80], "face": [0, 18, 32], "It": [0, 3, 18, 19, 22, 26, 29, 45, 47, 52, 58, 66, 67, 70, 72, 77, 78], "accept": [0, 18, 20, 26, 38], "multipl": [0, 3, 18, 31, 33, 47, 58, 70, 77], "argument": [0, 1, 2, 18, 20, 23, 26, 38, 40, 45, 47, 58], "like": [0, 18, 23, 47, 66], "configur": [0, 2, 18, 40, 45, 47, 49, 52, 58, 68, 72], "address": [0, 3, 5, 15, 16, 17, 18, 21, 23, 31, 36, 38, 66], "bind": [0, 18], "extern": [0, 3, 18, 32, 49], "max": [0, 18, 37, 40], "worker": [0, 18, 26, 33], "kei": [0, 1, 11, 14, 16, 18, 19, 23, 31, 36, 38], "involv": [0, 18, 52], "manag": [0, 2, 3, 18, 22, 38, 49, 50, 52], "oper": [0, 3, 18, 19, 29, 37, 38, 40, 47, 49, 50], "applic": [0, 18, 22], "includ": [0, 3, 7, 8, 12, 15, 17, 18, 21, 22, 23, 47, 52, 54, 66, 83], "attach": [0, 18, 49], "offer": [0, 18, 52], "flexibl": [0, 18], "specifi": [0, 3, 5, 15, 17, 18, 21, 23, 52], "custom": [0, 18, 24, 40, 45, 47, 52, 58], "rule": [0, 18], "blacklist": [0, 18, 24, 39, 46, 47, 49, 51, 59, 68, 72], "priorit": [0, 18, 47], "verifi": [0, 18, 19], "against": [0, 7, 18, 19, 33, 52], "function": [0, 3, 7, 22, 47, 52, 58, 67, 72, 78], "also": [0, 3, 18, 22, 33, 38, 45, 47, 52], "encapsul": [0, 3, 18, 22, 47, 52, 58], "add": [0, 2, 15, 18, 23, 24, 40, 47, 58, 67, 68, 72], "command": [0, 2, 18, 40, 45, 47, 58], "line": [0, 2, 18, 31, 33, 40, 45, 47, 58], "user": [0, 1, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 38, 40, 52], "friendli": [0, 18], "interact": [0, 18, 23, 29, 40, 52], "program": [0, 18], "support": [0, 18, 19, 67, 72], "handl": [0, 3, 7, 18, 22, 23, 32, 40, 47, 49, 52], "defin": [0, 18, 19, 47, 49, 52, 54, 58], "behavior": [0, 18, 24, 47, 52], "intern": [0, 3, 18, 22, 47, 52], "mechan": [0, 18], "thread": [0, 10, 18, 26, 28, 31, 33, 47], "pool": [0, 18, 58, 70, 77], "concurr": [0, 3, 18, 26], "us": [0, 2, 3, 4, 7, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 26, 28, 31, 33, 38, 40, 47, 50, 52, 58, 61, 62, 64, 65, 66, 67, 70, 71, 72, 77, 78, 79], "prioriti": [0, 18, 26, 38, 39, 46, 47, 49, 51], "level": [0, 18, 50], "python": [0, 18, 24, 52, 82], "import": [0, 18, 47], "mysyanps": [0, 18], "input": [0, 1, 3, 18, 19, 24, 38, 58, 66], "int": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 50, 54, 56, 57, 58, 60, 66, 67, 72, 79, 80], "1": [0, 1, 2, 7, 18, 23, 26, 28, 31, 34, 37, 39, 49, 50, 51, 54, 59, 60, 62, 64, 67, 68, 70, 72, 77, 78, 83], "output": [0, 18, 33, 52, 58, 70, 77], "def": [0, 18, 47], "appli": [0, 18, 58, 70, 72, 77, 78], "logic": [0, 18, 22, 24, 47, 52], "return": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 44, 45, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "2": [0, 1, 2, 18, 23, 49, 50, 54, 59, 62, 64, 68, 72, 83], "verif": [0, 18, 24], "verify_my_synaps": [0, 18], "option": [0, 1, 2, 3, 5, 7, 15, 17, 18, 19, 21, 23, 24, 25, 31, 33, 38, 40, 49, 50, 67, 72], "rais": [0, 3, 4, 5, 15, 17, 18, 19, 23, 25, 26, 31, 32, 33, 38, 45, 47, 49, 50, 55], "except": [0, 2, 3, 4, 10, 18, 19, 25, 26, 32, 33, 45, 47, 49, 50], "fucntion": [0, 18], "blacklist_my_synaps": [0, 18], "non": [0, 4, 10, 18, 19, 24, 38, 47], "true": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 36, 38, 49, 52, 66, 67, 71, 72, 80], "prioritize_my_synap": [0, 18], "float": [0, 1, 3, 5, 7, 11, 14, 15, 16, 17, 18, 23, 24, 29, 31, 33, 34, 37, 47, 48, 54, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 77, 78], "0": [0, 1, 3, 10, 11, 13, 14, 18, 23, 28, 31, 32, 33, 34, 37, 50, 51, 54, 58, 66, 67, 68, 70, 72, 77, 78, 83], "initi": [0, 1, 3, 18, 21, 22, 23, 26, 40, 45, 49, 52, 67, 72], "my_axon": [0, 18], "my_config": [0, 18], "my_wallet": [0, 18], "9090": [0, 18], "192": [0, 9, 13, 18], "203": [0, 18], "113": [0, 18], "7070": [0, 18], "forward_fn": [0, 18], "forward_my_synaps": [0, 18], "verify_fn": [0, 18], "blacklist_fn": [0, 18], "priority_fn": [0, 18], "forward_my_synapse_2": [0, 18], "verify_my_synapse_2": [0, 18], "blacklist_my_synapse_2": [0, 18], "prioritize_my_synape_2": [0, 18], "netuid": [0, 1, 7, 8, 9, 10, 11, 13, 14, 18, 21, 23, 27, 31, 33, 37, 50], "subtensor": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 31, 33, 37, 39, 43, 45, 47, 50], "info": [0, 1, 7, 18, 20, 23], "associ": [0, 1, 18, 23, 26, 54], "axoninfo": [0, 1, 3, 18, 23], "regist": [0, 4, 5, 8, 10, 11, 12, 15, 17, 18, 23, 31, 33, 47], "api": [0, 18], "name": [0, 1, 7, 8, 18, 19, 21, 23, 24, 31, 38, 40, 52, 54, 56, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "first": [0, 15, 18, 24, 47, 58, 66, 67, 70, 72, 77, 78], "callabl": [0, 18, 22, 26, 31, 33, 44, 48], "call": [0, 3, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 27, 47, 72, 78], "when": [0, 3, 4, 18, 24, 26, 31, 32, 33, 40, 47, 52, 55, 66, 67, 72], "access": [0, 1, 3, 18, 24, 38, 52, 54, 62, 64, 68, 72], "should": [0, 3, 10, 18, 22, 23, 24, 31, 33, 38, 40, 47, 52, 54, 66, 68, 72, 80], "have": [0, 1, 18, 24, 26, 54, 62, 64, 67, 68, 72], "least": [0, 18], "one": [0, 1, 2, 3, 18, 23, 26, 33, 45], "filter": [0, 18, 20], "out": [0, 18, 20], "undesir": [0, 18], "take": [0, 1, 2, 18, 22, 31], "same": [0, 7, 18, 19, 31, 33, 38, 66], "boolean": [0, 2, 18, 31], "valu": [0, 1, 2, 8, 11, 14, 18, 21, 23, 24, 25, 29, 31, 32, 33, 34, 37, 47, 50, 52, 54, 58, 62, 64, 66, 67, 68, 70, 72, 77, 78], "default": [0, 2, 3, 15, 17, 18, 19, 23, 24, 28, 31, 33, 38, 45, 47, 50, 58, 67, 68, 72], "mean": [0, 18, 24, 31, 33, 47, 52, 58, 66, 67, 70, 72, 77, 78], "rank": [0, 1, 18, 21, 66], "numer": [0, 18, 66], "repres": [0, 3, 18, 19, 21, 24, 25, 26, 29, 52, 66], "sort": [0, 7, 18, 31, 67, 72], "If": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 31, 33, 40, 47, 49, 50, 57, 66], "self": [0, 1, 2, 3, 7, 18, 19, 23, 24, 29, 34, 44, 47, 48, 49, 57, 60, 62, 64, 66, 72, 78, 80, 81], "default_verifi": [0, 18], "note": [0, 3, 18, 32, 33, 38, 52, 57, 58, 66, 67, 68, 70, 72, 77, 78, 83], "design": [0, 3, 18, 19, 22, 47, 52], "receiv": [0, 3, 18, 22, 47, 66], "assertionerror": [0, 18], "doe": [0, 18, 19, 23, 24, 31, 33, 66], "signatur": [0, 18, 22, 24], "yoursynaps": [0, 18], "instanc": [0, 3, 18, 24, 26, 47, 52], "axonserv": [0, 18], "potenti": [0, 18, 52], "chain": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27, 37, 50], "classmethod": [0, 1, 2, 18, 20, 23, 24, 26, 38, 40, 43, 47, 58], "pars": [0, 2, 3, 18, 22, 24], "set": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 33, 35, 38, 40, 45, 47, 49, 50, 52, 57, 67, 72], "help": [0, 18, 20, 23, 38, 45, 52], "print": [0, 2, 3, 7, 18, 19, 20, 23, 31, 33, 38, 45, 52], "text": [0, 7, 18, 20, 54, 58, 66, 67, 70, 72, 77, 82], "list": [0, 1, 2, 3, 7, 10, 11, 14, 15, 17, 18, 21, 23, 24, 25, 31, 33, 37, 38, 40, 52, 54, 56, 57, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "descript": [0, 18], "stdout": [0, 18, 20, 23, 38], "add_arg": [0, 18, 20, 23, 26, 38, 40, 43, 47, 53, 58], "parser": [0, 2, 18, 20, 23, 26, 38, 40, 43, 47, 53, 58], "prefix": [0, 18, 20, 23, 24, 26, 38], "specif": [0, 7, 8, 18, 20, 22, 24, 26, 38, 40, 47, 52, 54, 66], "argpars": [0, 2, 18, 20, 23, 26, 38, 40, 47, 58], "argumentpars": [0, 2, 18, 20, 23, 26, 38, 40, 47, 58], "ad": [0, 1, 18, 24, 40, 47, 54, 58, 62, 64, 68, 72, 83], "str": [0, 1, 2, 3, 5, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 38, 40, 44, 52, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "environ": [0, 18, 19, 28, 33, 67, 70, 72, 77, 78], "variabl": [0, 18, 19, 24], "async": [0, 3, 18, 22, 44, 52, 57], "verify_body_integr": [0, 18], "asynchron": [0, 3, 18, 22, 52], "integr": [0, 18, 66], "bodi": [0, 18, 22, 24], "compar": [0, 7, 18, 67, 70, 72, 77, 78], "hash": [0, 18, 23, 24, 28, 31, 33, 52], "requir": [0, 4, 7, 18, 19, 22, 31, 32, 33, 38, 47, 52], "field": [0, 18, 24, 40, 47, 52], "correspond": [0, 11, 14, 18, 28, 40], "provid": [0, 3, 18, 19, 22, 24, 29, 40, 47, 52, 61, 62, 64, 65, 66, 79, 82], "header": [0, 3, 18, 22, 24, 47, 52], "critic": [0, 18, 66], "ensur": [0, 3, 18, 22, 40, 45, 49, 52, 66, 67, 70, 72, 77, 78], "payload": [0, 18], "ha": [0, 1, 2, 3, 18, 22, 33, 47, 52, 67, 72, 80], "been": [0, 2, 3, 18, 22, 24, 26, 47, 52, 67, 72], "alter": [0, 18], "tamper": [0, 18], "dure": [0, 3, 18, 33, 49, 52], "transmiss": [0, 18], "establish": [0, 3, 18], "trust": [0, 1, 18, 21, 49, 50], "secur": [0, 18], "between": [0, 10, 18, 29, 37, 58, 66], "sender": [0, 18], "contain": [0, 3, 18, 22, 33, 38, 39, 40, 47, 52, 54, 58, 66, 67, 70, 72, 77], "both": [0, 18, 40, 52], "dictionari": [0, 1, 7, 18, 21, 23, 24, 52, 56, 67, 72], "all": [0, 2, 3, 7, 10, 15, 17, 18, 23, 26, 32, 33, 45, 50, 66, 67, 68, 70, 72, 77], "comparison": [0, 18, 29], "match": [0, 18, 33, 58, 66, 70, 77], "indic": [0, 2, 3, 18, 19, 24, 31, 47, 58, 66, 70, 77], "intact": [0, 18], "dict": [0, 1, 2, 3, 7, 18, 21, 22, 23, 24, 31, 33, 38, 52, 56, 67, 72, 78], "jsonrespons": [0, 18], "400": [0, 18], "statu": [0, 7, 18, 24, 33], "code": [0, 18, 24, 38], "ani": [0, 1, 2, 3, 4, 8, 15, 17, 18, 22, 23, 24, 25, 28, 31, 33, 47, 54, 66], "fail": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 26, 32], "issu": [0, 18, 52], "respons": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 40, 47, 52, 54, 62, 64, 66, 72, 78], "detail": [0, 1, 18, 24, 40, 45, 47, 52, 54, 62, 64, 68, 72], "error": [0, 3, 15, 17, 18, 20, 23, 25, 28, 31, 33, 38, 39, 49, 50, 58, 67, 70, 72, 77, 78], "mismatch": [0, 18], "assum": [0, 18], "depend": [0, 18, 47], "rout": [0, 18], "app": [0, 18], "post": [0, 18], "some_endpoint": [0, 18], "body_dict": [0, 18], "avail": [0, 18, 45, 47, 57, 80], "onli": [0, 18, 24, 38, 52, 66, 67, 72], "execut": [0, 15, 17, 18, 26, 33], "success": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24], "check_config": [0, 18, 20, 43, 45, 53, 58], "check": [0, 3, 18, 19, 20, 24, 31, 32, 33, 36, 38, 45, 47, 49, 52, 53, 66, 80], "hold": [0, 18, 38, 45, 50], "rang": [0, 18, 32, 66, 67, 70, 72, 77, 78], "1024": [0, 18], "65535": [0, 1, 18, 31, 37], "__str__": [0, 1, 2, 3, 18, 19, 21, 23, 24, 29, 38, 62, 64, 72, 78], "human": [0, 18, 24, 52], "readabl": [0, 4, 18, 19, 24], "represent": [0, 3, 13, 18, 19, 21, 24, 32, 37, 38, 58, 70, 77], "__repr__": [0, 1, 2, 3, 18, 19, 21, 23, 24, 29, 38, 62, 64, 72, 78], "machin": [0, 18], "unambigu": [0, 18], "made": [0, 18], "ident": [0, 18], "case": [0, 3, 18, 52], "__del__": [0, 3, 18], "magic": [0, 18], "about": [0, 3, 18, 22, 52, 66], "destroi": [0, 3, 18], "shut": [0, 18], "down": [0, 18], "properli": [0, 18, 40], "grpc": [0, 18], "mark": [0, 18], "pass": [0, 2, 5, 11, 14, 15, 18, 19, 22, 23, 32, 37, 38, 58, 70, 72, 77], "connect": [0, 3, 4, 18, 23, 33, 50], "subnet": [0, 1, 10, 15, 17, 18, 23, 31, 33, 37, 50, 82], "uid": [0, 1, 7, 8, 9, 11, 13, 14, 15, 17, 18, 21, 23, 37, 50, 56, 57, 58, 80], "authent": [0, 18], "digit": [0, 18], "wa": [0, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 47, 66], "sent": [0, 18, 22, 47], "expect": [0, 3, 18, 22, 52, 66], "receiver_hotkei": [0, 18], "doesn": [0, 18, 66], "t": [0, 2, 18, 19, 21, 31, 66], "nonc": [0, 10, 18, 24, 28, 31, 33], "larger": [0, 18, 57, 66], "than": [0, 18, 37, 57, 66, 80], "previou": [0, 18, 58, 80], "after": [0, 3, 18, 22, 26, 33, 37, 58, 70, 77], "given": [0, 7, 11, 14, 18, 21, 23, 24, 25, 26, 29, 31, 33, 36, 45, 52, 66, 67, 70, 71, 72, 77, 78], "updat": [0, 3, 10, 18, 19, 21, 28, 33, 34, 47, 49, 50, 52, 58, 67, 70, 72, 77, 78, 80], "process": [0, 3, 10, 18, 21, 22, 25, 31, 33, 40, 47, 49, 52, 66, 80], "asymmetr": [0, 18], "encrypt": [0, 18, 19, 38], "algorithm": [0, 18, 67, 70, 72, 77, 78], "where": [0, 3, 18, 19, 29, 33, 45, 58, 66, 70, 77], "sign": [0, 3, 18, 23], "privat": [0, 18], "public": [0, 16, 18, 23, 38], "axonmiddlewar": 0, "starlett": [0, 18, 22, 52], "middlewar": 0, "basehttpmiddlewar": 0, "entir": [0, 3, 18, 66], "fill": [0, 3, 18, 40, 47], "necessari": [0, 45], "inform": [0, 3, 10, 18, 21, 22, 28, 33, 50, 52, 66], "log": [0, 3, 7, 10, 18, 28, 33, 39, 45, 47, 49, 50, 71, 72], "run": [0, 7, 10, 18, 23, 26, 31, 33, 38, 39, 43, 45, 46, 47, 51, 58, 70, 72, 77, 80], "dispatch": 0, "call_next": 0, "requestresponseendpoint": 0, "preprocess": [0, 3, 18, 67, 72], "perform": [0, 18, 22, 29, 47, 49, 50, 52], "gener": [0, 3, 18, 22, 38, 39, 40, 52, 58, 70, 77], "state": [0, 3, 18, 21, 49, 52, 58, 66, 80], "A": [0, 2, 3, 18, 21, 22, 24, 26, 29, 33, 34, 40, 45, 47, 52, 66, 67, 72], "determin": [0, 3, 18, 23, 47, 50, 66], "urgenc": 0, "param": [0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 29, 31, 32, 33, 37, 38, 57, 58, 70, 72, 77, 80], "time": [0, 7, 18, 21, 26, 33, 34, 66], "starlet": 0, "postprocess": 0, "start_tim": [0, 7, 26], "custom_rpc_type_registri": [1, 18], "properti": [1, 3, 18, 19, 21, 23, 24, 26, 29, 38, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "is_serv": [1, 18], "version": [1, 11, 14, 18, 19, 21, 24, 27, 32, 58], "ip_typ": [1, 18, 27, 32], "hotkei": [1, 4, 5, 11, 14, 15, 17, 18, 21, 23, 24, 28, 33, 38, 47, 58, 80], "coldkei": [1, 15, 17, 18, 21, 23, 38], "protocol": [1, 13, 18, 23, 39, 44, 48, 51], "4": [1, 7, 9, 13, 18, 32, 49, 50, 68, 72], "placeholder1": [1, 13, 18, 23], "placeholder2": [1, 13, 18, 23], "ip_str": [1, 18, 32], "whole": [1, 18], "string": [1, 2, 3, 7, 18, 19, 21, 23, 24, 25, 29, 31, 32, 38, 52, 66, 67, 72], "__eq__": [1, 18, 29], "repr": [1, 2, 18, 19, 23, 29, 62, 64, 72, 78], "from_neuron_info": [1, 18], "neuron_info": [1, 18], "convert": [1, 18, 24, 29, 31, 37, 52, 56], "axon_info": [1, 18], "to_parameter_dict": [1, 18], "torch": [1, 3, 7, 11, 14, 18, 21, 23, 25, 31, 37, 54, 57, 58, 61, 62, 63, 64, 65, 67, 70, 72, 73, 77, 78, 80], "tensor": [1, 7, 18, 21, 24, 31, 37, 39, 54, 58, 70, 77], "nn": [1, 3, 7, 18, 21, 58, 80], "parameterdict": [1, 18], "from_parameter_dict": [1, 18], "parameter_dict": [1, 18], "chaindatatyp": [1, 18], "arg": [1, 2, 3, 7, 18, 26, 32, 33, 40, 54, 58, 62, 64, 66, 67, 68, 70, 72, 77, 78], "kwd": [1, 18, 54, 62, 64, 68, 72], "enum": [1, 18, 54, 62, 64, 68, 72], "collect": [1, 2, 18, 54, 55, 62, 64, 68, 72], "pair": [1, 18, 23, 54, 62, 64, 68, 72], "exampl": [1, 3, 23, 47, 52, 54, 62, 64, 66, 68, 72, 83], "enumer": [1, 18, 54, 62, 64, 68, 72], "color": [1, 18, 54, 62, 64, 68, 72], "red": [1, 18, 54, 62, 64, 66, 68, 72], "blue": [1, 18, 54, 62, 64, 68, 72], "green": [1, 18, 54, 62, 64, 66, 68, 72], "3": [1, 7, 10, 18, 23, 32, 33, 49, 50, 54, 62, 64, 67, 68, 72, 83], "them": [1, 3, 18, 22, 38, 52, 54, 62, 64, 68, 72], "lookup": [1, 18, 54, 62, 64, 68, 72], "can": [1, 3, 18, 22, 23, 26, 33, 38, 40, 45, 47, 52, 54, 62, 64, 66, 68, 72], "iter": [1, 3, 18, 23, 54, 55, 62, 64, 68, 72], "over": [1, 3, 18, 54, 62, 64, 68, 72, 80], "know": [1, 18, 54, 62, 64, 68, 72], "how": [1, 7, 18, 47, 49, 52, 54, 62, 64, 66, 68, 72], "mani": [1, 7, 18, 54, 62, 64, 66, 68, 72], "member": [1, 18, 54, 62, 64, 68, 72], "thei": [1, 18, 19, 40, 47, 52, 54, 62, 64, 67, 68, 70, 72, 77, 78], "len": [1, 18, 54, 62, 64, 68, 72], "own": [1, 18, 24, 47, 54, 62, 64, 66, 68, 72], "see": [1, 18, 24, 54, 62, 64, 68, 72], "document": [1, 18, 39, 54, 62, 64, 68, 72], "neuroninfo": [1, 18, 23], "subnetinfo": [1, 18, 23], "delegateinfo": [1, 18, 23], "neuroninfolit": [1, 18, 23], "delegatedinfo": [1, 18], "5": [1, 2, 18, 49, 67, 72], "stakeinfo": [1, 18, 23], "6": [1, 18, 32, 49, 66, 67, 68, 72], "ipinfo": [1, 18, 23], "7": [1, 18, 66], "subnethyperparamet": [1, 18, 23], "8": [1, 18, 31, 33, 52, 66], "raopertao": [1, 18, 31], "1000000000": [1, 18, 31], "u16_max": [1, 18, 31, 37], "u64_max": [1, 18, 31], "18446744073709551615": [1, 18, 31], "from_scale_encod": [1, 18], "type_nam": [1, 18], "is_vec": [1, 18], "is_opt": [1, 18], "union": [1, 3, 5, 7, 10, 11, 14, 15, 16, 17, 18, 23, 25, 29, 31, 33, 36, 38, 44, 72, 78], "byte": [1, 18, 19, 23, 28, 31, 33, 36, 38], "scalecodec": [1, 18], "scalebyt": [1, 18], "from_scale_encoding_using_type_str": [1, 18], "type_str": [1, 18], "dataclass": [1, 18], "metadata": [1, 18, 21, 23, 52], "activ": [1, 18, 21, 49], "stake": [1, 4, 5, 6, 16, 17, 18, 21, 23, 38, 39, 47, 80], "balanc": [1, 5, 15, 16, 17, 18, 23, 31, 38, 39], "stake_dict": [1, 18], "total_stak": [1, 18, 21, 23], "emiss": [1, 18, 21], "incent": [1, 18, 21, 23], "consensu": [1, 18, 21], "validator_trust": [1, 18, 21], "dividend": [1, 18, 21], "last_upd": [1, 7, 18, 21], "validator_permit": [1, 18, 21], "weight": [1, 7, 11, 14, 18, 21, 23, 33, 37, 38, 39, 49, 50, 51, 59, 68, 72], "bond": [1, 18, 21, 23, 37], "prometheus_info": [1, 18], "prometheusinfo": [1, 18], "pruning_scor": [1, 18], "is_nul": [1, 18], "fix_decoded_valu": [1, 18], "neuron_info_decod": [1, 18], "fix": [1, 18], "from_vec_u8": [1, 18], "vec_u8": [1, 18], "list_from_vec_u8": [1, 18], "static": [1, 2, 18, 23, 25, 29, 33, 56, 66, 69, 72, 78], "_null_neuron": [1, 18, 23], "from_weights_bonds_and_neuron_lit": [1, 18], "neuron_lit": [1, 18], "weights_as_dict": [1, 18], "bonds_as_dict": [1, 18], "tupl": [1, 18, 23, 28, 33, 38, 44, 67, 72], "_neuron_dict_to_namespac": [1, 18], "neuron_dict": [1, 18], "without": [1, 3, 18, 19, 47, 66], "prometheu": [1, 6, 7, 18, 23, 27, 39], "block": [1, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 28, 31, 33, 47, 49, 56], "prometheus_info_decod": [1, 18], "deleg": [1, 4, 6, 15, 18, 22, 23, 39], "hotkey_ss58": [1, 15, 17, 18, 23], "nomin": [1, 4, 18, 23], "owner_ss58": [1, 18], "registr": [1, 4, 6, 18, 23, 31, 39, 49], "return_per_1000": [1, 18], "total_daily_return": [1, 18], "decod": [1, 18, 23, 52], "delegated_list_from_vec_u8": [1, 18], "amount": [1, 5, 15, 16, 17, 18, 23, 29, 34, 66], "coldkey_ss58": [1, 18, 23], "list_of_tuple_from_vec_u8": [1, 18], "rho": [1, 18, 23], "kappa": [1, 18, 23], "difficulti": [1, 18, 23, 28, 33], "immunity_period": [1, 18, 23], "max_allowed_valid": [1, 18, 23], "min_allowed_weight": [1, 7, 18, 23], "max_weight_limit": [1, 7, 18, 23], "scaling_law_pow": [1, 18, 23], "subnetwork_n": [1, 18, 23], "max_n": [1, 18, 23], "blocks_since_epoch": [1, 18, 23], "tempo": [1, 18, 23], "modal": [1, 18], "connection_requir": [1, 18], "emission_valu": [1, 18], "burn": [1, 18, 23], "hyperparamet": [1, 8, 18], "min_difficulti": [1, 18], "max_difficulti": [1, 18], "weights_vers": [1, 18], "weights_rate_limit": [1, 18], "adjustment_interv": [1, 18], "activity_cutoff": [1, 18], "registration_allow": [1, 18], "target_regs_per_interv": [1, 18], "min_burn": [1, 18], "max_burn": [1, 18], "bonds_moving_avg": [1, 18], "max_regs_per_block": [1, 18], "encod": [1, 18, 23, 24, 31, 47, 52, 58, 70, 72, 77], "proposalvotedata": [1, 18, 23], "typeddict": [1, 18, 23, 27], "new": [1, 3, 8, 18, 21, 23, 24, 31, 33, 38, 40, 49, 80], "empti": [1, 18, 19, 23, 31], "map": [1, 18, 23, 31, 32], "via": [1, 18, 23, 47], "d": [1, 2, 3, 18, 21, 23], "k": [1, 18, 23, 31, 57], "v": [1, 18, 23], "kwarg": [1, 2, 3, 18, 22, 23, 26, 40], "keyword": [1, 18, 23], "For": [1, 3, 18, 23, 24, 49, 52], "two": [1, 2, 18, 23, 29, 33], "index": [1, 18, 23, 31, 67, 72, 79], "threshold": [1, 18], "ay": [1, 18], "nai": [1, 18], "end": [1, 7, 18, 54], "proposalcalldata": [1, 18, 23], "implement": [2, 3, 18, 22, 24, 26, 38, 40, 47, 52], "invalidconfigfil": [2, 18], "In": [2, 3, 7, 18, 24, 32, 52], "place": [2, 18, 31, 33], "yamlerror": [2, 18], "strict": [2, 18], "munch": [2, 18], "defaultmunch": [2, 18], "__is_set": [2, 18], "translat": [2, 18], "nest": [2, 18], "strictli": [2, 18], "undefin": [2, 18], "__split_params__": [2, 18], "_config": [2, 18], "namespac": [2, 18, 53], "__parse_args__": [2, 18], "__deepcopy__": [2, 18], "memo": [2, 18], "invert": [2, 18], "b": [2, 18, 19, 21], "foo": [2, 18], "lol": [2, 18], "hello": [2, 18, 52], "42": [2, 18, 23, 47, 52], "poni": [2, 18], "pretti": [2, 18], "eval": [2, 18], "with_spac": [2, 18], "9": [2, 18, 29, 58, 70, 77], "c": [2, 18, 21], "simpl": [2, 18, 47], "so": [2, 18, 37, 66], "long": [2, 18], "each": [2, 3, 7, 15, 17, 18, 21, 23, 33, 38, 40, 49, 52, 54, 58, 72, 78], "copi": [2, 18], "shallow": [2, 18], "to_str": [2, 18], "item": [2, 18, 24, 26, 55], "get": [2, 3, 10, 18, 20, 21, 24, 26, 31, 33, 34, 38, 67, 72], "update_with_kwarg": [2, 18], "_merg": [2, 18], "merg": [2, 3, 18], "recurs": [2, 18, 24], "conflict": [2, 18], "second": [2, 3, 18, 34, 60, 66], "preced": [2, 18, 66], "current": [2, 3, 7, 18, 19, 21, 23, 24, 33, 50, 52], "anoth": [2, 18], "merge_al": [2, 18], "last": [2, 18, 21, 34], "is_set": [2, 18], "param_nam": [2, 18], "whether": [2, 18, 21, 38, 47, 66], "still": [2, 18, 33], "defaultconfig": [2, 18], "abstract": [2, 3, 18, 22, 33, 40, 47, 54, 58, 62, 64, 72, 78, 79], "inherit": [3, 18, 24, 52, 61, 62, 64, 65, 79], "pytorch": [3, 18, 58], "client": [3, 18, 22], "brain": [3, 18], "analogi": [3, 18], "signal": [3, 18], "axon": [3, 13, 18, 21, 23, 24, 27, 39, 45, 47, 49, 52], "here": [3, 18, 40, 52], "send": [3, 18, 22, 23], "those": [3, 18, 66], "reciev": [3, 16, 18, 47], "keypair": [3, 18, 19, 38], "make": [3, 16, 18, 24, 33, 40, 49, 66], "http": [3, 18, 24, 67, 72], "local": [3, 18, 23, 32], "system": [3, 18, 19, 40, 52, 66], "synapse_histori": [3, 18], "histor": [3, 18, 70], "act": [3, 18, 47], "fallback": [3, 18], "queri": [3, 4, 7, 18, 23, 50], "synchron": [3, 18, 21], "target": [3, 18, 72, 73], "streamingsynaps": [3, 18, 22, 52], "timeout": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 31, 52, 57], "12": [3, 18, 38], "deseri": [3, 18, 19, 22, 24, 25, 47, 52], "run_async": [3, 18], "stream": [3, 18, 39, 52], "collat": [3, 18], "asyncgener": [3, 18], "bittenst": [3, 18], "target_axon": [3, 18], "call_stream": [3, 18], "yield": [3, 18], "chunk": [3, 18, 22, 52], "befor": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 28, 31, 33, 47, 58, 80], "final": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 33, 52], "element": [3, 18, 25, 58, 70, 77], "preprocess_synapse_for_request": [3, 18], "target_axon_info": [3, 18], "build": [3, 18], "process_server_respons": [3, 18], "server_respons": [3, 18], "json_respons": [3, 18], "local_synaps": [3, 18], "close_sess": [3, 18], "close": [3, 18], "aiohttp": [3, 18], "session": [3, 18], "aclose_sess": [3, 18], "work": [3, 18, 26, 31, 33, 52], "recommend": [3, 18], "context": [3, 18, 19, 24, 40, 47, 52, 66], "aysnc": [3, 18], "ping": [3, 18], "howev": [3, 18, 52], "you": [3, 4, 18, 52, 66], "abl": [3, 18], "safe": [3, 18, 26, 38], "clientsess": [3, 18], "alreadi": [3, 18, 31, 33], "instanti": [3, 18, 22], "manner": [3, 18], "resourc": [3, 18, 26, 47], "ti": [3, 18], "releas": [3, 18, 83], "longer": [3, 18], "need": [3, 18, 19, 21, 52], "typic": [3, 18, 22, 24, 45, 47, 52], "cleanup": [3, 18], "phase": [3, 18], "usag": 3, "dendrite_inst": [3, 18], "similar": [3, 18], "within": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 33, 52, 66], "relat": [3, 4, 18, 40, 52, 66], "await": [3, 18, 22], "_get_endpoint_url": [3, 18], "request_nam": [3, 18], "_handle_request_error": [3, 18], "_log_outgoing_request": [3, 18], "_log_incoming_respons": [3, 18], "automat": [3, 18], "upon": [3, 18, 47], "complet": [3, 18, 26, 40, 47, 52, 54, 56, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "durat": [3, 18], "singl": [3, 18, 33, 52, 66], "bridg": [3, 18], "sequenti": [3, 18], "off": [3, 18, 31], "unifi": [3, 18], "format": [3, 7, 18, 20, 22, 23, 29, 31, 32, 36, 39, 52, 54, 66], "back": [3, 18, 20, 22, 47], "data": [3, 7, 18, 19, 21, 22, 23, 24, 25, 33, 47, 52], "individu": [3, 18, 52], "dendrt": [3, 18], "maximum": [3, 7, 10, 18], "wait": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26, 49], "otherwis": [3, 18, 23, 24, 26, 31, 33, 36, 67, 72, 80], "its": [3, 18, 24, 40, 47, 49, 50, 52, 58, 66, 70, 77], "through": [3, 18, 38, 58, 66, 70, 72, 77], "larg": [3, 18, 72, 74], "piec": [3, 18], "transmit": [3, 18], "arbitrari": [3, 18], "exhaust": [3, 18, 55], "json": [3, 18, 22, 38, 52], "attribut": [3, 21, 52, 54, 62, 64, 68, 72], "silent": [3, 18], "ignor": [3, 18, 19, 47], "user_wallet_address": [3, 18], "__aenter__": [3, 18], "entri": [3, 18], "enabl": [3, 18, 50], "statement": [3, 18, 47, 66], "enter": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 38, 47], "some_async_method": [3, 18], "__aexit__": [3, 18], "exc_typ": [3, 18, 47], "exc_valu": [3, 18, 47], "traceback": [3, 18, 47], "exit": [3, 10, 18, 47], "proper": [3, 18, 40], "baseexcept": [3, 4, 18], "tracebacktyp": [3, 18], "stack": [3, 18, 47], "point": [3, 18, 54], "destructor": [3, 18], "invok": [3, 18, 47, 52], "fulli": [3, 18, 66], "remain": [3, 18, 24, 49], "unpredict": [3, 18], "explicitli": [3, 18, 66], "some": [3, 18, 66], "del": [3, 18], "implicitli": [3, 18], "chainerror": [4, 18], "chainconnectionerror": [4, 18], "chaintransactionerror": [4, 18], "transact": [4, 5, 18], "chainqueryerror": [4, 18], "stakeerror": [4, 15, 17, 18, 23], "unstakeerror": [4, 18], "unstak": [4, 5, 6, 18, 23, 38, 39], "nominationerror": [4, 18], "transfererror": [4, 18], "transfer": [4, 6, 18, 23, 38, 39], "registrationerror": [4, 18], "notregisterederror": [4, 5, 15, 17, 18], "notdelegateerror": [4, 5, 15, 18], "try": [4, 18, 33, 66], "keyfileerror": [4, 18, 19, 38], "thrown": [4, 18], "keyfil": [4, 18, 38, 39], "corrupt": [4, 18, 19, 38], "writabl": [4, 18, 19], "password": [4, 18, 19, 38], "decrypt": [4, 18, 19, 38], "invalid": [4, 18, 25], "logger": [5, 7, 11, 14, 20, 23], "nominate_extrins": 5, "wait_for_fin": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "wait_for_inclus": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "becom": [5, 18, 23], "delegate_extrins": 5, "delegate_ss58": [5, 18, 23], "prompt": [5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 39, 40, 82], "ss58": [5, 15, 17, 18, 23, 31, 36, 38], "interpret": [5, 15, 16, 17], "tao": [5, 10, 15, 16, 17, 18, 23, 29, 38, 80], "confirm": [5, 8, 10, 11, 12, 13, 14, 15, 16, 17], "proceed": [5, 8, 10, 11, 12, 13, 14, 15, 16, 17], "flag": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 50], "unclud": [5, 9, 10, 11, 13, 14, 15, 16, 17], "we": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 32, 33], "did": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "inclus": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "undelegate_extrins": 5, "un": 5, "log_util": [6, 18, 39], "root": [6, 18, 21, 23, 31, 37, 39], "senat": [6, 18, 39], "set_weight": [6, 18, 23, 39, 46, 51, 56, 81], "validatorlogg": 7, "valid": [7, 11, 14, 18, 19, 21, 22, 23, 31, 32, 33, 36, 39, 41, 45, 51, 52], "consol": [7, 18, 31, 33], "style": [7, 71, 72], "tabl": 7, "print_response_t": 7, "batch_predict": 7, "stat": [7, 18, 31, 33, 39], "sort_col": 7, "task_repeat": 7, "tasks_per_serv": 7, "top": 7, "predict": 7, "probabl": [7, 71, 72], "batch": [7, 67, 70, 72], "task": [7, 39, 49, 51, 52, 54, 57, 59, 61, 62, 63, 64, 65, 66], "per": [7, 10, 18, 28, 31, 33, 34], "prob": 7, "phrase": 7, "length": 7, "size": [7, 18, 24, 58, 70, 77], "statist": [7, 33, 67, 70, 72, 77, 78], "column": 7, "neuron_stats_column": 7, "number": [7, 9, 10, 13, 18, 21, 23, 28, 31, 33, 34, 37, 38, 50, 54, 57, 58, 67, 72], "under": [7, 18, 19, 38], "show": [7, 66], "print_synergy_t": 7, "syn_loss_diff": 7, "synergi": 7, "loss": [7, 58], "diff": [7, 33], "matrix": 7, "pairwis": 7, "reduct": 7, "due": [7, 66], "origin": [7, 40], "diagon": 7, "direct": [7, 71, 72], "print_stats_t": 7, "titl": 7, "caption": 7, "mark_uid": 7, "gather": 7, "construct": [7, 18, 19, 24, 67, 72], "shown": [7, 66], "print_synapse_t": 7, "evalu": [7, 54, 66], "shaplei": 7, "calcul": [7, 18, 24, 33, 58, 67, 70, 71, 72, 77], "print_weights_t": 7, "neuron_stat": 7, "metagraph_n": 7, "sample_uid": 7, "sample_weight": 7, "include_uid": 7, "num_row": 7, "minimum": [7, 58, 70, 77], "allow": [7, 18, 19, 22, 52], "total": [7, 18, 21, 24, 33, 50], "metagraph": [7, 18, 23, 37, 38, 39, 43, 47, 49, 57, 58, 80], "inculd": 7, "print_console_validator_identifi": 7, "identifi": [7, 18, 24, 50, 66], "print_console_metagraph_statu": 7, "current_block": 7, "start_block": 7, "print_console_query_summari": 7, "blocks_per_epoch": 7, "epoch_step": 7, "epoch": [7, 49], "responsive_uid": 7, "queried_uid": 7, "step_tim": 7, "epoch_responsive_uid": 7, "epoch_queried_uid": 7, "summari": [7, 66], "print_console_subtensor_weight": 7, "epoch_start_tim": 7, "validatorprometheu": 7, "promethei": 7, "log_run_info": 7, "up": [7, 18, 26, 45, 49, 68, 72], "log_epoch_start": 7, "batch_siz": 7, "sequence_length": 7, "validation_len": 7, "epochs_until_reset": 7, "log_step": 7, "step": [7, 50, 67, 72], "log_epoch_end": 7, "register_subnetwork_extrins": 8, "subnetwork": 8, "set_hyperparameter_extrins": 8, "prometheus_extrins": 9, "subscrib": [9, 13, 18, 38], "substensor": [9, 13], "host": [9, 13], "e": [9, 13, 18, 21, 23, 38, 40, 47], "122": [9, 13], "31": [9, 13], "9221": [9, 13], "register_extrins": 10, "max_allowed_attempt": [10, 18, 23], "output_in_plac": [10, 18, 23, 31, 33], "cuda": [10, 18, 23, 28, 31, 33], "dev_id": [10, 18, 23, 28, 31, 33], "tpb": [10, 18, 23, 28, 31, 33], "256": [10, 18, 23, 24, 31, 33], "num_process": [10, 18, 23, 31, 33], "update_interv": [10, 18, 23, 28, 31, 33], "log_verbos": [10, 18, 23, 31, 33], "attempt": [10, 18, 24, 32, 66], "devic": [10, 18, 19, 28, 31, 33, 38, 69, 70, 71, 72, 73, 74, 75, 76, 77], "id": [10, 18, 24, 28, 31, 33], "solv": [10, 18, 28, 31, 33], "more": [10, 18, 24, 31, 33, 47, 66], "burned_register_extrins": 10, "recycl": [10, 18, 23], "maxsuccessexcept": 10, "common": [10, 15, 17, 18, 23, 67, 72], "class": [10, 45], "maxattemptsexcept": 10, "run_faucet_extrins": 10, "continu": [10, 49, 52], "pow": [10, 18, 23, 28, 29, 33], "faucet": 10, "test": [10, 18, 19, 23], "net": 10, "root_register_extrins": 11, "set_root_weights_extrins": 11, "version_kei": [11, 14, 18, 23], "account": [11, 14, 15, 16, 18, 23, 31], "subent": [11, 14], "must": [11, 14, 18, 22, 32, 38, 40, 47, 54], "floattensor": [11, 14, 18, 21, 23, 37, 54, 58, 61, 62, 63, 64, 65, 67, 70, 72, 73, 77, 78], "longtensor": [11, 14, 18, 23, 31, 37, 57], "register_senate_extrins": 12, "vote": [12, 18, 23], "leave_senate_extrins": 12, "remov": [12, 17, 18, 23, 67, 72], "vote_senate_extrins": 12, "proposal_hash": [12, 18, 23], "proposal_idx": [12, 18, 23], "serve_extrins": 13, "placehold": 13, "futur": [13, 18, 26], "serve_axon_extrins": 13, "being": [13, 18, 22, 33, 66], "set_weights_extrins": 14, "uint64": 14, "destin": [14, 16, 18, 23, 31, 36, 37], "add_stake_extrins": 15, "add_stake_multiple_extrins": 15, "__do_add_stake_singl": 15, "transfer_extrins": 16, "dest": [16, 18, 23], "keep_al": 16, "fund": [16, 18, 23, 38], "ss58_address": [16, 18, 23, 31, 36, 38], "ed25519": [16, 18, 31, 36], "keep": [16, 18, 33, 38], "aliv": 16, "abov": [16, 67, 72], "existenti": [16, 18, 23], "deposit": [16, 18, 23], "__do_remove_stake_singl": 17, "unstake_extrins": 17, "unstake_multiple_extrins": 17, "extrins": [18, 23, 39], "_register_cuda": [18, 31, 39], "test_util": [18, 31, 39], "wallet_util": [18, 31, 39], "weight_util": [18, 31, 39], "chain_data": [18, 23, 39], "dendrit": [18, 24, 39, 52], "threadpool": [18, 39], "__version__": [18, 51, 59], "version_split": [18, 51, 59], "__version_as_int__": [18, 23], "__new_signature_version__": 18, "360": 18, "__console__": 18, "__use_console__": 18, "turn_console_off": 18, "turn_console_on": 18, "trace": [18, 20, 47], "debug": [18, 20, 52], "__blocktime__": 18, "__pipaddress__": 18, "pypi": 18, "org": 18, "__delegates_details_url__": 18, "raw": [18, 24, 25], "githubusercont": 18, "com": [18, 26], "opentensor": 18, "main": [18, 23, 33, 43, 49, 66], "__ss58_format__": 18, "__ss58_address_length__": 18, "48": 18, "__networks__": 18, "finnei": [18, 21, 23], "__finney_entrypoint__": 18, "wss": [18, 32], "entrypoint": 18, "ai": 18, "443": 18, "__finney_test_entrypoint__": 18, "__bellagene_entrypoint__": 18, "parachain": 18, "__local_entrypoint__": 18, "w": [18, 21, 32, 67, 72], "127": 18, "9944": 18, "__tao_symbol__": 18, "__rao_symbol__": 18, "__network_explorer_map__": 18, "__type_registry__": 18, "modul": [18, 82], "nacl_salt": [18, 19], "x13q": [18, 19], "x83": [18, 19], "xdf": [18, 19], "xf1z": [18, 19], "xbc": [18, 19], "x9c": [18, 19], "x90": [18, 19], "xb5q": [18, 19], "x879": [18, 19], "xe9": [18, 19], "xb1": [18, 19], "serialized_keypair_to_keyfile_data": [18, 19], "serial": [18, 19, 24, 25], "deserialize_keypair_from_keyfile_data": [18, 19], "keyfile_data": [18, 19], "load": [18, 19, 21, 38, 80], "cannot": [18, 19, 32], "validate_password": [18, 19], "polici": [18, 19], "meet": [18, 19], "ask_password_to_encrypt": [18, 19], "rtype": [18, 19, 23, 32, 38], "keyfile_data_is_encrypted_nacl": [18, 19], "nacl": [18, 19], "ansibl": [18, 19], "is_nacl": [18, 19], "keyfile_data_is_encrypted_ans": [18, 19], "is_ans": [18, 19], "keyfile_data_is_encrypted_legaci": [18, 19], "legaci": [18, 19], "is_legaci": [18, 19], "keyfile_data_is_encrypt": [18, 19], "is_encrypt": [18, 19], "keyfile_data_encryption_method": [18, 19], "encryption_method": [18, 19], "legacy_encrypt_keyfile_data": [18, 19], "encrypt_keyfile_data": [18, 19], "vault": [18, 19], "ask": [18, 19, 66], "encrypted_data": [18, 19], "get_coldkey_password_from_environ": [18, 19], "coldkey_nam": [18, 19], "retriev": [18, 19, 22, 24, 33, 45], "cold": [18, 19], "found": [18, 19, 28, 33, 47], "decrypt_keyfile_data": [18, 19], "decrypted_data": [18, 19], "file": [18, 19, 38, 67, 72], "incorrect": [18, 19, 38, 66], "path": [18, 19, 21, 38, 69, 72], "interfac": [18, 19, 22, 49, 58], "substrat": [18, 19, 23, 33], "store": [18, 19, 29, 33, 52], "exist": [18, 19, 23, 31, 33, 38, 45], "set_keypair": [18, 19], "overwrit": [18, 19, 38], "write": [18, 19], "forc": [18, 19, 33, 67, 72], "get_keypair": [18, 19], "make_dir": [18, 19], "directori": [18, 19, 21, 45], "do": [18, 19, 33], "exists_on_devic": [18, 19], "on_devic": [18, 19], "is_read": [18, 19], "is_writ": [18, 19], "_may_overwrit": [18, 19], "okai": [18, 19], "may_overwrit": [18, 19], "check_and_update_encrypt": [18, 19], "print_result": [18, 19], "no_prompt": [18, 19], "result": [18, 19, 23, 24, 29, 52, 58, 70, 77], "skip": [18, 19], "most": [18, 19, 67, 72], "els": [18, 19, 31], "_read_keyfile_data_from_fil": [18, 19], "read": [18, 19, 24, 45, 52], "_write_keyfile_data_to_fil": [18, 19], "permiss": [18, 19], "respond": [18, 19, 47, 66], "No": [18, 19], "mockkeyfil": [18, 19], "mock": [18, 19, 66], "simul": [18, 19], "actual": [18, 19, 22, 40, 47, 52], "filesystem": [18, 19, 80], "treat": [18, 19], "noth": [18, 19], "sinc": [18, 19, 34], "although": [18, 19], "alwai": [18, 19, 66], "written": [18, 19, 66], "valueerror": [18, 19, 31, 33, 47], "anyth": [18, 19, 31], "is_valid_bittensor_address_or_public_kei": [18, 31, 36], "display_mnemonic_msg": [18, 38], "key_typ": [18, 38], "displai": [18, 38], "mnemon": [18, 38], "warn": [18, 20, 38], "mainten": [18, 38], "primari": [18, 38, 49], "wai": [18, 29, 38, 61, 62, 64, 65, 79], "token": [18, 22, 23, 38, 40, 52, 58, 70, 71, 72, 77], "your": [18, 32, 38, 52, 54, 66], "node": [18, 33, 38, 49, 50], "hand": [18, 38], "link": [18, 38], "hotkey_fil": [18, 38], "coldkey_fil": [18, 38], "coldkeypub_fil": [18, 38], "coldkeypub": [18, 38], "cryptokeyerror": [18, 38], "incorrec": [18, 38], "colkei": [18, 38], "txt": [18, 38], "colkeypub": [18, 38], "regen_coldkeypub": [18, 38], "regen_coldkei": [18, 38], "regen_hotkei": [18, 38], "create_if_non_exist": [18, 38], "coldkey_use_password": [18, 38], "hotkey_use_password": [18, 38], "recreat": [18, 38], "set_hotkei": [18, 38], "set_coldkeypub": [18, 38], "set_coldkei": [18, 38], "get_coldkei": [18, 38], "get_hotkei": [18, 38], "get_coldkeypub": [18, 38], "create_coldkey_from_uri": [18, 38], "uri": [18, 38], "use_password": [18, 38], "suppress": [18, 38], "suri": [18, 38], "alic": [18, 38], "bob": [18, 38], "protect": [18, 38], "Will": [18, 38], "newli": [18, 38], "create_hotkey_from_uri": [18, 38], "new_coldkei": [18, 38], "n_word": [18, 38, 54], "save": [18, 21, 38, 80], "disk": [18, 38], "word": [18, 38, 54], "create_new_coldkei": [18, 38], "new_hotkei": [18, 38], "create_new_hotkei": [18, 38], "regenerate_coldkeypub": [18, 38], "public_kei": [18, 31, 36, 38], "regener": [18, 38], "either": [18, 32, 33, 38], "hex": [18, 23, 38], "re": [18, 38, 67, 70, 72, 77, 78], "regenerate_coldkei": [18, 38], "seed": [18, 38, 66], "space": [18, 38, 66], "separ": [18, 38, 47], "restor": [18, 38], "backup": [18, 38], "json_data": [18, 38], "passphras": [18, 38], "order": [18, 33, 38, 54], "regenerate_hotkei": [18, 38], "create_pow": [18, 31, 33], "proof": [18, 31, 33], "progress": [18, 31, 33, 52], "32": [18, 31, 33], "equal": [18, 31, 33], "cpu": [18, 31, 33], "verbos": [18, 31, 33], "solut": [18, 28, 31, 33], "ss58_to_vec_u8": [18, 31], "unbiased_topk": [18, 31], "dim": [18, 31], "largest": [18, 31], "select": [18, 31], "topk": [18, 31], "bia": [18, 31], "lower": [18, 31, 47], "version_check": [18, 31], "15": [18, 31], "strtobool_with_default": [18, 31], "strtobool": [18, 31], "liter": [18, 31], "supress": [18, 31], "val": [18, 23, 31], "truth": [18, 31], "y": [18, 31, 37], "ye": [18, 31], "n": [18, 21, 30, 31, 37, 58, 67, 72], "f": [18, 31, 66], "get_explorer_root_url_by_network_from_map": [18, 31], "network_map": [18, 31], "explor": [18, 31, 66], "url": [18, 31, 32], "Or": [18, 31], "get_explorer_url_for_network": [18, 31], "block_hash": [18, 23, 31, 33], "known": [18, 31, 66], "ss58_address_to_byt": [18, 31], "u16_normalized_float": [18, 31], "x": [18, 31, 37], "u64_normalized_float": [18, 31], "u8_key_to_ss58": [18, 31], "u8_kei": [18, 31], "u8": [18, 31], "utf": [18, 31, 52], "get_ss58_format": [18, 31, 36], "is_valid_ss58_address": [18, 31, 36], "is_valid_ed25519_pubkei": [18, 31, 36], "rao": [18, 29], "unit": [18, 29, 54, 66], "well": [18, 29, 66], "arithmet": [18, 29], "symbol": [18, 29], "rao_unit": [18, 29], "integ": [18, 24, 29, 32, 33, 37], "give": [18, 29, 52, 66], "__int__": [18, 29], "__float__": [18, 29], "symbolvalu": [18, 29], "__rich__": [18, 29], "__str_rao__": [18, 29], "__rich_rao__": [18, 29], "__ne__": [18, 29], "__gt__": [18, 29], "__lt__": [18, 29], "__le__": [18, 29], "__ge__": [18, 29], "__add__": [18, 29], "__radd__": [18, 29], "__sub__": [18, 29], "__rsub__": [18, 29], "__mul__": [18, 29], "__rmul__": [18, 29], "__truediv__": [18, 29], "__rtruediv__": [18, 29], "__floordiv__": [18, 29], "__rfloordiv__": [18, 29], "__nonzero__": [18, 29], "__neg__": [18, 29], "__pos__": [18, 29], "__abs__": [18, 29], "from_float": [18, 29], "10": [18, 29, 33, 35, 66, 67, 72], "from_tao": [18, 29], "from_rao": [18, 29], "_mock": [18, 23], "factori": [18, 23], "By": [18, 23, 24, 67, 72], "get_proposal_vote_data": [18, 23], "determine_chain_endpoint_and_network": [18, 23], "chain_endpoint": [18, 23], "choic": [18, 23], "overrid": [18, 23, 24, 40, 52], "setup_config": [18, 23], "undeleg": [18, 23], "_do_set_weight": [18, 23], "run_faucet": [18, 23], "burned_regist": [18, 23], "_do_pow_regist": [18, 23], "pow_result": [18, 23], "powsolut": [18, 23, 33], "_do_burned_regist": [18, 23], "get_transfer_fe": [18, 23], "_do_transf": [18, 23], "transfer_bal": [18, 23], "On": [18, 23], "wait_for_": [18, 23], "get_existential_deposit": [18, 23], "register_subnetwork": [18, 23], "set_hyperparamet": [18, 23], "serve_axon": [18, 23], "_do_serve_axon": [18, 23], "call_param": [18, 23], "axonservecallparam": [18, 23, 27], "serve_prometheu": [18, 23], "_do_serve_prometheu": [18, 23], "prometheusservecallparam": [18, 23, 27], "_do_associate_ip": [18, 23], "ip_info_list": [18, 23], "add_stak": [18, 23], "add_stake_multipl": [18, 23], "_do_stak": [18, 23], "unstake_multipl": [18, 23], "_do_unstak": [18, 23], "register_sen": [18, 23], "leave_sen": [18, 23], "vote_sen": [18, 23], "is_senate_memb": [18, 23], "get_vote_data": [18, 23], "get_senate_memb": [18, 23], "get_proposal_call_data": [18, 23], "get_proposal_hash": [18, 23], "get_propos": [18, 23], "root_regist": [18, 23], "_do_root_regist": [18, 23], "root_set_weight": [18, 23], "query_subtensor": [18, 23], "query_map_subtensor": [18, 23], "substrateinterfac": [18, 23], "querymapresult": [18, 23], "query_const": [18, 23], "module_nam": [18, 23], "constant_nam": [18, 23], "query_modul": [18, 23], "query_map": [18, 23], "state_cal": [18, 23], "query_runtime_api": [18, 23], "runtime_api": [18, 23], "scale": [18, 23, 66, 67, 70, 72, 77, 78], "paramwithtyp": [18, 23], "_encode_param": [18, 23], "call_definit": [18, 23], "validator_batch_s": [18, 23], "validator_prune_len": [18, 23], "validator_logits_diverg": [18, 23], "validator_sequence_length": [18, 23], "validator_epochs_per_reset": [18, 23], "validator_epoch_length": [18, 23], "validator_exclude_quantil": [18, 23], "synergy_scaling_law_pow": [18, 23], "get_total_stake_for_hotkei": [18, 23], "get_total_stake_for_coldkei": [18, 23], "get_stake_for_coldkey_and_hotkei": [18, 23], "get_stak": [18, 23], "does_hotkey_exist": [18, 23], "get_hotkey_own": [18, 23], "get_axon_info": [18, 23], "get_prometheus_info": [18, 23], "total_issu": [18, 23], "serving_rate_limit": [18, 23], "tx_rate_limit": [18, 23], "subnet_exist": [18, 23], "get_all_subnet_netuid": [18, 23], "get_total_subnet": [18, 23], "get_subnet_mod": [18, 23], "get_subnet_connection_requir": [18, 23], "netuid_0": [18, 23], "netuid_1": [18, 23], "get_emission_value_by_subnet": [18, 23], "get_subnet": [18, 23], "get_all_subnets_info": [18, 23], "get_subnet_info": [18, 23], "get_subnet_hyperparamet": [18, 23], "get_subnet_own": [18, 23], "is_hotkey_deleg": [18, 23], "get_delegate_tak": [18, 23], "get_nominators_for_hotkei": [18, 23], "get_delegate_by_hotkei": [18, 23], "get_deleg": [18, 23], "get_stake_info_for_coldkei": [18, 23], "coldkey_ss58_list": [18, 23], "is_hotkey_registered_ani": [18, 23], "is_hotkey_registered_on_subnet": [18, 23], "is_hotkey_regist": [18, 23], "get_uid_for_hotkey_on_subnet": [18, 23], "get_all_uids_for_hotkei": [18, 23], "get_netuids_for_hotkei": [18, 23], "get_neuron_for_pubkey_and_subnet": [18, 23], "get_all_neurons_for_pubkei": [18, 23], "neuron_has_validator_permit": [18, 23], "neuron_for_wallet": [18, 23], "neuron_for_uid": [18, 23], "particular": [18, 23], "pull": [18, 23], "sync": [18, 21, 23], "neuron_for_uid_lit": [18, 23], "lite": [18, 21, 23], "neurons_lit": [18, 23], "latest": [18, 21, 23, 49, 58, 80], "i_map": [18, 23], "associated_validator_ip_info": [18, 23], "g": [18, 23, 40], "validator_ip_info": [18, 23], "get_subnet_burn_cost": [18, 23], "_do_deleg": [18, 23], "_do_undeleg": [18, 23], "_do_nomin": [18, 23], "get_bal": [18, 23], "get_current_block": [18, 23], "blocknumb": [18, 23], "block_numb": [18, 23, 33], "get_block_hash": [18, 23], "block_id": [18, 23], "standard": [18, 20, 61, 62, 64, 65, 67, 70, 72, 77, 78, 79], "__has_been_inited__": [18, 20], "__debug_on__": [18, 20], "__trace_on__": [18, 20], "__std_sink__": [18, 20], "__file_sink__": [18, 20], "fro": [18, 20], "set_debug": [18, 20], "debug_on": [18, 20], "cl": [18, 20, 45, 53], "set_trac": [18, 20], "trace_on": [18, 20], "get_level": [18, 20], "log_filt": [18, 20], "record": [18, 20], "log_save_filt": [18, 20], "log_formatt": [18, 20], "accord": [18, 20, 22], "extra": [18, 20, 66], "log_save_formatt": [18, 20], "_format": [18, 20], "sufix": [18, 20], "neural": [18, 21], "graph": [18, 21, 47], "permit": [18, 21, 80], "r": [18, 21], "tv": [18, 21], "_initialize_subtensor": [18, 21], "_assign_neuron": [18, 21], "assign": [18, 21, 24, 49, 50, 52], "decid": [18, 21], "_set_metagraph_attribut": [18, 21], "_create_tensor": [18, 21], "dtype": [18, 21, 25], "datatyp": [18, 21], "_set_weights_and_bond": [18, 21], "comput": [18, 21, 24], "_process_weights_or_bond": [18, 21], "_process_root_weight": [18, 21], "load_from_path": [18, 21], "dir_path": [18, 21], "prioritythreadpoolexecutor": [18, 26], "maxsiz": [18, 26, 60], "thread_name_prefix": [18, 26], "initarg": [18, 26], "_base": [18, 26], "executor": [18, 26], "queue": [18, 26, 33, 67, 72], "is_empti": [18, 26], "_counter": [18, 26], "submit": [18, 26, 33], "fn": [18, 26], "schedul": [18, 26], "_adjust_thread_count": [18, 26], "_initializer_fail": [18, 26], "shutdown": [18, 26, 49], "clean": [18, 26], "sever": [18, 26], "until": [18, 26, 49], "finish": [18, 26, 33], "reclaim": [18, 26], "cancel_futur": [18, 26], "cancel": [18, 26], "pend": [18, 26], "get_siz": [18, 24], "obj": [18, 24, 58, 80], "seen": [18, 24], "find": [18, 24, 66], "travers": [18, 24], "everi": [18, 24], "sum": [18, 24, 37, 58, 70, 77], "cast_int": [18, 24], "simpli": [18, 24, 52], "cast_float": [18, 24], "terminalinfo": [18, 24], "pydant": [18, 22, 24, 25, 52], "basemodel": [18, 22, 24, 25], "mixin": [18, 24], "__pretty__": [18, 24], "884": [18, 24], "devtool": [18, 24], "helpmanu": [18, 24], "io": [18, 24], "validate_assign": [18, 22, 24, 25, 52], "status_cod": [18, 24], "_extract_status_cod": [18, 24], "status_messag": [18, 24], "process_tim": [18, 24], "_extract_process_tim": [18, 24], "_extract_port": [18, 24], "_extract_vers": [18, 24], "_extract_nonc": [18, 24], "uuid": [18, 24], "is_success": [18, 24], "200": [18, 24], "is_failur": [18, 24], "failur": [18, 24], "would": [18, 24], "is_timeout": [18, 24], "408": [18, 24], "is_blacklist": [18, 24], "403": [18, 24], "forbidden": [18, 24], "failed_verif": [18, 24], "401": [18, 24], "unauthor": [18, 24], "body_hash": [18, 24], "sha3": [18, 24], "compris": [18, 24], "required_fields_hash": [18, 24], "concaten": [18, 24, 52], "hexadecim": [18, 24], "_extract_timeout": [18, 24], "total_s": [18, 24, 52], "_extract_total_s": [18, 24], "header_s": [18, 24, 52], "_extract_header_s": [18, 24], "computed_body_hash": [18, 24], "required_hash_field": [18, 24, 52], "intend": [18, 22, 24, 52], "overridden": [18, 24, 33, 47, 52], "subclass": [18, 22, 24, 47, 52], "superclass": [18, 24], "itself": [18, 22, 24, 52, 66], "desir": [18, 24, 52], "set_name_typ": [18, 24], "__setattr__": [18, 24], "get_total_s": [18, 24], "to_head": [18, 24], "directli": [18, 22, 24, 47, 52, 66], "taken": [18, 24], "further": [18, 24, 52], "parse_headers_to_input": [18, 24], "input_obj": [18, 24], "extract": [18, 22, 24, 52, 66, 67, 72], "transform": [18, 24, 58, 70, 72, 77], "appropri": [18, 22, 24, 52], "from_head": [18, 24], "btstreamingresponsemodel": [18, 22], "model": [18, 22, 40, 52, 58, 67, 70, 71, 72, 74, 77, 78, 80], "streamer": [18, 22], "btstreamingrespons": [18, 22], "conform": [18, 22], "clear": [18, 22], "token_stream": [18, 22], "asgi": [18, 22], "abc": [18, 22, 47, 54, 55, 58, 61, 62, 64, 65, 79], "streamingrespons": [18, 22, 52], "special": [18, 22, 52, 66], "modifi": [18, 22, 33], "develop": [18, 22, 40, 52], "instead": [18, 22, 47], "create_streaming_respons": [18, 22], "stream_respons": [18, 22], "event": [18, 22, 33, 34, 39, 51, 59], "__call__": [18, 22], "scope": [18, 22], "process_streaming_respons": [18, 22, 52], "accumul": [18, 22, 52], "extract_response_json": [18, 22, 52], "structur": [18, 22, 47, 52], "readi": [18, 22], "torch_dtyp": [18, 25], "cast_dtyp": [18, 25], "cast": [18, 25], "cast_shap": [18, 25], "shape": [18, 25, 58], "buffer": [18, 25], "_extract_dtyp": [18, 25], "_extract_shap": [18, 25], "tolist": [18, 25], "numpi": [18, 25, 28], "ndarrai": [18, 25], "encount": [18, 25], "_remove_loguru_ansi_direct": 20, "get_save_dir": 21, "latest_block_path": 21, "threadpoolexecutor": 26, "__author__": 26, "brian": 26, "quinlan": 26, "sweetapp": 26, "_threads_queu": 26, "_shutdown": 26, "_workitem": 26, "null_entri": 26, "_worker": 26, "executor_refer": 26, "work_queu": 26, "brokenthreadpool": 26, "brokenexecutor": 26, "solve_cuda": 28, "nonce_start": [28, 33], "block_and_hotkey_hash_byt": [28, 33], "limit": [28, 33, 37, 80], "problem": [28, 33], "int64": 28, "keccak": [28, 33], "64": [28, 33], "int256": 28, "upper": 28, "seal": [28, 33], "reset_cuda": 28, "reset": [28, 67, 72], "log_cuda_error": 28, "get_human_read": 30, "num": 30, "suffix": 30, "h": 30, "millifi": 30, "int_to_ip": 32, "int_val": 32, "uniqu": [32, 50], "4028237e": 32, "38": 32, "int128": 32, "Of": 32, "ipv4": 32, "ipv6": 32, "str_val": 32, "tyep": 32, "netaddr": 32, "addrformaterror": 32, "ip_to_int": 32, "ip_vers": 32, "ip__str__": 32, "externalipnotfound": 32, "attain": 32, "curl": 32, "urllib": 32, "ipifi": 32, "aw": 32, "get_external_ip": 32, "get_formatted_ws_endpoint_url": 32, "endpoint_url": 32, "websocket": 32, "lack": 32, "thereof": 32, "left": 32, "unchang": 32, "formatted_endpoint_url": 32, "cudaexcept": 33, "occur": [33, 49, 52], "_hex_bytes_to_u8_list": 33, "hex_byt": 33, "_create_seal_hash": 33, "_seal_meets_difficulti": 33, "is_stal": 33, "stale": 33, "_solverbas": 33, "proc_num": 33, "num_proc": 33, "finished_queu": 33, "solution_queu": 33, "stopev": 33, "curr_block": 33, "curr_block_num": 33, "curr_diff": 33, "check_block": 33, "multiprocess": 33, "put": 33, "averag": [33, 34, 71, 72, 80], "across": [33, 67, 70, 72, 77, 78], "newblockev": 33, "solver": 33, "arrai": 33, "lock": 33, "prevent": 33, "while": [33, 40, 50, 52, 66], "hotkey_byt": 33, "sub": 33, "create_shared_memori": 33, "share": 33, "memori": 33, "_solver": 33, "_cudasolv": 33, "_solve_for_nonce_block_cuda": 33, "tri": [33, 66], "_solve_for_nonce_block": 33, "nonce_end": 33, "_registration_diff_unpack": 33, "packed_diff": 33, "unpack": 33, "pack": 33, "bit": 33, "littl": 33, "endian": 33, "_registration_diff_pack": 33, "_hash_block_with_hotkei": 33, "block_byt": 33, "_update_curr_block": 33, "get_cpu_count": 33, "registrationstatist": 33, "time_spent_tot": 33, "rounds_tot": 33, "time_averag": 33, "time_sp": 33, "hash_rate_perpetu": 33, "hash_rat": 33, "registrationstatisticslogg": 33, "rich": 33, "get_status_messag": 33, "_solve_for_difficulty_fast": 33, "n_sampl": 33, "alpha_": 33, "sampl": [33, 57], "ewma": 33, "alpha": [33, 34], "metric": 33, "rate": [33, 58], "exponenti": [33, 34], "move": [33, 34, 67, 70, 72, 77, 78, 80], "measur": 33, "robust": 33, "interv": 33, "smaller": [33, 67, 72], "increas": 33, "transpar": 33, "speed": [33, 66], "_get_block_with_retri": 33, "_usingspawnstartmethod": 33, "__enter__": [33, 47], "__exit__": [33, 47], "_check_for_newest_block_and_upd": 33, "old_block_numb": 33, "update_curr_block": 33, "curr_stat": 33, "old": [33, 67, 72], "pubkei": 33, "mp": 33, "_solve_for_difficulty_fast_cuda": 33, "50000": 33, "512": 33, "fast": 33, "grab": 33, "gpu": 33, "capabl": 33, "_terminate_workers_and_wait_for_exit": 33, "timed_rolling_avg": 34, "initial_valu": 34, "new_valu": 34, "amountpersecondrollingaverag": 34, "count": [34, 67, 72], "quantiti": 34, "eventspersecondrollingaverag": 34, "max_tri": 35, "get_random_unused_port": 35, "allocated_port": 35, "convers": [37, 40, 52], "u32_max": 37, "4294967295": 37, "normalize_max_weight": 37, "normal": [37, 58, 67, 70, 72, 77, 78], "greater": 37, "max_valu": 37, "convert_weight_uids_and_vals_to_tensor": 37, "invers": 37, "convert_weights_and_uids_for_emit": 37, "row": 37, "row_weight": 37, "convert_root_weight_uids_and_vals_to_tensor": 37, "convert_bond_uids_and_vals_to_tensor": 37, "row_bond": 37, "u32": 37, "max_int_weight": 37, "weight_val": 37, "weight_uid": 37, "process_weights_for_netuid": 37, "exclude_quantil": 37, "page": 39, "auto": 39, "bittensor": [39, 40, 43, 47, 49, 50, 52, 53, 58, 62, 64, 72, 78, 80], "miner": [39, 45, 46, 49, 50, 51, 82], "basemin": [39, 40, 51], "penalti": [39, 51, 54, 59], "content_match": [39, 51, 59, 62], "keyword_match": [39, 51, 59, 62, 68, 72], "task_valid": [39, 51, 59, 62, 68, 72], "reward": [39, 51, 56, 58, 59], "dahoa": [39, 51, 59, 68, 72], "divers": [39, 51, 59, 68, 72], "dpo": [39, 51, 59, 68, 72], "nsfw": [39, 51, 59, 68, 72], "open_assist": [39, 51, 59, 72], "reciproc": [39, 51, 59, 68, 72], "relev": [39, 51, 52, 59, 66, 68, 72], "criteria": [39, 51, 59, 79], "dataset": [39, 51, 59], "gate": [39, 51, 59, 80], "misc": [39, 51, 59], "sphinx": 39, "autoapi": 39, "openaimin": 40, "api_kei": 40, "openai": 40, "introduc": [40, 47], "pertain": [40, 52, 66], "gpt": [40, 58, 69, 72, 76], "temperatur": 40, "extend": [40, 52], "easili": 40, "consid": 40, "adjust": 40, "featur": 40, "optim": [40, 58, 71, 72], "role": [40, 47, 52], "describ": 40, "combin": 40, "essenti": [40, 47, 66], "maintain": [40, 66], "addition": [40, 45, 52, 66], "max_token": 40, "tailor": [40, 52], "openai_api_kei": 40, "is_prompt_in_cach": 44, "default_blacklist": 44, "func": [44, 48], "correctli": [45, 66], "refer": [45, 66, 67, 71, 72, 82], "bt": [45, 47, 50, 58, 80], "variou": [45, 47, 66], "get_config": 45, "popul": 45, "dictat": 47, "prefer": [47, 71, 72], "might": [47, 52, 66], "_prompt": 47, "wrapper": 47, "around": 47, "intermediari": 47, "layer": [47, 58, 80], "pre": [47, 58], "cach": 47, "avoid": [47, 66], "reprocess": 47, "recent": 47, "repli": 47, "meant": 47, "subsequ": 47, "custommin": 47, "life": [47, 52], "contruct": 47, "wast": 47, "below": 47, "entiti": [47, 52], "mai": [47, 66], "onc": 47, "higher": 47, "later": 47, "listen": 47, "period": [47, 67, 72], "knowledg": [47, 49], "run_in_background_thread": 47, "background": 47, "stop_run_thread": 47, "facilit": 47, "caus": [47, 66], "record_request_timestamp": 48, "default_prior": 48, "loop": 49, "follow": [49, 50, 54, 83], "regularli": 49, "much": [49, 66], "grace": 49, "keyboard": 49, "interrupt": 49, "unforeseen": 49, "date": 49, "leverag": 49, "global": 49, "outgo": 49, "keyboardinterrupt": 49, "manual": 49, "diagnosi": [49, 50], "wandb_on": 50, "peer": 50, "vector": 50, "bias": 50, "wandb": [50, 80], "monitor": 50, "blockchain": 50, "cryptograph": 50, "__spec_version__": [51, 59], "three": 52, "mutabl": 52, "inner": 52, "correct": [52, 66], "mandatori": 52, "immut": 52, "captur": [52, 66], "enforc": 52, "hi": [52, 66], "model_prompt": 52, "llm": 52, "assist": 52, "what": [52, 66], "demonstr": 52, "streamprompt": 52, "sequenc": 52, "certain": [52, 66], "As": 52, "primarili": 52, "focus": 52, "seamlessli": 52, "could": [52, 66], "agent": 52, "consist": 52, "throughout": 52, "lifetim": 52, "These": 52, "product": 52, "gain": 52, "insight": [52, 66], "purpos": 52, "extens": 52, "thu": 52, "heart": 52, "consum": 52, "split": 52, "newlin": 52, "charact": [52, 54, 66], "coher": 52, "crucial": 52, "pertin": 52, "especi": 52, "beyond": 52, "just": [52, 66], "easier": 52, "consumpt": 52, "understand": 52, "ultim": 52, "view": 52, "glean": 52, "basic": 52, "taskcriterion": [54, 79], "criterion": 54, "compose_text": 54, "textlengthunitenum": 54, "sentenc": [54, 58, 70, 72, 77], "paragraph": 54, "matchlengthcriteria": 54, "target_length": 54, "100": [54, 67, 72], "_count_sent": 54, "_get_completion_length": 54, "contentmatchtypeenum": 54, "starts_with": 54, "ends_with": 54, "matchcontentcriteria": 54, "default_text": 54, "match_typ": 54, "words_arrai": 54, "contentmatchtyp": 54, "sampled_word": 54, "negate_match": 54, "__post_init__": 54, "_get_regex_pattern": 54, "simpleresponselayoutcriteria": 54, "bullet": 54, "layoutmatchtypeenum": 54, "unordered_list": 54, "unord": 54, "numbered_list": 54, "matchlayoutcriteria": 54, "layout_typ": 54, "__next__": 55, "next": 55, "stopiter": 55, "mockdataset": 55, "eventschema": 56, "completion_tim": 56, "completion_status_messag": 56, "completion_status_cod": 56, "task_typ": [56, 79], "gating_loss": 56, "step_length": 56, "best": [56, 66], "dahoas_reward_model": [56, 68, 72], "blacklist_filt": [56, 68, 72], "blacklist_filter_matched_ngram": 56, "blacklist_filter_significance_scor": 56, "nsfw_filter": [56, 68, 72], "reciprocate_reward_model": [56, 68, 72], "diversity_reward_model": [56, 68, 72], "diversity_reward_model_histor": 56, "diversity_reward_model_batch": 56, "dpo_reward_model": [56, 68, 72], "rlhf_reward_model": [56, 68, 72], "prompt_reward_model": [56, 68, 72], "relevance_filt": [56, 68, 72], "dahoas_reward_model_norm": 56, "nsfw_filter_norm": 56, "nsfw_filter_scor": 56, "reciprocate_reward_model_norm": 56, "diversity_reward_model_norm": 56, "dpo_reward_model_norm": 56, "rlhf_reward_model_norm": 56, "prompt_reward_model_norm": 56, "relevance_filter_norm": 56, "relevance_filter_bert_scor": 56, "relevance_filter_mpnet_scor": 56, "task_validation_penalty_raw": 56, "task_validation_penalty_adjust": 56, "task_validation_penalty_appli": 56, "keyword_match_penalty_raw": 56, "keyword_match_penalty_adjust": 56, "keyword_match_penalty_appli": 56, "sentence_match_penalty_raw": 56, "sentence_match_penalty_adjust": 56, "sentence_match_penalty_appli": 56, "from_dict": 56, "event_dict": 56, "disable_log_reward": 56, "get_random_uid": 57, "exclud": 57, "random": 57, "randomli": 57, "run_step": 57, "basegatingmodel": 58, "model_nam": [58, 69, 72], "train": [58, 80], "languag": 58, "eleutherai": [58, 69, 72], "neo": 58, "125m": 58, "num_uid": 58, "4096": 58, "learning_r": 58, "learn": 58, "01": [58, 67, 72], "momentum": 58, "score": [58, 66, 67, 72, 73, 80], "resync": [58, 80], "previous_metagraph": [58, 80], "gatingmodel": 58, "squar": 58, "network_s": 58, "sentenceembedgatingmodel": 58, "mean_pool": [58, 70, 77], "model_output": [58, 70, 77], "attention_mask": [58, 69, 70, 72, 77], "embed": [58, 70, 72, 77], "attent": [58, 66, 70, 77], "mask": [58, 70, 77], "input_mask_expand": [58, 70, 77], "expand": [58, 70, 77], "obtain": [58, 70, 77], "wise": [58, 70, 77], "divid": [58, 70, 77], "clamp": [58, 70, 77], "1e": [58, 70, 77], "ttl_cach": 60, "128": 60, "ttl": 60, "_ttl_hash_gen": 60, "ttl_get_block": 60, "contentmatchpenaltymodel": [61, 62], "max_penalti": [61, 62, 64, 65], "basepenaltymodel": [61, 62, 63, 64, 65], "helper": [61, 62, 64, 65, 79], "calculate_penalti": [61, 62, 63, 64, 65], "apply_penalti": [62, 64], "penaltymodeltyp": [62, 64], "task_validation_penalti": [62, 64], "keyword_match_penalti": [62, 64, 68, 72], "sentence_match_penalti": [62, 64], "taskvalidationpenaltymodel": [62, 65], "keywordmatchpenaltymodel": [62, 63], "check_exploits_keyword": [62, 63], "baseprompt": 66, "sanit": 66, "templat": 66, "search": 66, "pattern": 66, "regex": 66, "matches_templ": 66, "input_text": 66, "unformat": 66, "scoringprompt": 66, "extract_scor": 66, "mock_respons": 66, "followup": 66, "mockdendritepool": 66, "augmentprompt": 66, "followupprompt": 66, "question": 66, "answerprompt": 66, "answer": 66, "firewallprompt": 66, "detect": 66, "jailbreak": 66, "inject": 66, "influenc": 66, "firewal": 66, "find_unique_tag": 66, "substr": 66, "followup_request_templ": 66, "augment_scoring_templ": 66, "multilin": 66, "succinct": 66, "qualiti": 66, "tag": 66, "irrelev": 66, "perfectli": 66, "good": 66, "brief": 66, "explan": 66, "sole": 66, "relationship": 66, "pleas": 66, "manipul": 66, "disregard": 66, "reliabl": 66, "few": 66, "shot": 66, "comprehens": 66, "thought": 66, "coffe": 66, "brew": 66, "drink": 66, "prepar": 66, "roast": 66, "bean": 66, "berri": 66, "coffea": 66, "speci": 66, "tea": 66, "beverag": 66, "steep": 66, "leav": 66, "boil": 66, "water": 66, "gordon": 66, "ramsai": 66, "british": 66, "chef": 66, "restaurateur": 66, "writer": 66, "televis": 66, "person": 66, "he": 66, "blunt": 66, "fieri": 66, "temper": 66, "expertis": 66, "french": 66, "italian": 66, "cuisin": 66, "regard": 66, "skill": 66, "culinari": 66, "tradit": 66, "highli": 66, "accur": 66, "mention": 66, "mar": 66, "fourth": 66, "planet": 66, "sun": 66, "smallest": 66, "solar": 66, "mercuri": 66, "often": 66, "becaus": 66, "reddish": 66, "appear": 66, "colour": 66, "variat": 66, "appl": 66, "chlorophyl": 66, "great": 66, "gatsbi": 66, "1925": 66, "novel": 66, "american": 66, "author": 66, "scott": 66, "fitzgerald": 66, "theme": 66, "wealth": 66, "love": 66, "dream": 66, "examin": 66, "concept": 66, "narr": 66, "outlin": 66, "followup_scoring_templ": 66, "deserv": 66, "low": 66, "moreov": 66, "focu": 66, "why": 66, "portrai": 66, "answer_scoring_templ": 66, "wrap": 66, "extran": 66, "high": 66, "assess": 66, "intermedi": 66, "partial": 66, "incomplet": 66, "unnecessari": 66, "ambigu": 66, "Be": 66, "who": 66, "presid": 66, "georg": 66, "washington": 66, "concis": 66, "capit": 66, "franc": 66, "rome": 66, "pari": 66, "There": 66, "50": 66, "But": 66, "don": 66, "forget": 66, "territori": 66, "too": 66, "slightli": 66, "less": [66, 80], "explain": 66, "principl": 66, "rel": 66, "einstein": 66, "theori": 66, "light": 66, "matter": 66, "overli": 66, "simplifi": 66, "constant": 66, "equival": 66, "energi": 66, "mass": 66, "effect": [66, 67, 72], "graviti": 66, "chemic": 66, "formula": 66, "discourag": 66, "firewall_templ": 66, "analyz": 66, "particularli": 66, "Such": 66, "claim": 66, "assert": 66, "swai": 66, "ve": 66, "briefli": 66, "justifi": 66, "decis": 66, "subtl": 66, "overtli": 66, "malici": 66, "harm": 66, "regardless": 66, "subtleti": 66, "overt": 66, "natur": 66, "pai": 66, "delimit": 66, "upcom": 66, "section": [66, 82], "followup_prompt": 66, "base_text": [66, 79], "answer_prompt": 66, "augment_request_templ": 66, "summar": 66, "augment_prompt": 66, "blacklistrewardev": [67, 72], "baserewardev": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "matched_ngram": 67, "significance_scor": 67, "boundari": [67, 72], "n_min": [67, 72], "n_max": [67, 72], "14": [67, 72], "word_limit": [67, 72], "2000": [67, 72], "partial_ratio_boundari": [67, 72], "95": [67, 72], "half_lif": [67, 72], "20000": [67, 72], "001": [67, 72], "memory_lim": [67, 72], "1000000": [67, 72], "frequency_multipli": [67, 72], "baserewardmodel": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "gram": [67, 72], "counter": [67, 72], "extract_ngram": [67, 72], "_add_ngram": [67, 72], "ngram": [67, 72], "prune": [67, 72], "lossi": [67, 72], "ifi": [67, 72], "uzh": [67, 72], "ch": [67, 72], "dbtg": [67, 72], "sdbs13": [67, 72], "t01": [67, 72], "pdf": [67, 72], "bucket": [67, 72], "calculate_signific": [67, 72], "signific": [67, 72], "get_signific": [67, 72], "recalcul": [67, 72], "most_common": [67, 72], "most_signific": [67, 72], "force_upd": [67, 72], "set_counter_to_half": [67, 72], "half": [67, 72], "roll": [67, 72, 80], "window": [67, 72], "get_reward": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "normalize_reward": [67, 70, 72, 73, 77, 78], "varianc": [67, 70, 72, 77, 78], "cumul": [67, 70, 72, 77, 78], "distribut": [67, 70, 72, 77, 78], "cdf": [67, 70, 72, 77, 78], "welford": [67, 70, 72, 77, 78], "onlin": [67, 70, 72, 77, 78], "erf": [67, 70, 72, 77, 78], "rewardmodeltyp": [68, 72], "rlhf": [68, 72], "relevance_bert": [68, 72], "relevance_mpnet": [68, 72], "task_validator_filt": [68, 72], "defaultrewardframeworkconfig": [68, 72], "framework": [68, 72], "dpo_model_weight": [68, 72], "rlhf_model_weight": [68, 72], "reciprocate_model_weight": [68, 72], "dahoas_model_weight": [68, 72], "prompt_model_weight": [68, 72], "dahoasrewardmodel": [69, 72], "j": [69, 72], "6b": [69, 72], "load_weight": [69, 72], "input_id": [69, 72], "past_key_valu": [69, 72], "token_type_id": [69, 72], "position_id": [69, 72], "head_mask": [69, 72], "inputs_emb": [69, 72], "mc_token_id": [69, 72], "label": [69, 72], "return_dict": [69, 72], "output_attent": [69, 72], "output_hidden_st": [69, 72], "diversityrewardev": [70, 72], "diversityrewardmodel": [70, 72], "diversity_model_path": [70, 72, 77], "mpnet": [70, 72, 77], "v2": [70, 72, 74, 77], "get_embed": [70, 72, 77], "update_historic_embed": [70, 72], "get_historic_reward": [70, 72], "get_batch_reward": [70, 72], "raw_reward": [70, 72], "directpreferencerewardmodel": [71, 72], "reward_model_nam": [71, 72, 74, 75], "cerebra": [71, 72], "btlm": [71, 72], "3b": [71, 72], "8k": [71, 72], "reward_singl": [71, 72, 74], "with_penalti": [71, 72], "guidanc": [71, 72], "eric": [71, 72], "mitchel": [71, 72], "nsfwrewardmodel": [72, 73], "nsfw_filter_model_path": [72, 73], "facebook": [72, 73], "roberta": [72, 73], "hate": [72, 73], "speech": [72, 73], "dynabench": [72, 73], "r4": [72, 73], "nsfwrewardev": [72, 73], "openassistantrewardmodel": [72, 74], "openassist": [72, 74], "deberta": [72, 74], "v3": [72, 74], "reciprocaterewardmodel": [72, 76], "reward_model_path": [72, 76], "j_rm_format": [72, 76], "oa": [72, 76], "revis": [72, 76], "501f895": [72, 76], "relevancerewardmodel": [72, 77], "relevancerewardev": [72, 77], "unsuccess": [72, 78], "zero": [72, 78], "promptrewardmodel": [72, 75], "vmware": [72, 75], "open": [72, 75], "llama": [72, 75], "7b": [72, 75], "instruct": [72, 75], "bert_scor": 77, "mpnet_scor": 77, "bertrelevancerewardmodel": 77, "relevance_model_path": 77, "bert": 77, "uncas": 77, "mpnetrelevencemodel": 77, "normalized_reward": 78, "parse_reward_ev": 78, "reward_ev": 78, "task_nam": 79, "compose_prompt": 79, "summarytask": 79, "questiongenerationtask": 79, "questionanswertask": 79, "create_summarization_task": 79, "create_qg_task": 79, "create_qa_task": 79, "should_reinit_wandb": 80, "init_wandb": 80, "reinit": 80, "reinit_wandb": 80, "reiniti": 80, "should_checkpoint": 80, "checkpoint": 80, "resync_metagraph": 80, "resync_linear_lay": 80, "linear_lay": 80, "linear": 80, "check_uid_avail": 80, "vpermit_tao_limit": 80, "save_st": 80, "load_stat": 80, "should_set_weight": 81, "subpackag": 82, "submodul": 82, "packag": 82, "content": 82, "site": 83, "gemv": 83, "sdk": 83}, "objects": {"": [[18, 0, 0, "-", "bittensor"], [40, 0, 0, "-", "miner"], [41, 0, 0, "-", "neurons"], [51, 0, 0, "-", "prompting"]], "bittensor": [[18, 1, 1, "", "AxonInfo"], [18, 1, 1, "", "BTStreamingResponseModel"], [18, 1, 1, "id11", "Balance"], [18, 5, 1, "", "ChainConnectionError"], [18, 1, 1, "", "ChainDataType"], [18, 5, 1, "", "ChainError"], [18, 5, 1, "", "ChainQueryError"], [18, 5, 1, "", "ChainTransactionError"], [18, 1, 1, "", "DefaultConfig"], [18, 1, 1, "", "DelegateInfo"], [18, 1, 1, "", "IPInfo"], [18, 5, 1, "", "InvalidConfigFile"], [18, 5, 1, "id0", "KeyFileError"], [18, 1, 1, "", "Mockkeyfile"], [18, 6, 1, "", "NACL_SALT"], [18, 1, 1, "", "NeuronInfo"], [18, 1, 1, "", "NeuronInfoLite"], [18, 5, 1, "", "NominationError"], [18, 5, 1, "", "NotDelegateError"], [18, 5, 1, "", "NotRegisteredError"], [18, 1, 1, "", "PriorityThreadPoolExecutor"], [18, 1, 1, "", "PrometheusInfo"], [18, 6, 1, "", "ProposalCallData"], [18, 1, 1, "", "ProposalVoteData"], [18, 6, 1, "id53", "RAOPERTAO"], [18, 5, 1, "", "RegistrationError"], [18, 5, 1, "", "StakeError"], [18, 1, 1, "", "StakeInfo"], [18, 1, 1, "", "StreamingSynapse"], [18, 1, 1, "", "SubnetHyperparameters"], [18, 1, 1, "", "SubnetInfo"], [18, 1, 1, "", "Synapse"], [18, 6, 1, "", "T"], [18, 6, 1, "", "TORCH_DTYPES"], [18, 1, 1, "", "Tensor"], [18, 1, 1, "", "TerminalInfo"], [18, 5, 1, "", "TransferError"], [18, 6, 1, "id9", "U16_MAX"], [18, 7, 1, "id10", "U16_NORMALIZED_FLOAT"], [18, 6, 1, "id54", "U64_MAX"], [18, 7, 1, "", "U64_NORMALIZED_FLOAT"], [18, 5, 1, "", "UnstakeError"], [18, 6, 1, "", "__bellagene_entrypoint__"], [18, 6, 1, "", "__blocktime__"], [18, 6, 1, "", "__console__"], [18, 6, 1, "", "__delegates_details_url__"], [18, 6, 1, "", "__finney_entrypoint__"], [18, 6, 1, "", "__finney_test_entrypoint__"], [18, 6, 1, "", "__local_entrypoint__"], [18, 6, 1, "", "__network_explorer_map__"], [18, 6, 1, "", "__networks__"], [18, 6, 1, "", "__new_signature_version__"], [18, 6, 1, "", "__pipaddress__"], [18, 6, 1, "", "__rao_symbol__"], [18, 6, 1, "", "__ss58_address_length__"], [18, 6, 1, "", "__ss58_format__"], [18, 6, 1, "", "__tao_symbol__"], [18, 6, 1, "", "__type_registry__"], [18, 6, 1, "", "__use_console__"], [18, 6, 1, "", "__version__"], [18, 6, 1, "", "__version_as_int__"], [18, 7, 1, "", "ask_password_to_encrypt"], [18, 1, 1, "", "axon"], [0, 0, 0, "-", "axon"], [18, 7, 1, "", "cast_dtype"], [18, 7, 1, "", "cast_float"], [18, 7, 1, "", "cast_int"], [18, 7, 1, "", "cast_shape"], [1, 0, 0, "-", "chain_data"], [18, 1, 1, "", "config"], [2, 0, 0, "-", "config"], [18, 6, 1, "", "configs"], [18, 7, 1, "", "create_pow"], [18, 6, 1, "", "custom_rpc_type_registry"], [18, 7, 1, "", "debug"], [18, 7, 1, "", "decrypt_keyfile_data"], [18, 6, 1, "", "defaults"], [18, 1, 1, "", "dendrite"], [3, 0, 0, "-", "dendrite"], [18, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [18, 7, 1, "", "display_mnemonic_msg"], [18, 7, 1, "", "encrypt_keyfile_data"], [4, 0, 0, "-", "errors"], [6, 0, 0, "-", "extrinsics"], [18, 7, 1, "", "from_scale_encoding"], [18, 7, 1, "", "from_scale_encoding_using_type_string"], [18, 7, 1, "", "get_coldkey_password_from_environment"], [18, 7, 1, "", "get_explorer_root_url_by_network_from_map"], [18, 7, 1, "", "get_explorer_url_for_network"], [18, 7, 1, "", "get_size"], [18, 7, 1, "", "get_ss58_format"], [18, 7, 1, "", "hash"], [18, 7, 1, "id1", "is_valid_bittensor_address_or_public_key"], [18, 7, 1, "", "is_valid_ed25519_pubkey"], [18, 7, 1, "", "is_valid_ss58_address"], [19, 0, 0, "-", "keyfile"], [18, 7, 1, "", "keyfile_data_encryption_method"], [18, 7, 1, "", "keyfile_data_is_encrypted"], [18, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [18, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [18, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [18, 7, 1, "", "legacy_encrypt_keyfile_data"], [20, 0, 0, "-", "logging"], [21, 0, 0, "-", "metagraph"], [18, 7, 1, "", "serialized_keypair_to_keyfile_data"], [18, 7, 1, "", "ss58_address_to_bytes"], [18, 7, 1, "", "ss58_to_vec_u8"], [22, 0, 0, "-", "stream"], [18, 7, 1, "", "strtobool"], [18, 7, 1, "", "strtobool_with_default"], [23, 0, 0, "-", "subtensor"], [24, 0, 0, "-", "synapse"], [25, 0, 0, "-", "tensor"], [26, 0, 0, "-", "threadpool"], [18, 7, 1, "", "trace"], [18, 7, 1, "", "turn_console_off"], [18, 7, 1, "", "turn_console_on"], [27, 0, 0, "-", "types"], [18, 7, 1, "", "u8_key_to_ss58"], [18, 7, 1, "", "unbiased_topk"], [31, 0, 0, "-", "utils"], [18, 7, 1, "", "validate_password"], [18, 7, 1, "", "version_checking"], [18, 6, 1, "", "version_split"], [38, 0, 0, "-", "wallet"]], "bittensor.AxonInfo": [[18, 2, 1, "", "__eq__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 3, 1, "", "coldkey"], [18, 2, 1, "", "from_neuron_info"], [18, 2, 1, "", "from_parameter_dict"], [18, 3, 1, "", "hotkey"], [18, 3, 1, "", "ip"], [18, 2, 1, "", "ip_str"], [18, 3, 1, "", "ip_type"], [18, 4, 1, "", "is_serving"], [18, 3, 1, "", "placeholder1"], [18, 3, 1, "", "placeholder2"], [18, 3, 1, "", "port"], [18, 3, 1, "", "protocol"], [18, 2, 1, "", "to_parameter_dict"], [18, 3, 1, "", "version"]], "bittensor.BTStreamingResponseModel": [[18, 3, 1, "id61", "token_streamer"]], "bittensor.Balance": [[18, 2, 1, "id49", "__abs__"], [18, 2, 1, "id34", "__add__"], [18, 2, 1, "id28", "__eq__"], [18, 2, 1, "id45", "__float__"], [18, 2, 1, "id42", "__floordiv__"], [18, 2, 1, "id33", "__ge__"], [18, 2, 1, "id30", "__gt__"], [18, 2, 1, "id44", "__int__"], [18, 2, 1, "id32", "__le__"], [18, 2, 1, "id31", "__lt__"], [18, 2, 1, "id38", "__mul__"], [18, 2, 1, "id29", "__ne__"], [18, 2, 1, "id47", "__neg__"], [18, 2, 1, "id46", "__nonzero__"], [18, 2, 1, "id48", "__pos__"], [18, 2, 1, "id35", "__radd__"], [18, 2, 1, "id27", "__repr__"], [18, 2, 1, "id43", "__rfloordiv__"], [18, 2, 1, "id24", "__rich__"], [18, 2, 1, "id26", "__rich_rao__"], [18, 2, 1, "id39", "__rmul__"], [18, 2, 1, "id37", "__rsub__"], [18, 2, 1, "id41", "__rtruediv__"], [18, 2, 1, "id23", "__str__"], [18, 2, 1, "id25", "__str_rao__"], [18, 2, 1, "id36", "__sub__"], [18, 2, 1, "id40", "__truediv__"], [18, 2, 1, "id50", "from_float"], [18, 2, 1, "id52", "from_rao"], [18, 2, 1, "id51", "from_tao"], [18, 3, 1, "id19", "rao"], [18, 3, 1, "id18", "rao_unit"], [18, 3, 1, "id20", "tao"], [18, 3, 1, "id17", "unit"]], "bittensor.ChainDataType": [[18, 3, 1, "", "DelegateInfo"], [18, 3, 1, "", "DelegatedInfo"], [18, 3, 1, "", "IPInfo"], [18, 3, 1, "", "NeuronInfo"], [18, 3, 1, "", "NeuronInfoLite"], [18, 3, 1, "", "StakeInfo"], [18, 3, 1, "", "SubnetHyperparameters"], [18, 3, 1, "", "SubnetInfo"]], "bittensor.DefaultConfig": [[18, 2, 1, "", "default"]], "bittensor.DelegateInfo": [[18, 2, 1, "", "delegated_list_from_vec_u8"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "hotkey_ss58"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "nominators"], [18, 3, 1, "", "owner_ss58"], [18, 3, 1, "", "registrations"], [18, 3, 1, "", "return_per_1000"], [18, 3, 1, "", "take"], [18, 3, 1, "", "total_daily_return"], [18, 3, 1, "", "total_stake"], [18, 3, 1, "", "validator_permits"]], "bittensor.IPInfo": [[18, 2, 1, "", "encode"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_parameter_dict"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "ip"], [18, 3, 1, "", "ip_type"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "protocol"], [18, 2, 1, "", "to_parameter_dict"]], "bittensor.Mockkeyfile": [[18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "check_and_update_encryption"], [18, 4, 1, "", "data"], [18, 2, 1, "", "decrypt"], [18, 2, 1, "", "encrypt"], [18, 2, 1, "", "exists_on_device"], [18, 2, 1, "", "get_keypair"], [18, 2, 1, "", "is_encrypted"], [18, 2, 1, "", "is_readable"], [18, 2, 1, "", "is_writable"], [18, 4, 1, "", "keypair"], [18, 2, 1, "", "make_dirs"], [18, 2, 1, "", "set_keypair"]], "bittensor.NeuronInfo": [[18, 2, 1, "", "_neuron_dict_to_namespace"], [18, 2, 1, "", "_null_neuron"], [18, 3, 1, "", "active"], [18, 3, 1, "", "axon_info"], [18, 3, 1, "", "bonds"], [18, 3, 1, "", "coldkey"], [18, 3, 1, "", "consensus"], [18, 3, 1, "", "dividends"], [18, 3, 1, "", "emission"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_vec_u8"], [18, 2, 1, "", "from_weights_bonds_and_neuron_lite"], [18, 3, 1, "", "hotkey"], [18, 3, 1, "", "incentive"], [18, 3, 1, "", "is_null"], [18, 3, 1, "", "last_update"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "netuid"], [18, 3, 1, "", "prometheus_info"], [18, 3, 1, "", "pruning_score"], [18, 3, 1, "", "rank"], [18, 3, 1, "", "stake"], [18, 3, 1, "", "stake_dict"], [18, 3, 1, "", "total_stake"], [18, 3, 1, "", "trust"], [18, 3, 1, "", "uid"], [18, 3, 1, "", "validator_permit"], [18, 3, 1, "", "validator_trust"], [18, 3, 1, "", "weights"]], "bittensor.NeuronInfoLite": [[18, 2, 1, "", "_neuron_dict_to_namespace"], [18, 2, 1, "", "_null_neuron"], [18, 3, 1, "", "active"], [18, 3, 1, "", "axon_info"], [18, 3, 1, "", "coldkey"], [18, 3, 1, "", "consensus"], [18, 3, 1, "", "dividends"], [18, 3, 1, "", "emission"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "hotkey"], [18, 3, 1, "", "incentive"], [18, 3, 1, "", "is_null"], [18, 3, 1, "", "last_update"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "netuid"], [18, 3, 1, "", "prometheus_info"], [18, 3, 1, "", "pruning_score"], [18, 3, 1, "", "rank"], [18, 3, 1, "", "stake"], [18, 3, 1, "", "stake_dict"], [18, 3, 1, "", "total_stake"], [18, 3, 1, "", "trust"], [18, 3, 1, "", "uid"], [18, 3, 1, "", "validator_permit"], [18, 3, 1, "", "validator_trust"]], "bittensor.PriorityThreadPoolExecutor": [[18, 2, 1, "", "_adjust_thread_count"], [18, 3, 1, "", "_counter"], [18, 2, 1, "", "_initializer_failed"], [18, 2, 1, "", "add_args"], [18, 2, 1, "", "config"], [18, 4, 1, "", "is_empty"], [18, 2, 1, "", "shutdown"], [18, 2, 1, "", "submit"]], "bittensor.PrometheusInfo": [[18, 3, 1, "", "block"], [18, 2, 1, "", "fix_decoded_values"], [18, 3, 1, "", "ip"], [18, 3, 1, "", "ip_type"], [18, 3, 1, "", "port"], [18, 3, 1, "", "version"]], "bittensor.ProposalVoteData": [[18, 3, 1, "", "ayes"], [18, 3, 1, "", "end"], [18, 3, 1, "", "index"], [18, 3, 1, "", "nays"], [18, 3, 1, "", "threshold"]], "bittensor.StakeInfo": [[18, 3, 1, "", "coldkey_ss58"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "hotkey_ss58"], [18, 2, 1, "", "list_from_vec_u8"], [18, 2, 1, "", "list_of_tuple_from_vec_u8"], [18, 3, 1, "", "stake"]], "bittensor.StreamingSynapse": [[18, 1, 1, "", "BTStreamingResponse"], [18, 1, 1, "", "Config"], [18, 2, 1, "", "create_streaming_response"], [18, 2, 1, "", "extract_response_json"], [18, 2, 1, "", "process_streaming_response"]], "bittensor.StreamingSynapse.BTStreamingResponse": [[18, 2, 1, "", "__call__"], [18, 2, 1, "", "stream_response"]], "bittensor.StreamingSynapse.Config": [[18, 3, 1, "", "validate_assignment"]], "bittensor.SubnetHyperparameters": [[18, 3, 1, "", "activity_cutoff"], [18, 3, 1, "", "adjustment_interval"], [18, 3, 1, "", "bonds_moving_avg"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_parameter_dict"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "immunity_period"], [18, 3, 1, "", "kappa"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "max_burn"], [18, 3, 1, "", "max_difficulty"], [18, 3, 1, "", "max_regs_per_block"], [18, 3, 1, "", "max_weight_limit"], [18, 3, 1, "", "min_allowed_weights"], [18, 3, 1, "", "min_burn"], [18, 3, 1, "", "min_difficulty"], [18, 3, 1, "", "registration_allowed"], [18, 3, 1, "", "rho"], [18, 3, 1, "", "target_regs_per_interval"], [18, 3, 1, "", "tempo"], [18, 2, 1, "", "to_parameter_dict"], [18, 3, 1, "", "weights_rate_limit"], [18, 3, 1, "", "weights_version"]], "bittensor.SubnetInfo": [[18, 3, 1, "", "blocks_since_epoch"], [18, 3, 1, "", "burn"], [18, 3, 1, "", "connection_requirements"], [18, 3, 1, "", "difficulty"], [18, 3, 1, "", "emission_value"], [18, 2, 1, "", "fix_decoded_values"], [18, 2, 1, "", "from_parameter_dict"], [18, 2, 1, "", "from_vec_u8"], [18, 3, 1, "", "immunity_period"], [18, 3, 1, "", "kappa"], [18, 2, 1, "", "list_from_vec_u8"], [18, 3, 1, "", "max_allowed_validators"], [18, 3, 1, "", "max_n"], [18, 3, 1, "", "max_weight_limit"], [18, 3, 1, "", "min_allowed_weights"], [18, 3, 1, "", "modality"], [18, 3, 1, "", "netuid"], [18, 3, 1, "", "owner_ss58"], [18, 3, 1, "", "rho"], [18, 3, 1, "", "scaling_law_power"], [18, 3, 1, "", "subnetwork_n"], [18, 3, 1, "", "tempo"], [18, 2, 1, "", "to_parameter_dict"]], "bittensor.Synapse": [[18, 1, 1, "", "Config"], [18, 2, 1, "", "__setattr__"], [18, 3, 1, "", "_extract_header_size"], [18, 3, 1, "", "_extract_timeout"], [18, 3, 1, "", "_extract_total_size"], [18, 3, 1, "", "axon"], [18, 4, 1, "", "body_hash"], [18, 3, 1, "", "computed_body_hash"], [18, 3, 1, "", "dendrite"], [18, 2, 1, "", "deserialize"], [18, 4, 1, "", "failed_verification"], [18, 2, 1, "", "from_headers"], [18, 2, 1, "", "get_total_size"], [18, 3, 1, "", "header_size"], [18, 4, 1, "", "is_blacklist"], [18, 4, 1, "", "is_failure"], [18, 4, 1, "", "is_success"], [18, 4, 1, "", "is_timeout"], [18, 3, 1, "", "name"], [18, 2, 1, "", "parse_headers_to_inputs"], [18, 3, 1, "", "required_hash_fields"], [18, 2, 1, "", "set_name_type"], [18, 3, 1, "", "timeout"], [18, 2, 1, "", "to_headers"], [18, 3, 1, "", "total_size"]], "bittensor.Synapse.Config": [[18, 3, 1, "", "validate_assignment"]], "bittensor.Tensor": [[18, 1, 1, "", "Config"], [18, 3, 1, "", "_extract_dtype"], [18, 3, 1, "", "_extract_shape"], [18, 3, 1, "id62", "buffer"], [18, 2, 1, "", "deserialize"], [18, 3, 1, "id63", "dtype"], [18, 2, 1, "", "numpy"], [18, 2, 1, "", "serialize"], [18, 3, 1, "id64", "shape"], [18, 2, 1, "", "tensor"], [18, 2, 1, "", "tolist"]], "bittensor.Tensor.Config": [[18, 3, 1, "", "validate_assignment"]], "bittensor.TerminalInfo": [[18, 1, 1, "", "Config"], [18, 3, 1, "", "_extract_nonce"], [18, 3, 1, "", "_extract_port"], [18, 3, 1, "", "_extract_process_time"], [18, 3, 1, "", "_extract_status_code"], [18, 3, 1, "", "_extract_version"], [18, 3, 1, "", "hotkey"], [18, 3, 1, "", "ip"], [18, 3, 1, "", "nonce"], [18, 3, 1, "", "port"], [18, 3, 1, "", "process_time"], [18, 3, 1, "", "signature"], [18, 3, 1, "", "status_code"], [18, 3, 1, "", "status_message"], [18, 3, 1, "", "uuid"], [18, 3, 1, "", "version"]], "bittensor.TerminalInfo.Config": [[18, 3, 1, "", "validate_assignment"]], "bittensor.axon": [[0, 1, 1, "", "AxonMiddleware"], [0, 1, 1, "", "FastAPIThreadedServer"], [18, 2, 1, "", "__del__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "add_args"], [18, 2, 1, "", "attach"], [0, 1, 1, "", "axon"], [18, 2, 1, "", "check_config"], [18, 2, 1, "", "config"], [18, 2, 1, "", "default_verify"], [18, 2, 1, "", "help"], [18, 2, 1, "", "info"], [18, 2, 1, "", "serve"], [18, 2, 1, "", "start"], [18, 2, 1, "", "stop"], [18, 2, 1, "", "verify_body_integrity"]], "bittensor.axon.AxonMiddleware": [[0, 2, 1, "", "blacklist"], [0, 2, 1, "", "dispatch"], [0, 2, 1, "", "postprocess"], [0, 2, 1, "", "preprocess"], [0, 2, 1, "", "priority"], [0, 2, 1, "", "run"], [0, 2, 1, "", "verify"]], "bittensor.axon.FastAPIThreadedServer": [[0, 2, 1, "", "_wrapper_run"], [0, 2, 1, "", "install_signal_handlers"], [0, 3, 1, "", "is_running"], [0, 2, 1, "", "run_in_thread"], [0, 3, 1, "", "should_exit"], [0, 2, 1, "", "start"], [0, 2, 1, "", "stop"]], "bittensor.axon.axon": [[0, 2, 1, "", "__del__"], [0, 2, 1, "", "__repr__"], [0, 2, 1, "", "__str__"], [0, 2, 1, "", "add_args"], [0, 2, 1, "", "attach"], [0, 2, 1, "", "check_config"], [0, 2, 1, "", "config"], [0, 2, 1, "", "default_verify"], [0, 2, 1, "", "help"], [0, 2, 1, "", "info"], [0, 2, 1, "", "serve"], [0, 2, 1, "", "start"], [0, 2, 1, "", "stop"], [0, 2, 1, "", "verify_body_integrity"]], "bittensor.chain_data": [[1, 1, 1, "", "AxonInfo"], [1, 1, 1, "", "ChainDataType"], [1, 1, 1, "", "DelegateInfo"], [1, 1, 1, "", "IPInfo"], [1, 1, 1, "", "NeuronInfo"], [1, 1, 1, "", "NeuronInfoLite"], [1, 1, 1, "", "PrometheusInfo"], [1, 6, 1, "", "ProposalCallData"], [1, 1, 1, "", "ProposalVoteData"], [1, 6, 1, "", "RAOPERTAO"], [1, 1, 1, "", "StakeInfo"], [1, 1, 1, "", "SubnetHyperparameters"], [1, 1, 1, "", "SubnetInfo"], [1, 6, 1, "", "U16_MAX"], [1, 6, 1, "", "U64_MAX"], [1, 6, 1, "", "custom_rpc_type_registry"], [1, 7, 1, "", "from_scale_encoding"], [1, 7, 1, "", "from_scale_encoding_using_type_string"]], "bittensor.chain_data.AxonInfo": [[1, 2, 1, "", "__eq__"], [1, 2, 1, "", "__repr__"], [1, 2, 1, "", "__str__"], [1, 3, 1, "", "coldkey"], [1, 2, 1, "", "from_neuron_info"], [1, 2, 1, "", "from_parameter_dict"], [1, 3, 1, "", "hotkey"], [1, 3, 1, "", "ip"], [1, 2, 1, "", "ip_str"], [1, 3, 1, "", "ip_type"], [1, 4, 1, "", "is_serving"], [1, 3, 1, "", "placeholder1"], [1, 3, 1, "", "placeholder2"], [1, 3, 1, "", "port"], [1, 3, 1, "", "protocol"], [1, 2, 1, "", "to_parameter_dict"], [1, 3, 1, "", "version"]], "bittensor.chain_data.ChainDataType": [[1, 3, 1, "", "DelegateInfo"], [1, 3, 1, "", "DelegatedInfo"], [1, 3, 1, "", "IPInfo"], [1, 3, 1, "", "NeuronInfo"], [1, 3, 1, "", "NeuronInfoLite"], [1, 3, 1, "", "StakeInfo"], [1, 3, 1, "", "SubnetHyperparameters"], [1, 3, 1, "", "SubnetInfo"]], "bittensor.chain_data.DelegateInfo": [[1, 2, 1, "", "delegated_list_from_vec_u8"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "hotkey_ss58"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "nominators"], [1, 3, 1, "", "owner_ss58"], [1, 3, 1, "", "registrations"], [1, 3, 1, "", "return_per_1000"], [1, 3, 1, "", "take"], [1, 3, 1, "", "total_daily_return"], [1, 3, 1, "", "total_stake"], [1, 3, 1, "", "validator_permits"]], "bittensor.chain_data.IPInfo": [[1, 2, 1, "", "encode"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_parameter_dict"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "ip"], [1, 3, 1, "", "ip_type"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "protocol"], [1, 2, 1, "", "to_parameter_dict"]], "bittensor.chain_data.NeuronInfo": [[1, 2, 1, "", "_neuron_dict_to_namespace"], [1, 2, 1, "", "_null_neuron"], [1, 3, 1, "", "active"], [1, 3, 1, "", "axon_info"], [1, 3, 1, "", "bonds"], [1, 3, 1, "", "coldkey"], [1, 3, 1, "", "consensus"], [1, 3, 1, "", "dividends"], [1, 3, 1, "", "emission"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_vec_u8"], [1, 2, 1, "", "from_weights_bonds_and_neuron_lite"], [1, 3, 1, "", "hotkey"], [1, 3, 1, "", "incentive"], [1, 3, 1, "", "is_null"], [1, 3, 1, "", "last_update"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "netuid"], [1, 3, 1, "", "prometheus_info"], [1, 3, 1, "", "pruning_score"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "stake"], [1, 3, 1, "", "stake_dict"], [1, 3, 1, "", "total_stake"], [1, 3, 1, "", "trust"], [1, 3, 1, "", "uid"], [1, 3, 1, "", "validator_permit"], [1, 3, 1, "", "validator_trust"], [1, 3, 1, "", "weights"]], "bittensor.chain_data.NeuronInfoLite": [[1, 2, 1, "", "_neuron_dict_to_namespace"], [1, 2, 1, "", "_null_neuron"], [1, 3, 1, "", "active"], [1, 3, 1, "", "axon_info"], [1, 3, 1, "", "coldkey"], [1, 3, 1, "", "consensus"], [1, 3, 1, "", "dividends"], [1, 3, 1, "", "emission"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "hotkey"], [1, 3, 1, "", "incentive"], [1, 3, 1, "", "is_null"], [1, 3, 1, "", "last_update"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "netuid"], [1, 3, 1, "", "prometheus_info"], [1, 3, 1, "", "pruning_score"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "stake"], [1, 3, 1, "", "stake_dict"], [1, 3, 1, "", "total_stake"], [1, 3, 1, "", "trust"], [1, 3, 1, "", "uid"], [1, 3, 1, "", "validator_permit"], [1, 3, 1, "", "validator_trust"]], "bittensor.chain_data.PrometheusInfo": [[1, 3, 1, "", "block"], [1, 2, 1, "", "fix_decoded_values"], [1, 3, 1, "", "ip"], [1, 3, 1, "", "ip_type"], [1, 3, 1, "", "port"], [1, 3, 1, "", "version"]], "bittensor.chain_data.ProposalVoteData": [[1, 3, 1, "", "ayes"], [1, 3, 1, "", "end"], [1, 3, 1, "", "index"], [1, 3, 1, "", "nays"], [1, 3, 1, "", "threshold"]], "bittensor.chain_data.StakeInfo": [[1, 3, 1, "", "coldkey_ss58"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "hotkey_ss58"], [1, 2, 1, "", "list_from_vec_u8"], [1, 2, 1, "", "list_of_tuple_from_vec_u8"], [1, 3, 1, "", "stake"]], "bittensor.chain_data.SubnetHyperparameters": [[1, 3, 1, "", "activity_cutoff"], [1, 3, 1, "", "adjustment_interval"], [1, 3, 1, "", "bonds_moving_avg"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_parameter_dict"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "immunity_period"], [1, 3, 1, "", "kappa"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "max_burn"], [1, 3, 1, "", "max_difficulty"], [1, 3, 1, "", "max_regs_per_block"], [1, 3, 1, "", "max_weight_limit"], [1, 3, 1, "", "min_allowed_weights"], [1, 3, 1, "", "min_burn"], [1, 3, 1, "", "min_difficulty"], [1, 3, 1, "", "registration_allowed"], [1, 3, 1, "", "rho"], [1, 3, 1, "", "target_regs_per_interval"], [1, 3, 1, "", "tempo"], [1, 2, 1, "", "to_parameter_dict"], [1, 3, 1, "", "weights_rate_limit"], [1, 3, 1, "", "weights_version"]], "bittensor.chain_data.SubnetInfo": [[1, 3, 1, "", "blocks_since_epoch"], [1, 3, 1, "", "burn"], [1, 3, 1, "", "connection_requirements"], [1, 3, 1, "", "difficulty"], [1, 3, 1, "", "emission_value"], [1, 2, 1, "", "fix_decoded_values"], [1, 2, 1, "", "from_parameter_dict"], [1, 2, 1, "", "from_vec_u8"], [1, 3, 1, "", "immunity_period"], [1, 3, 1, "", "kappa"], [1, 2, 1, "", "list_from_vec_u8"], [1, 3, 1, "", "max_allowed_validators"], [1, 3, 1, "", "max_n"], [1, 3, 1, "", "max_weight_limit"], [1, 3, 1, "", "min_allowed_weights"], [1, 3, 1, "", "modality"], [1, 3, 1, "", "netuid"], [1, 3, 1, "", "owner_ss58"], [1, 3, 1, "", "rho"], [1, 3, 1, "", "scaling_law_power"], [1, 3, 1, "", "subnetwork_n"], [1, 3, 1, "", "tempo"], [1, 2, 1, "", "to_parameter_dict"]], "bittensor.config": [[2, 1, 1, "", "DefaultConfig"], [2, 5, 1, "", "InvalidConfigFile"], [2, 6, 1, "", "T"], [18, 2, 1, "", "__deepcopy__"], [18, 3, 1, "", "__is_set"], [18, 2, 1, "", "__parse_args__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__split_params__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "_merge"], [2, 1, 1, "", "config"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "is_set"], [18, 2, 1, "", "merge"], [18, 2, 1, "", "merge_all"], [18, 2, 1, "", "to_string"], [18, 2, 1, "", "update_with_kwargs"]], "bittensor.config.DefaultConfig": [[2, 2, 1, "", "default"]], "bittensor.config.config": [[2, 2, 1, "", "__deepcopy__"], [2, 3, 1, "", "__is_set"], [2, 2, 1, "", "__parse_args__"], [2, 2, 1, "", "__repr__"], [2, 2, 1, "", "__split_params__"], [2, 2, 1, "", "__str__"], [2, 2, 1, "", "_merge"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "is_set"], [2, 2, 1, "", "merge"], [2, 2, 1, "", "merge_all"], [2, 2, 1, "", "to_string"], [2, 2, 1, "", "update_with_kwargs"]], "bittensor.dendrite": [[18, 2, 1, "", "__aenter__"], [18, 2, 1, "", "__aexit__"], [18, 2, 1, "", "__del__"], [18, 2, 1, "id82", "__repr__"], [18, 2, 1, "id81", "__str__"], [18, 2, 1, "", "_get_endpoint_url"], [18, 2, 1, "", "_handle_request_errors"], [18, 2, 1, "", "_log_incoming_response"], [18, 2, 1, "", "_log_outgoing_request"], [18, 2, 1, "id74", "aclose_session"], [18, 2, 1, "id77", "call"], [18, 2, 1, "id78", "call_stream"], [18, 2, 1, "id73", "close_session"], [3, 1, 1, "", "dendrite"], [18, 3, 1, "", "external_ip"], [18, 2, 1, "id76", "forward"], [18, 3, 1, "", "keypair"], [18, 2, 1, "id79", "preprocess_synapse_for_request"], [18, 2, 1, "id80", "process_server_response"], [18, 2, 1, "id75", "query"], [18, 4, 1, "", "session"], [18, 3, 1, "", "synapse_history"]], "bittensor.dendrite.dendrite": [[3, 2, 1, "", "__aenter__"], [3, 2, 1, "", "__aexit__"], [3, 2, 1, "", "__del__"], [3, 2, 1, "id9", "__repr__"], [3, 2, 1, "id8", "__str__"], [3, 2, 1, "", "_get_endpoint_url"], [3, 2, 1, "", "_handle_request_errors"], [3, 2, 1, "", "_log_incoming_response"], [3, 2, 1, "", "_log_outgoing_request"], [3, 2, 1, "id1", "aclose_session"], [3, 2, 1, "id4", "call"], [3, 2, 1, "id5", "call_stream"], [3, 2, 1, "id0", "close_session"], [3, 3, 1, "", "external_ip"], [3, 2, 1, "id3", "forward"], [3, 3, 1, "", "keypair"], [3, 2, 1, "id6", "preprocess_synapse_for_request"], [3, 2, 1, "id7", "process_server_response"], [3, 2, 1, "id2", "query"], [3, 4, 1, "", "session"], [3, 3, 1, "", "synapse_history"]], "bittensor.errors": [[4, 5, 1, "", "ChainConnectionError"], [4, 5, 1, "", "ChainError"], [4, 5, 1, "", "ChainQueryError"], [4, 5, 1, "", "ChainTransactionError"], [4, 5, 1, "", "KeyFileError"], [4, 5, 1, "", "NominationError"], [4, 5, 1, "", "NotDelegateError"], [4, 5, 1, "", "NotRegisteredError"], [4, 5, 1, "", "RegistrationError"], [4, 5, 1, "", "StakeError"], [4, 5, 1, "", "TransferError"], [4, 5, 1, "", "UnstakeError"]], "bittensor.extrinsics": [[5, 0, 0, "-", "delegation"], [7, 0, 0, "-", "log_utilities"], [8, 0, 0, "-", "network"], [9, 0, 0, "-", "prometheus"], [10, 0, 0, "-", "registration"], [11, 0, 0, "-", "root"], [12, 0, 0, "-", "senate"], [13, 0, 0, "-", "serving"], [14, 0, 0, "-", "set_weights"], [15, 0, 0, "-", "staking"], [16, 0, 0, "-", "transfer"], [17, 0, 0, "-", "unstaking"]], "bittensor.extrinsics.delegation": [[5, 7, 1, "", "delegate_extrinsic"], [5, 6, 1, "", "logger"], [5, 7, 1, "", "nominate_extrinsic"], [5, 7, 1, "", "undelegate_extrinsic"]], "bittensor.extrinsics.log_utilities": [[7, 1, 1, "", "ValidatorLogger"], [7, 1, 1, "", "ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities.ValidatorLogger": [[7, 2, 1, "", "print_console_metagraph_status"], [7, 2, 1, "", "print_console_query_summary"], [7, 2, 1, "", "print_console_subtensor_weight"], [7, 2, 1, "", "print_console_validator_identifier"], [7, 2, 1, "", "print_response_table"], [7, 2, 1, "", "print_stats_table"], [7, 2, 1, "", "print_synapse_table"], [7, 2, 1, "", "print_synergy_table"], [7, 2, 1, "", "print_weights_table"]], "bittensor.extrinsics.log_utilities.ValidatorPrometheus": [[7, 2, 1, "", "log_epoch_end"], [7, 2, 1, "", "log_epoch_start"], [7, 2, 1, "", "log_run_info"], [7, 2, 1, "", "log_step"]], "bittensor.extrinsics.network": [[8, 7, 1, "", "register_subnetwork_extrinsic"], [8, 7, 1, "", "set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[9, 7, 1, "", "prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[10, 5, 1, "", "MaxAttemptsException"], [10, 5, 1, "", "MaxSuccessException"], [10, 7, 1, "", "burned_register_extrinsic"], [10, 7, 1, "", "register_extrinsic"], [10, 7, 1, "", "run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[11, 6, 1, "", "logger"], [11, 7, 1, "", "root_register_extrinsic"], [11, 7, 1, "", "set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[12, 7, 1, "", "leave_senate_extrinsic"], [12, 7, 1, "", "register_senate_extrinsic"], [12, 7, 1, "", "vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[13, 7, 1, "", "serve_axon_extrinsic"], [13, 7, 1, "", "serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[14, 6, 1, "", "logger"], [14, 7, 1, "", "set_weights_extrinsic"]], "bittensor.extrinsics.staking": [[15, 7, 1, "", "__do_add_stake_single"], [15, 7, 1, "", "add_stake_extrinsic"], [15, 7, 1, "", "add_stake_multiple_extrinsic"]], "bittensor.extrinsics.transfer": [[16, 7, 1, "", "transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[17, 7, 1, "", "__do_remove_stake_single"], [17, 7, 1, "", "unstake_extrinsic"], [17, 7, 1, "", "unstake_multiple_extrinsic"]], "bittensor.keyfile": [[19, 1, 1, "", "Mockkeyfile"], [19, 6, 1, "", "NACL_SALT"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "_may_overwrite"], [18, 2, 1, "", "_read_keyfile_data_from_file"], [18, 2, 1, "", "_write_keyfile_data_to_file"], [19, 7, 1, "", "ask_password_to_encrypt"], [18, 2, 1, "", "check_and_update_encryption"], [18, 4, 1, "", "data"], [18, 2, 1, "", "decrypt"], [19, 7, 1, "", "decrypt_keyfile_data"], [19, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [18, 2, 1, "", "encrypt"], [19, 7, 1, "", "encrypt_keyfile_data"], [18, 2, 1, "", "exists_on_device"], [19, 7, 1, "", "get_coldkey_password_from_environment"], [18, 2, 1, "", "get_keypair"], [18, 2, 1, "", "is_encrypted"], [18, 2, 1, "", "is_readable"], [18, 2, 1, "", "is_writable"], [19, 1, 1, "", "keyfile"], [18, 4, 1, "", "keyfile_data"], [19, 7, 1, "", "keyfile_data_encryption_method"], [19, 7, 1, "", "keyfile_data_is_encrypted"], [19, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [19, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [19, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [18, 4, 1, "", "keypair"], [19, 7, 1, "", "legacy_encrypt_keyfile_data"], [18, 2, 1, "", "make_dirs"], [19, 7, 1, "", "serialized_keypair_to_keyfile_data"], [18, 2, 1, "", "set_keypair"], [19, 7, 1, "", "validate_password"]], "bittensor.keyfile.Mockkeyfile": [[19, 2, 1, "", "__repr__"], [19, 2, 1, "", "__str__"], [19, 2, 1, "", "check_and_update_encryption"], [19, 4, 1, "", "data"], [19, 2, 1, "", "decrypt"], [19, 2, 1, "", "encrypt"], [19, 2, 1, "", "exists_on_device"], [19, 2, 1, "", "get_keypair"], [19, 2, 1, "", "is_encrypted"], [19, 2, 1, "", "is_readable"], [19, 2, 1, "", "is_writable"], [19, 4, 1, "", "keypair"], [19, 2, 1, "", "make_dirs"], [19, 2, 1, "", "set_keypair"]], "bittensor.keyfile.keyfile": [[19, 2, 1, "", "__repr__"], [19, 2, 1, "", "__str__"], [19, 2, 1, "", "_may_overwrite"], [19, 2, 1, "", "_read_keyfile_data_from_file"], [19, 2, 1, "", "_write_keyfile_data_to_file"], [19, 2, 1, "", "check_and_update_encryption"], [19, 4, 1, "", "data"], [19, 2, 1, "", "decrypt"], [19, 2, 1, "", "encrypt"], [19, 2, 1, "", "exists_on_device"], [19, 2, 1, "", "get_keypair"], [19, 2, 1, "", "is_encrypted"], [19, 2, 1, "", "is_readable"], [19, 2, 1, "", "is_writable"], [19, 4, 1, "", "keyfile_data"], [19, 4, 1, "", "keypair"], [19, 2, 1, "", "make_dirs"], [19, 2, 1, "", "set_keypair"]], "bittensor.logging": [[18, 3, 1, "", "__debug_on__"], [18, 3, 1, "", "__file_sink__"], [18, 3, 1, "", "__has_been_inited__"], [18, 3, 1, "", "__std_sink__"], [18, 3, 1, "", "__trace_on__"], [18, 2, 1, "", "_format"], [20, 7, 1, "", "_remove_loguru_ansi_directive"], [18, 2, 1, "", "add_args"], [18, 2, 1, "", "check_config"], [18, 2, 1, "", "config"], [18, 2, 1, "", "debug"], [18, 2, 1, "", "error"], [18, 2, 1, "", "get_level"], [18, 2, 1, "", "help"], [18, 2, 1, "", "info"], [18, 2, 1, "", "log_filter"], [18, 2, 1, "", "log_formatter"], [18, 2, 1, "", "log_save_filter"], [18, 2, 1, "", "log_save_formatter"], [20, 6, 1, "", "logger"], [20, 1, 1, "", "logging"], [18, 2, 1, "", "set_debug"], [18, 2, 1, "", "set_trace"], [18, 2, 1, "", "success"], [18, 2, 1, "", "trace"], [18, 2, 1, "", "warning"]], "bittensor.logging.logging": [[20, 3, 1, "", "__debug_on__"], [20, 3, 1, "", "__file_sink__"], [20, 3, 1, "", "__has_been_inited__"], [20, 3, 1, "", "__std_sink__"], [20, 3, 1, "", "__trace_on__"], [20, 2, 1, "", "_format"], [20, 2, 1, "", "add_args"], [20, 2, 1, "", "check_config"], [20, 2, 1, "", "config"], [20, 2, 1, "", "debug"], [20, 2, 1, "", "error"], [20, 2, 1, "", "get_level"], [20, 2, 1, "", "help"], [20, 2, 1, "", "info"], [20, 2, 1, "", "log_filter"], [20, 2, 1, "", "log_formatter"], [20, 2, 1, "", "log_save_filter"], [20, 2, 1, "", "log_save_formatter"], [20, 2, 1, "", "set_debug"], [20, 2, 1, "", "set_trace"], [20, 2, 1, "", "success"], [20, 2, 1, "", "trace"], [20, 2, 1, "", "warning"]], "bittensor.metagraph": [[18, 4, 1, "", "B"], [18, 4, 1, "", "C"], [18, 4, 1, "", "D"], [18, 4, 1, "", "E"], [18, 4, 1, "", "I"], [18, 4, 1, "", "R"], [18, 4, 1, "", "S"], [18, 4, 1, "", "T"], [18, 4, 1, "", "Tv"], [18, 4, 1, "", "W"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "_assign_neurons"], [18, 2, 1, "", "_create_tensor"], [18, 2, 1, "", "_initialize_subtensor"], [18, 2, 1, "", "_process_root_weights"], [18, 2, 1, "", "_process_weights_or_bonds"], [18, 2, 1, "", "_set_metagraph_attributes"], [18, 2, 1, "", "_set_weights_and_bonds"], [18, 3, 1, "", "active"], [18, 4, 1, "", "addresses"], [18, 3, 1, "", "axons"], [18, 3, 1, "", "block"], [18, 3, 1, "", "bonds"], [18, 4, 1, "", "coldkeys"], [18, 3, 1, "", "consensus"], [18, 3, 1, "", "dividends"], [18, 3, 1, "", "emission"], [21, 7, 1, "", "get_save_dir"], [18, 4, 1, "", "hotkeys"], [18, 3, 1, "", "incentive"], [18, 3, 1, "", "last_update"], [21, 7, 1, "", "latest_block_path"], [18, 2, 1, "", "load"], [18, 2, 1, "", "load_from_path"], [18, 2, 1, "", "metadata"], [21, 1, 1, "", "metagraph"], [18, 3, 1, "", "n"], [18, 3, 1, "", "netuid"], [18, 3, 1, "", "network"], [18, 3, 1, "", "ranks"], [18, 2, 1, "", "save"], [18, 3, 1, "", "stake"], [18, 2, 1, "", "sync"], [18, 3, 1, "", "total_stake"], [18, 3, 1, "", "trust"], [18, 3, 1, "", "uids"], [18, 3, 1, "", "validator_permit"], [18, 3, 1, "", "validator_trust"], [18, 3, 1, "", "version"], [18, 3, 1, "", "weights"]], "bittensor.metagraph.metagraph": [[21, 4, 1, "", "B"], [21, 4, 1, "", "C"], [21, 4, 1, "", "D"], [21, 4, 1, "", "E"], [21, 4, 1, "", "I"], [21, 4, 1, "", "R"], [21, 4, 1, "", "S"], [21, 4, 1, "", "T"], [21, 4, 1, "", "Tv"], [21, 4, 1, "", "W"], [21, 2, 1, "", "__repr__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "_assign_neurons"], [21, 2, 1, "", "_create_tensor"], [21, 2, 1, "", "_initialize_subtensor"], [21, 2, 1, "", "_process_root_weights"], [21, 2, 1, "", "_process_weights_or_bonds"], [21, 2, 1, "", "_set_metagraph_attributes"], [21, 2, 1, "", "_set_weights_and_bonds"], [21, 3, 1, "", "active"], [21, 4, 1, "", "addresses"], [21, 3, 1, "", "axons"], [21, 3, 1, "", "block"], [21, 3, 1, "", "bonds"], [21, 4, 1, "", "coldkeys"], [21, 3, 1, "", "consensus"], [21, 3, 1, "", "dividends"], [21, 3, 1, "", "emission"], [21, 4, 1, "", "hotkeys"], [21, 3, 1, "", "incentive"], [21, 3, 1, "", "last_update"], [21, 2, 1, "", "load"], [21, 2, 1, "", "load_from_path"], [21, 2, 1, "", "metadata"], [21, 3, 1, "", "n"], [21, 3, 1, "", "netuid"], [21, 3, 1, "", "network"], [21, 3, 1, "", "ranks"], [21, 2, 1, "", "save"], [21, 3, 1, "", "stake"], [21, 2, 1, "", "sync"], [21, 3, 1, "", "total_stake"], [21, 3, 1, "", "trust"], [21, 3, 1, "", "uids"], [21, 3, 1, "", "validator_permit"], [21, 3, 1, "", "validator_trust"], [21, 3, 1, "", "version"], [21, 3, 1, "", "weights"]], "bittensor.stream": [[22, 1, 1, "", "BTStreamingResponseModel"], [22, 1, 1, "", "StreamingSynapse"]], "bittensor.stream.BTStreamingResponseModel": [[22, 3, 1, "id0", "token_streamer"]], "bittensor.stream.StreamingSynapse": [[22, 1, 1, "", "BTStreamingResponse"], [22, 1, 1, "", "Config"], [22, 2, 1, "", "create_streaming_response"], [22, 2, 1, "", "extract_response_json"], [22, 2, 1, "", "process_streaming_response"]], "bittensor.stream.StreamingSynapse.BTStreamingResponse": [[22, 2, 1, "", "__call__"], [22, 2, 1, "", "stream_response"]], "bittensor.stream.StreamingSynapse.Config": [[22, 3, 1, "", "validate_assignment"]], "bittensor.subtensor": [[23, 1, 1, "", "ParamWithTypes"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "_do_associate_ips"], [18, 2, 1, "", "_do_burned_register"], [18, 2, 1, "", "_do_delegation"], [18, 2, 1, "", "_do_nominate"], [18, 2, 1, "", "_do_pow_register"], [18, 2, 1, "", "_do_root_register"], [18, 2, 1, "", "_do_serve_axon"], [18, 2, 1, "", "_do_serve_prometheus"], [18, 2, 1, "", "_do_set_weights"], [18, 2, 1, "", "_do_stake"], [18, 2, 1, "", "_do_transfer"], [18, 2, 1, "", "_do_undelegation"], [18, 2, 1, "", "_do_unstake"], [18, 2, 1, "", "_encode_params"], [18, 2, 1, "", "_null_neuron"], [18, 2, 1, "", "add_args"], [18, 2, 1, "", "add_stake"], [18, 2, 1, "", "add_stake_multiple"], [18, 2, 1, "", "associated_validator_ip_info"], [18, 4, 1, "", "block"], [18, 2, 1, "", "blocks_since_epoch"], [18, 2, 1, "", "bonds"], [18, 2, 1, "", "burn"], [18, 2, 1, "", "burned_register"], [18, 2, 1, "", "config"], [18, 2, 1, "", "delegate"], [18, 2, 1, "", "determine_chain_endpoint_and_network"], [18, 2, 1, "", "difficulty"], [18, 2, 1, "", "does_hotkey_exist"], [18, 2, 1, "", "get_all_neurons_for_pubkey"], [18, 2, 1, "", "get_all_subnet_netuids"], [18, 2, 1, "", "get_all_subnets_info"], [18, 2, 1, "", "get_all_uids_for_hotkey"], [18, 2, 1, "", "get_axon_info"], [18, 2, 1, "", "get_balance"], [18, 2, 1, "", "get_balances"], [18, 2, 1, "", "get_block_hash"], [18, 2, 1, "", "get_current_block"], [18, 2, 1, "", "get_delegate_by_hotkey"], [18, 2, 1, "", "get_delegate_take"], [18, 2, 1, "", "get_delegated"], [18, 2, 1, "", "get_delegates"], [18, 2, 1, "", "get_emission_value_by_subnet"], [18, 2, 1, "", "get_existential_deposit"], [18, 2, 1, "", "get_hotkey_owner"], [18, 2, 1, "", "get_netuids_for_hotkey"], [18, 2, 1, "", "get_neuron_for_pubkey_and_subnet"], [18, 2, 1, "", "get_nominators_for_hotkey"], [18, 2, 1, "", "get_prometheus_info"], [18, 2, 1, "", "get_proposal_call_data"], [18, 2, 1, "", "get_proposal_hashes"], [18, 3, 1, "", "get_proposal_vote_data"], [18, 2, 1, "", "get_proposals"], [18, 2, 1, "", "get_senate_members"], [18, 2, 1, "", "get_stake"], [18, 2, 1, "", "get_stake_for_coldkey_and_hotkey"], [18, 2, 1, "", "get_stake_info_for_coldkey"], [18, 2, 1, "", "get_stake_info_for_coldkeys"], [18, 2, 1, "", "get_subnet_burn_cost"], [18, 2, 1, "", "get_subnet_connection_requirement"], [18, 2, 1, "", "get_subnet_connection_requirements"], [18, 2, 1, "", "get_subnet_hyperparameters"], [18, 2, 1, "", "get_subnet_info"], [18, 2, 1, "", "get_subnet_modality"], [18, 2, 1, "", "get_subnet_owner"], [18, 2, 1, "", "get_subnets"], [18, 2, 1, "", "get_total_stake_for_coldkey"], [18, 2, 1, "", "get_total_stake_for_hotkey"], [18, 2, 1, "", "get_total_subnets"], [18, 2, 1, "", "get_transfer_fee"], [18, 2, 1, "", "get_uid_for_hotkey_on_subnet"], [18, 2, 1, "", "get_vote_data"], [18, 2, 1, "", "help"], [18, 2, 1, "", "immunity_period"], [18, 2, 1, "", "incentive"], [18, 2, 1, "", "is_hotkey_delegate"], [18, 2, 1, "", "is_hotkey_registered"], [18, 2, 1, "", "is_hotkey_registered_any"], [18, 2, 1, "", "is_hotkey_registered_on_subnet"], [18, 2, 1, "", "is_senate_member"], [18, 2, 1, "", "kappa"], [18, 2, 1, "", "leave_senate"], [23, 6, 1, "", "logger"], [18, 2, 1, "", "max_allowed_validators"], [18, 2, 1, "", "max_n"], [18, 2, 1, "", "max_weight_limit"], [18, 2, 1, "", "metagraph"], [18, 2, 1, "", "min_allowed_weights"], [18, 2, 1, "", "neuron_for_uid"], [18, 2, 1, "", "neuron_for_uid_lite"], [18, 2, 1, "", "neuron_for_wallet"], [18, 2, 1, "", "neuron_has_validator_permit"], [18, 2, 1, "", "neurons"], [18, 2, 1, "", "neurons_lite"], [18, 2, 1, "", "nominate"], [18, 2, 1, "", "query_constant"], [18, 2, 1, "", "query_map"], [18, 2, 1, "", "query_map_subtensor"], [18, 2, 1, "", "query_module"], [18, 2, 1, "", "query_runtime_api"], [18, 2, 1, "", "query_subtensor"], [18, 2, 1, "", "register"], [18, 2, 1, "", "register_senate"], [18, 2, 1, "", "register_subnetwork"], [18, 2, 1, "", "rho"], [18, 2, 1, "", "root_register"], [18, 2, 1, "", "root_set_weights"], [18, 2, 1, "", "run_faucet"], [18, 2, 1, "", "scaling_law_power"], [18, 2, 1, "", "serve"], [18, 2, 1, "", "serve_axon"], [18, 2, 1, "", "serve_prometheus"], [18, 2, 1, "", "serving_rate_limit"], [18, 2, 1, "", "set_hyperparameter"], [18, 2, 1, "", "set_weights"], [18, 2, 1, "", "setup_config"], [18, 2, 1, "", "state_call"], [18, 2, 1, "", "subnet_exists"], [18, 2, 1, "", "subnetwork_n"], [23, 1, 1, "", "subtensor"], [18, 2, 1, "", "synergy_scaling_law_power"], [18, 2, 1, "", "tempo"], [18, 2, 1, "", "total_issuance"], [18, 2, 1, "", "total_stake"], [18, 2, 1, "", "transfer"], [18, 2, 1, "", "tx_rate_limit"], [18, 2, 1, "", "undelegate"], [18, 2, 1, "", "unstake"], [18, 2, 1, "", "unstake_multiple"], [18, 2, 1, "", "validator_batch_size"], [18, 2, 1, "", "validator_epoch_length"], [18, 2, 1, "", "validator_epochs_per_reset"], [18, 2, 1, "", "validator_exclude_quantile"], [18, 2, 1, "", "validator_logits_divergence"], [18, 2, 1, "", "validator_prune_len"], [18, 2, 1, "", "validator_sequence_length"], [18, 2, 1, "", "vote_senate"], [18, 2, 1, "", "weights"]], "bittensor.subtensor.ParamWithTypes": [[23, 3, 1, "", "name"], [23, 3, 1, "", "type"]], "bittensor.subtensor.subtensor": [[23, 2, 1, "", "__repr__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "_do_associate_ips"], [23, 2, 1, "", "_do_burned_register"], [23, 2, 1, "", "_do_delegation"], [23, 2, 1, "", "_do_nominate"], [23, 2, 1, "", "_do_pow_register"], [23, 2, 1, "", "_do_root_register"], [23, 2, 1, "", "_do_serve_axon"], [23, 2, 1, "", "_do_serve_prometheus"], [23, 2, 1, "", "_do_set_weights"], [23, 2, 1, "", "_do_stake"], [23, 2, 1, "", "_do_transfer"], [23, 2, 1, "", "_do_undelegation"], [23, 2, 1, "", "_do_unstake"], [23, 2, 1, "", "_encode_params"], [23, 2, 1, "", "_null_neuron"], [23, 2, 1, "", "add_args"], [23, 2, 1, "", "add_stake"], [23, 2, 1, "", "add_stake_multiple"], [23, 2, 1, "", "associated_validator_ip_info"], [23, 4, 1, "", "block"], [23, 2, 1, "", "blocks_since_epoch"], [23, 2, 1, "", "bonds"], [23, 2, 1, "", "burn"], [23, 2, 1, "", "burned_register"], [23, 2, 1, "", "config"], [23, 2, 1, "", "delegate"], [23, 2, 1, "", "determine_chain_endpoint_and_network"], [23, 2, 1, "", "difficulty"], [23, 2, 1, "", "does_hotkey_exist"], [23, 2, 1, "", "get_all_neurons_for_pubkey"], [23, 2, 1, "", "get_all_subnet_netuids"], [23, 2, 1, "", "get_all_subnets_info"], [23, 2, 1, "", "get_all_uids_for_hotkey"], [23, 2, 1, "", "get_axon_info"], [23, 2, 1, "", "get_balance"], [23, 2, 1, "", "get_balances"], [23, 2, 1, "", "get_block_hash"], [23, 2, 1, "", "get_current_block"], [23, 2, 1, "", "get_delegate_by_hotkey"], [23, 2, 1, "", "get_delegate_take"], [23, 2, 1, "", "get_delegated"], [23, 2, 1, "", "get_delegates"], [23, 2, 1, "", "get_emission_value_by_subnet"], [23, 2, 1, "", "get_existential_deposit"], [23, 2, 1, "", "get_hotkey_owner"], [23, 2, 1, "", "get_netuids_for_hotkey"], [23, 2, 1, "", "get_neuron_for_pubkey_and_subnet"], [23, 2, 1, "", "get_nominators_for_hotkey"], [23, 2, 1, "", "get_prometheus_info"], [23, 2, 1, "", "get_proposal_call_data"], [23, 2, 1, "", "get_proposal_hashes"], [23, 3, 1, "", "get_proposal_vote_data"], [23, 2, 1, "", "get_proposals"], [23, 2, 1, "", "get_senate_members"], [23, 2, 1, "", "get_stake"], [23, 2, 1, "", "get_stake_for_coldkey_and_hotkey"], [23, 2, 1, "", "get_stake_info_for_coldkey"], [23, 2, 1, "", "get_stake_info_for_coldkeys"], [23, 2, 1, "", "get_subnet_burn_cost"], [23, 2, 1, "", "get_subnet_connection_requirement"], [23, 2, 1, "", "get_subnet_connection_requirements"], [23, 2, 1, "", "get_subnet_hyperparameters"], [23, 2, 1, "", "get_subnet_info"], [23, 2, 1, "", "get_subnet_modality"], [23, 2, 1, "", "get_subnet_owner"], [23, 2, 1, "", "get_subnets"], [23, 2, 1, "", "get_total_stake_for_coldkey"], [23, 2, 1, "", "get_total_stake_for_hotkey"], [23, 2, 1, "", "get_total_subnets"], [23, 2, 1, "", "get_transfer_fee"], [23, 2, 1, "", "get_uid_for_hotkey_on_subnet"], [23, 2, 1, "", "get_vote_data"], [23, 2, 1, "", "help"], [23, 2, 1, "", "immunity_period"], [23, 2, 1, "", "incentive"], [23, 2, 1, "", "is_hotkey_delegate"], [23, 2, 1, "", "is_hotkey_registered"], [23, 2, 1, "", "is_hotkey_registered_any"], [23, 2, 1, "", "is_hotkey_registered_on_subnet"], [23, 2, 1, "", "is_senate_member"], [23, 2, 1, "", "kappa"], [23, 2, 1, "", "leave_senate"], [23, 2, 1, "", "max_allowed_validators"], [23, 2, 1, "", "max_n"], [23, 2, 1, "", "max_weight_limit"], [23, 2, 1, "", "metagraph"], [23, 2, 1, "", "min_allowed_weights"], [23, 2, 1, "", "neuron_for_uid"], [23, 2, 1, "", "neuron_for_uid_lite"], [23, 2, 1, "", "neuron_for_wallet"], [23, 2, 1, "", "neuron_has_validator_permit"], [23, 2, 1, "", "neurons"], [23, 2, 1, "", "neurons_lite"], [23, 2, 1, "", "nominate"], [23, 2, 1, "", "query_constant"], [23, 2, 1, "", "query_map"], [23, 2, 1, "", "query_map_subtensor"], [23, 2, 1, "", "query_module"], [23, 2, 1, "", "query_runtime_api"], [23, 2, 1, "", "query_subtensor"], [23, 2, 1, "", "register"], [23, 2, 1, "", "register_senate"], [23, 2, 1, "", "register_subnetwork"], [23, 2, 1, "", "rho"], [23, 2, 1, "", "root_register"], [23, 2, 1, "", "root_set_weights"], [23, 2, 1, "", "run_faucet"], [23, 2, 1, "", "scaling_law_power"], [23, 2, 1, "", "serve"], [23, 2, 1, "", "serve_axon"], [23, 2, 1, "", "serve_prometheus"], [23, 2, 1, "", "serving_rate_limit"], [23, 2, 1, "", "set_hyperparameter"], [23, 2, 1, "", "set_weights"], [23, 2, 1, "", "setup_config"], [23, 2, 1, "", "state_call"], [23, 2, 1, "", "subnet_exists"], [23, 2, 1, "", "subnetwork_n"], [23, 2, 1, "", "synergy_scaling_law_power"], [23, 2, 1, "", "tempo"], [23, 2, 1, "", "total_issuance"], [23, 2, 1, "", "total_stake"], [23, 2, 1, "", "transfer"], [23, 2, 1, "", "tx_rate_limit"], [23, 2, 1, "", "undelegate"], [23, 2, 1, "", "unstake"], [23, 2, 1, "", "unstake_multiple"], [23, 2, 1, "", "validator_batch_size"], [23, 2, 1, "", "validator_epoch_length"], [23, 2, 1, "", "validator_epochs_per_reset"], [23, 2, 1, "", "validator_exclude_quantile"], [23, 2, 1, "", "validator_logits_divergence"], [23, 2, 1, "", "validator_prune_len"], [23, 2, 1, "", "validator_sequence_length"], [23, 2, 1, "", "vote_senate"], [23, 2, 1, "", "weights"]], "bittensor.synapse": [[24, 1, 1, "", "Synapse"], [24, 1, 1, "", "TerminalInfo"], [24, 7, 1, "", "cast_float"], [24, 7, 1, "", "cast_int"], [24, 7, 1, "", "get_size"]], "bittensor.synapse.Synapse": [[24, 1, 1, "", "Config"], [24, 2, 1, "", "__setattr__"], [24, 3, 1, "", "_extract_header_size"], [24, 3, 1, "", "_extract_timeout"], [24, 3, 1, "", "_extract_total_size"], [24, 3, 1, "", "axon"], [24, 4, 1, "", "body_hash"], [24, 3, 1, "", "computed_body_hash"], [24, 3, 1, "", "dendrite"], [24, 2, 1, "", "deserialize"], [24, 4, 1, "", "failed_verification"], [24, 2, 1, "", "from_headers"], [24, 2, 1, "", "get_total_size"], [24, 3, 1, "", "header_size"], [24, 4, 1, "", "is_blacklist"], [24, 4, 1, "", "is_failure"], [24, 4, 1, "", "is_success"], [24, 4, 1, "", "is_timeout"], [24, 3, 1, "", "name"], [24, 2, 1, "", "parse_headers_to_inputs"], [24, 3, 1, "", "required_hash_fields"], [24, 2, 1, "", "set_name_type"], [24, 3, 1, "", "timeout"], [24, 2, 1, "", "to_headers"], [24, 3, 1, "", "total_size"]], "bittensor.synapse.Synapse.Config": [[24, 3, 1, "", "validate_assignment"]], "bittensor.synapse.TerminalInfo": [[24, 1, 1, "", "Config"], [24, 3, 1, "", "_extract_nonce"], [24, 3, 1, "", "_extract_port"], [24, 3, 1, "", "_extract_process_time"], [24, 3, 1, "", "_extract_status_code"], [24, 3, 1, "", "_extract_version"], [24, 3, 1, "", "hotkey"], [24, 3, 1, "", "ip"], [24, 3, 1, "", "nonce"], [24, 3, 1, "", "port"], [24, 3, 1, "", "process_time"], [24, 3, 1, "", "signature"], [24, 3, 1, "", "status_code"], [24, 3, 1, "", "status_message"], [24, 3, 1, "", "uuid"], [24, 3, 1, "", "version"]], "bittensor.synapse.TerminalInfo.Config": [[24, 3, 1, "", "validate_assignment"]], "bittensor.tensor": [[25, 6, 1, "", "TORCH_DTYPES"], [25, 1, 1, "", "Tensor"], [25, 7, 1, "", "cast_dtype"], [25, 7, 1, "", "cast_shape"], [25, 1, 1, "", "tensor"]], "bittensor.tensor.Tensor": [[25, 1, 1, "", "Config"], [25, 3, 1, "", "_extract_dtype"], [25, 3, 1, "", "_extract_shape"], [25, 3, 1, "id0", "buffer"], [25, 2, 1, "", "deserialize"], [25, 3, 1, "id1", "dtype"], [25, 2, 1, "", "numpy"], [25, 2, 1, "", "serialize"], [25, 3, 1, "id2", "shape"], [25, 2, 1, "", "tensor"], [25, 2, 1, "", "tolist"]], "bittensor.tensor.Tensor.Config": [[25, 3, 1, "", "validate_assignment"]], "bittensor.threadpool": [[26, 5, 1, "", "BrokenThreadPool"], [26, 6, 1, "", "NULL_ENTRY"], [26, 1, 1, "", "PriorityThreadPoolExecutor"], [26, 1, 1, "", "_WorkItem"], [26, 6, 1, "", "__author__"], [26, 6, 1, "", "_shutdown"], [26, 6, 1, "", "_threads_queues"], [26, 7, 1, "", "_worker"]], "bittensor.threadpool.PriorityThreadPoolExecutor": [[26, 2, 1, "", "_adjust_thread_count"], [26, 3, 1, "", "_counter"], [26, 2, 1, "", "_initializer_failed"], [26, 2, 1, "", "add_args"], [26, 2, 1, "", "config"], [26, 4, 1, "", "is_empty"], [26, 2, 1, "", "shutdown"], [26, 2, 1, "", "submit"]], "bittensor.threadpool._WorkItem": [[26, 2, 1, "", "run"]], "bittensor.types": [[27, 1, 1, "", "AxonServeCallParams"], [27, 1, 1, "", "PrometheusServeCallParams"]], "bittensor.types.AxonServeCallParams": [[27, 3, 1, "", "ip"], [27, 3, 1, "", "ip_type"], [27, 3, 1, "", "netuid"], [27, 3, 1, "", "port"], [27, 3, 1, "", "version"]], "bittensor.types.PrometheusServeCallParams": [[27, 3, 1, "", "ip"], [27, 3, 1, "", "ip_type"], [27, 3, 1, "", "netuid"], [27, 3, 1, "", "port"], [27, 3, 1, "", "version"]], "bittensor.utils": [[31, 6, 1, "", "RAOPERTAO"], [31, 6, 1, "", "U16_MAX"], [31, 7, 1, "", "U16_NORMALIZED_FLOAT"], [31, 6, 1, "", "U64_MAX"], [31, 7, 1, "", "U64_NORMALIZED_FLOAT"], [28, 0, 0, "-", "_register_cuda"], [29, 0, 0, "-", "balance"], [31, 7, 1, "", "create_pow"], [30, 0, 0, "-", "formatting"], [31, 7, 1, "", "get_explorer_root_url_by_network_from_map"], [31, 7, 1, "", "get_explorer_url_for_network"], [31, 7, 1, "", "get_ss58_format"], [31, 7, 1, "", "hash"], [31, 7, 1, "", "is_valid_bittensor_address_or_public_key"], [31, 7, 1, "", "is_valid_ed25519_pubkey"], [31, 7, 1, "", "is_valid_ss58_address"], [32, 0, 0, "-", "networking"], [33, 0, 0, "-", "registration"], [31, 7, 1, "", "ss58_address_to_bytes"], [31, 7, 1, "", "ss58_to_vec_u8"], [34, 0, 0, "-", "stats"], [31, 7, 1, "", "strtobool"], [31, 7, 1, "", "strtobool_with_default"], [35, 0, 0, "-", "test_utils"], [31, 7, 1, "", "u8_key_to_ss58"], [31, 7, 1, "", "unbiased_topk"], [31, 7, 1, "", "version_checking"], [36, 0, 0, "-", "wallet_utils"], [37, 0, 0, "-", "weight_utils"]], "bittensor.utils._register_cuda": [[28, 7, 1, "", "log_cuda_errors"], [28, 7, 1, "", "reset_cuda"], [28, 7, 1, "", "solve_cuda"]], "bittensor.utils.balance": [[29, 1, 1, "", "Balance"]], "bittensor.utils.balance.Balance": [[29, 2, 1, "", "__abs__"], [29, 2, 1, "", "__add__"], [29, 2, 1, "", "__eq__"], [29, 2, 1, "id6", "__float__"], [29, 2, 1, "", "__floordiv__"], [29, 2, 1, "", "__ge__"], [29, 2, 1, "", "__gt__"], [29, 2, 1, "id5", "__int__"], [29, 2, 1, "", "__le__"], [29, 2, 1, "", "__lt__"], [29, 2, 1, "", "__mul__"], [29, 2, 1, "", "__ne__"], [29, 2, 1, "", "__neg__"], [29, 2, 1, "", "__nonzero__"], [29, 2, 1, "", "__pos__"], [29, 2, 1, "", "__radd__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "__rfloordiv__"], [29, 2, 1, "", "__rich__"], [29, 2, 1, "", "__rich_rao__"], [29, 2, 1, "", "__rmul__"], [29, 2, 1, "", "__rsub__"], [29, 2, 1, "", "__rtruediv__"], [29, 2, 1, "", "__str__"], [29, 2, 1, "", "__str_rao__"], [29, 2, 1, "", "__sub__"], [29, 2, 1, "", "__truediv__"], [29, 2, 1, "", "from_float"], [29, 2, 1, "", "from_rao"], [29, 2, 1, "", "from_tao"], [29, 3, 1, "id3", "rao"], [29, 3, 1, "id2", "rao_unit"], [29, 3, 1, "id4", "tao"], [29, 3, 1, "id1", "unit"]], "bittensor.utils.formatting": [[30, 7, 1, "", "get_human_readable"], [30, 7, 1, "", "millify"]], "bittensor.utils.networking": [[32, 5, 1, "", "ExternalIPNotFound"], [32, 7, 1, "", "get_external_ip"], [32, 7, 1, "", "get_formatted_ws_endpoint_url"], [32, 7, 1, "", "int_to_ip"], [32, 7, 1, "", "ip__str__"], [32, 7, 1, "", "ip_to_int"], [32, 7, 1, "", "ip_version"]], "bittensor.utils.registration": [[33, 5, 1, "", "CUDAException"], [33, 1, 1, "", "POWSolution"], [33, 1, 1, "", "RegistrationStatistics"], [33, 1, 1, "", "RegistrationStatisticsLogger"], [33, 1, 1, "", "_CUDASolver"], [33, 1, 1, "", "_Solver"], [33, 1, 1, "", "_SolverBase"], [33, 1, 1, "", "_UsingSpawnStartMethod"], [33, 7, 1, "", "_check_for_newest_block_and_update"], [33, 7, 1, "", "_create_seal_hash"], [33, 7, 1, "", "_get_block_with_retry"], [33, 7, 1, "", "_hash_block_with_hotkey"], [33, 7, 1, "", "_hex_bytes_to_u8_list"], [33, 7, 1, "", "_registration_diff_pack"], [33, 7, 1, "", "_registration_diff_unpack"], [33, 7, 1, "", "_seal_meets_difficulty"], [33, 7, 1, "", "_solve_for_difficulty_fast"], [33, 7, 1, "", "_solve_for_difficulty_fast_cuda"], [33, 7, 1, "", "_solve_for_nonce_block"], [33, 7, 1, "", "_solve_for_nonce_block_cuda"], [33, 7, 1, "", "_terminate_workers_and_wait_for_exit"], [33, 7, 1, "", "_update_curr_block"], [33, 7, 1, "", "create_pow"], [33, 7, 1, "", "get_cpu_count"]], "bittensor.utils.registration.POWSolution": [[33, 3, 1, "", "block_number"], [33, 3, 1, "", "difficulty"], [33, 2, 1, "", "is_stale"], [33, 3, 1, "", "nonce"], [33, 3, 1, "", "seal"]], "bittensor.utils.registration.RegistrationStatistics": [[33, 3, 1, "", "block_hash"], [33, 3, 1, "", "block_number"], [33, 3, 1, "", "difficulty"], [33, 3, 1, "", "hash_rate"], [33, 3, 1, "", "hash_rate_perpetual"], [33, 3, 1, "", "rounds_total"], [33, 3, 1, "", "time_average"], [33, 3, 1, "", "time_spent"], [33, 3, 1, "", "time_spent_total"]], "bittensor.utils.registration.RegistrationStatisticsLogger": [[33, 3, 1, "", "console"], [33, 2, 1, "", "get_status_message"], [33, 2, 1, "", "start"], [33, 3, 1, "", "status"], [33, 2, 1, "", "stop"], [33, 2, 1, "", "update"]], "bittensor.utils.registration._CUDASolver": [[33, 3, 1, "", "TPB"], [33, 3, 1, "", "dev_id"], [33, 2, 1, "", "run"]], "bittensor.utils.registration._Solver": [[33, 2, 1, "", "run"]], "bittensor.utils.registration._SolverBase": [[33, 3, 1, "", "check_block"], [33, 2, 1, "", "create_shared_memory"], [33, 3, 1, "", "curr_block"], [33, 3, 1, "", "curr_block_num"], [33, 3, 1, "", "curr_diff"], [33, 3, 1, "", "finished_queue"], [33, 3, 1, "", "hotkey_bytes"], [33, 3, 1, "", "limit"], [33, 3, 1, "", "newBlockEvent"], [33, 3, 1, "", "num_proc"], [33, 3, 1, "", "proc_num"], [33, 2, 1, "", "run"], [33, 3, 1, "", "solution_queue"], [33, 3, 1, "", "stopEvent"], [33, 3, 1, "", "update_interval"]], "bittensor.utils.registration._UsingSpawnStartMethod": [[33, 2, 1, "", "__enter__"], [33, 2, 1, "", "__exit__"]], "bittensor.utils.stats": [[34, 1, 1, "", "AmountPerSecondRollingAverage"], [34, 1, 1, "", "EventsPerSecondRollingAverage"], [34, 1, 1, "", "timed_rolling_avg"]], "bittensor.utils.stats.AmountPerSecondRollingAverage": [[34, 2, 1, "", "event"], [34, 2, 1, "", "get"]], "bittensor.utils.stats.EventsPerSecondRollingAverage": [[34, 2, 1, "", "event"], [34, 2, 1, "", "get"]], "bittensor.utils.stats.timed_rolling_avg": [[34, 2, 1, "", "update"]], "bittensor.utils.test_utils": [[35, 7, 1, "", "get_random_unused_port"], [35, 6, 1, "", "max_tries"]], "bittensor.utils.wallet_utils": [[36, 7, 1, "", "get_ss58_format"], [36, 7, 1, "", "is_valid_bittensor_address_or_public_key"], [36, 7, 1, "", "is_valid_ed25519_pubkey"], [36, 7, 1, "", "is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[37, 6, 1, "", "U16_MAX"], [37, 6, 1, "", "U32_MAX"], [37, 7, 1, "", "convert_bond_uids_and_vals_to_tensor"], [37, 7, 1, "", "convert_root_weight_uids_and_vals_to_tensor"], [37, 7, 1, "", "convert_weight_uids_and_vals_to_tensor"], [37, 7, 1, "", "convert_weights_and_uids_for_emit"], [37, 7, 1, "", "normalize_max_weight"], [37, 7, 1, "", "process_weights_for_netuid"]], "bittensor.wallet": [[18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "add_args"], [18, 4, 1, "", "coldkey"], [18, 4, 1, "", "coldkey_file"], [18, 4, 1, "", "coldkeypub"], [18, 4, 1, "", "coldkeypub_file"], [18, 2, 1, "", "config"], [18, 2, 1, "", "create"], [18, 2, 1, "", "create_coldkey_from_uri"], [18, 2, 1, "", "create_hotkey_from_uri"], [18, 2, 1, "", "create_if_non_existent"], [18, 2, 1, "", "create_new_coldkey"], [18, 2, 1, "", "create_new_hotkey"], [38, 7, 1, "", "display_mnemonic_msg"], [18, 2, 1, "", "get_coldkey"], [18, 2, 1, "", "get_coldkeypub"], [18, 2, 1, "", "get_hotkey"], [18, 2, 1, "", "help"], [18, 4, 1, "", "hotkey"], [18, 4, 1, "", "hotkey_file"], [18, 2, 1, "", "new_coldkey"], [18, 2, 1, "", "new_hotkey"], [18, 2, 1, "", "recreate"], [18, 3, 1, "", "regen_coldkey"], [18, 3, 1, "", "regen_coldkeypub"], [18, 3, 1, "", "regen_hotkey"], [18, 2, 1, "", "regenerate_coldkey"], [18, 2, 1, "", "regenerate_coldkeypub"], [18, 2, 1, "", "regenerate_hotkey"], [18, 2, 1, "", "set_coldkey"], [18, 2, 1, "", "set_coldkeypub"], [18, 2, 1, "", "set_hotkey"], [38, 1, 1, "", "wallet"]], "bittensor.wallet.wallet": [[38, 2, 1, "", "__repr__"], [38, 2, 1, "", "__str__"], [38, 2, 1, "", "add_args"], [38, 4, 1, "", "coldkey"], [38, 4, 1, "", "coldkey_file"], [38, 4, 1, "", "coldkeypub"], [38, 4, 1, "", "coldkeypub_file"], [38, 2, 1, "", "config"], [38, 2, 1, "", "create"], [38, 2, 1, "", "create_coldkey_from_uri"], [38, 2, 1, "", "create_hotkey_from_uri"], [38, 2, 1, "", "create_if_non_existent"], [38, 2, 1, "", "create_new_coldkey"], [38, 2, 1, "", "create_new_hotkey"], [38, 2, 1, "", "get_coldkey"], [38, 2, 1, "", "get_coldkeypub"], [38, 2, 1, "", "get_hotkey"], [38, 2, 1, "", "help"], [38, 4, 1, "", "hotkey"], [38, 4, 1, "", "hotkey_file"], [38, 2, 1, "", "new_coldkey"], [38, 2, 1, "", "new_hotkey"], [38, 2, 1, "", "recreate"], [38, 3, 1, "", "regen_coldkey"], [38, 3, 1, "", "regen_coldkeypub"], [38, 3, 1, "", "regen_hotkey"], [38, 2, 1, "", "regenerate_coldkey"], [38, 2, 1, "", "regenerate_coldkeypub"], [38, 2, 1, "", "regenerate_hotkey"], [38, 2, 1, "", "set_coldkey"], [38, 2, 1, "", "set_coldkeypub"], [38, 2, 1, "", "set_hotkey"]], "miner": [[40, 1, 1, "", "OpenAIMiner"], [40, 6, 1, "", "openai_api_key"]], "miner.OpenAIMiner": [[40, 2, 1, "", "add_args"], [40, 2, 1, "", "config"], [40, 2, 1, "", "prompt"]], "neurons": [[42, 0, 0, "-", "validators"]], "neurons.validators": [[43, 0, 0, "-", "validator"]], "neurons.validators.validator": [[43, 7, 1, "", "main"], [43, 1, 1, "", "neuron"]], "neurons.validators.validator.neuron": [[43, 2, 1, "", "add_args"], [43, 2, 1, "", "check_config"], [43, 2, 1, "", "config"], [43, 3, 1, "", "metagraph"], [43, 2, 1, "", "run"], [43, 3, 1, "", "subtensor"], [43, 3, 1, "", "wallet"]], "prompting": [[51, 6, 1, "", "__spec_version__"], [51, 6, 1, "", "__version__"], [46, 0, 0, "-", "baseminer"], [52, 0, 0, "-", "protocol"], [59, 0, 0, "-", "validators"], [51, 6, 1, "", "version_split"]], "prompting.baseminer": [[44, 0, 0, "-", "blacklist"], [45, 0, 0, "-", "config"], [47, 0, 0, "-", "miner"], [48, 0, 0, "-", "priority"], [49, 0, 0, "-", "run"], [50, 0, 0, "-", "set_weights"]], "prompting.baseminer.blacklist": [[44, 7, 1, "", "blacklist"], [44, 7, 1, "", "default_blacklist"], [44, 7, 1, "", "is_prompt_in_cache"]], "prompting.baseminer.config": [[45, 7, 1, "", "check_config"], [45, 7, 1, "", "get_config"]], "prompting.baseminer.miner": [[47, 1, 1, "", "Miner"]], "prompting.baseminer.miner.Miner": [[47, 2, 1, "", "__enter__"], [47, 2, 1, "", "__exit__"], [47, 2, 1, "", "_prompt"], [47, 2, 1, "", "add_args"], [47, 2, 1, "", "blacklist"], [47, 2, 1, "", "config"], [47, 2, 1, "", "priority"], [47, 2, 1, "", "prompt"], [47, 2, 1, "", "run"], [47, 2, 1, "", "run_in_background_thread"], [47, 2, 1, "", "stop_run_thread"]], "prompting.baseminer.priority": [[48, 7, 1, "", "default_priority"], [48, 7, 1, "", "priority"], [48, 7, 1, "", "record_request_timestamps"]], "prompting.baseminer.run": [[49, 7, 1, "", "run"]], "prompting.baseminer.set_weights": [[50, 7, 1, "", "set_weights"]], "prompting.protocol": [[52, 1, 1, "", "Prompting"], [52, 1, 1, "", "StreamPrompting"]], "prompting.protocol.Prompting": [[52, 1, 1, "", "Config"], [52, 3, 1, "id10", "completion"], [52, 2, 1, "id11", "deserialize"], [52, 3, 1, "id9", "messages"], [52, 3, 1, "", "required_hash_fields"], [52, 3, 1, "id0", "roles"]], "prompting.protocol.Prompting.Config": [[52, 3, 1, "", "validate_assignment"]], "prompting.protocol.StreamPrompting": [[52, 3, 1, "", "completion"], [52, 2, 1, "", "deserialize"], [52, 2, 1, "", "extract_response_json"], [52, 3, 1, "", "messages"], [52, 2, 1, "", "process_streaming_response"], [52, 3, 1, "", "required_hash_fields"], [52, 3, 1, "", "roles"]], "prompting.validators": [[59, 6, 1, "", "__spec_version__"], [59, 6, 1, "", "__version__"], [53, 0, 0, "-", "config"], [54, 0, 0, "-", "criteria"], [55, 0, 0, "-", "dataset"], [56, 0, 0, "-", "event"], [57, 0, 0, "-", "forward"], [58, 0, 0, "-", "gating"], [60, 0, 0, "-", "misc"], [62, 0, 0, "-", "penalty"], [66, 0, 0, "-", "prompts"], [72, 0, 0, "-", "reward"], [79, 0, 0, "-", "tasks"], [80, 0, 0, "-", "utils"], [59, 6, 1, "", "version_split"], [81, 0, 0, "-", "weights"]], "prompting.validators.config": [[53, 7, 1, "", "add_args"], [53, 7, 1, "", "check_config"], [53, 7, 1, "", "config"]], "prompting.validators.criteria": [[54, 1, 1, "", "ContentMatchTypeEnum"], [54, 1, 1, "", "LayoutMatchTypeEnum"], [54, 1, 1, "", "MatchContentCriteria"], [54, 1, 1, "", "MatchLayoutCriteria"], [54, 1, 1, "", "MatchLengthCriteria"], [54, 1, 1, "", "SimpleResponseLayoutCriteria"], [54, 1, 1, "", "TaskCriterion"], [54, 1, 1, "", "TextLengthUnitEnum"]], "prompting.validators.criteria.ContentMatchTypeEnum": [[54, 3, 1, "", "ENDS_WITH"], [54, 3, 1, "", "INCLUDES"], [54, 3, 1, "", "STARTS_WITH"]], "prompting.validators.criteria.LayoutMatchTypeEnum": [[54, 3, 1, "", "NUMBERED_LIST"], [54, 3, 1, "", "UNORDERED_LIST"]], "prompting.validators.criteria.MatchContentCriteria": [[54, 2, 1, "", "__post_init__"], [54, 2, 1, "", "_get_regex_pattern"], [54, 2, 1, "", "compose_text"], [54, 3, 1, "", "contentMatchType"], [54, 3, 1, "", "default_text"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "", "n_words"], [54, 3, 1, "", "negate_match"], [54, 3, 1, "id5", "penalty"], [54, 3, 1, "", "sampled_words"], [54, 3, 1, "id4", "text"], [54, 3, 1, "", "words_array"]], "prompting.validators.criteria.MatchLayoutCriteria": [[54, 2, 1, "", "compose_text"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "", "layout_type"], [54, 3, 1, "id8", "penalty"], [54, 3, 1, "id9", "text"]], "prompting.validators.criteria.MatchLengthCriteria": [[54, 2, 1, "", "_count_sentences"], [54, 2, 1, "", "_get_completion_length"], [54, 2, 1, "", "compose_text"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "id3", "penalty"], [54, 3, 1, "", "target_length"], [54, 3, 1, "id2", "text"], [54, 3, 1, "", "unit"]], "prompting.validators.criteria.SimpleResponseLayoutCriteria": [[54, 2, 1, "", "compose_text"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "id6", "penalty"], [54, 3, 1, "id7", "text"]], "prompting.validators.criteria.TaskCriterion": [[54, 2, 1, "", "compose_text"], [54, 2, 1, "", "evaluate"], [54, 3, 1, "id1", "penalty"], [54, 3, 1, "id0", "text"]], "prompting.validators.criteria.TextLengthUnitEnum": [[54, 3, 1, "", "CHARACTERS"], [54, 3, 1, "", "PARAGRAPHS"], [54, 3, 1, "", "SENTENCES"], [54, 3, 1, "", "WORDS"]], "prompting.validators.dataset": [[55, 1, 1, "", "Dataset"], [55, 1, 1, "", "MockDataset"]], "prompting.validators.dataset.Dataset": [[55, 2, 1, "", "__next__"]], "prompting.validators.dataset.MockDataset": [[55, 2, 1, "", "__next__"]], "prompting.validators.event": [[56, 1, 1, "", "EventSchema"]], "prompting.validators.event.EventSchema": [[56, 3, 1, "", "best"], [56, 3, 1, "", "blacklist_filter"], [56, 3, 1, "", "blacklist_filter_matched_ngram"], [56, 3, 1, "", "blacklist_filter_significance_score"], [56, 3, 1, "", "block"], [56, 3, 1, "", "completion_status_codes"], [56, 3, 1, "", "completion_status_messages"], [56, 3, 1, "", "completion_times"], [56, 3, 1, "", "completions"], [56, 3, 1, "", "dahoas_reward_model"], [56, 3, 1, "", "dahoas_reward_model_normalized"], [56, 3, 1, "", "diversity_reward_model"], [56, 3, 1, "", "diversity_reward_model_batch"], [56, 3, 1, "", "diversity_reward_model_historic"], [56, 3, 1, "", "diversity_reward_model_normalized"], [56, 3, 1, "", "dpo_reward_model"], [56, 3, 1, "", "dpo_reward_model_normalized"], [56, 2, 1, "", "from_dict"], [56, 3, 1, "", "gating_loss"], [56, 3, 1, "", "keyword_match_penalty_adjusted"], [56, 3, 1, "", "keyword_match_penalty_applied"], [56, 3, 1, "", "keyword_match_penalty_raw"], [56, 3, 1, "", "name"], [56, 3, 1, "", "nsfw_filter"], [56, 3, 1, "", "nsfw_filter_normalized"], [56, 3, 1, "", "nsfw_filter_score"], [56, 3, 1, "", "prompt"], [56, 3, 1, "", "prompt_reward_model"], [56, 3, 1, "", "prompt_reward_model_normalized"], [56, 3, 1, "", "reciprocate_reward_model"], [56, 3, 1, "", "reciprocate_reward_model_normalized"], [56, 3, 1, "", "relevance_filter"], [56, 3, 1, "", "relevance_filter_bert_score"], [56, 3, 1, "", "relevance_filter_mpnet_score"], [56, 3, 1, "", "relevance_filter_normalized"], [56, 3, 1, "", "rewards"], [56, 3, 1, "", "rlhf_reward_model"], [56, 3, 1, "", "rlhf_reward_model_normalized"], [56, 3, 1, "", "sentence_match_penalty_adjusted"], [56, 3, 1, "", "sentence_match_penalty_applied"], [56, 3, 1, "", "sentence_match_penalty_raw"], [56, 3, 1, "", "set_weights"], [56, 3, 1, "", "step_length"], [56, 3, 1, "", "task_type"], [56, 3, 1, "", "task_validation_penalty_adjusted"], [56, 3, 1, "", "task_validation_penalty_applied"], [56, 3, 1, "", "task_validation_penalty_raw"], [56, 3, 1, "", "uids"]], "prompting.validators.forward": [[57, 7, 1, "", "forward"], [57, 7, 1, "", "get_random_uids"], [57, 7, 1, "", "run_step"]], "prompting.validators.gating": [[58, 1, 1, "", "BaseGatingModel"], [58, 1, 1, "", "GatingModel"], [58, 1, 1, "", "SentenceEmbedGatingModel"]], "prompting.validators.gating.BaseGatingModel": [[58, 2, 1, "", "add_args"], [58, 2, 1, "", "backward"], [58, 2, 1, "", "check_config"], [58, 2, 1, "", "config"], [58, 2, 1, "", "forward"], [58, 2, 1, "", "resync"]], "prompting.validators.gating.GatingModel": [[58, 2, 1, "", "backward"], [58, 2, 1, "", "forward"], [58, 2, 1, "", "resync"]], "prompting.validators.gating.SentenceEmbedGatingModel": [[58, 2, 1, "", "backward"], [58, 2, 1, "", "forward"], [58, 2, 1, "", "mean_pooling"], [58, 2, 1, "", "resync"]], "prompting.validators.misc": [[60, 7, 1, "", "_ttl_hash_gen"], [60, 7, 1, "", "ttl_cache"], [60, 7, 1, "", "ttl_get_block"]], "prompting.validators.penalty": [[62, 1, 1, "", "BasePenaltyModel"], [62, 1, 1, "", "ContentMatchPenaltyModel"], [62, 1, 1, "", "KeywordMatchPenaltyModel"], [62, 1, 1, "", "PenaltyModelType"], [62, 1, 1, "", "TaskValidationPenaltyModel"], [61, 0, 0, "-", "content_match"], [63, 0, 0, "-", "keyword_match"], [64, 0, 0, "-", "penalty"], [65, 0, 0, "-", "task_validation"]], "prompting.validators.penalty.BasePenaltyModel": [[62, 2, 1, "", "__repr__"], [62, 2, 1, "", "__str__"], [62, 2, 1, "", "apply_penalties"], [62, 2, 1, "", "calculate_penalties"], [62, 4, 1, "", "name"]], "prompting.validators.penalty.ContentMatchPenaltyModel": [[62, 2, 1, "", "calculate_penalties"], [62, 4, 1, "", "name"]], "prompting.validators.penalty.KeywordMatchPenaltyModel": [[62, 2, 1, "", "calculate_penalties"], [62, 2, 1, "", "check_exploits_keywords"], [62, 4, 1, "", "name"]], "prompting.validators.penalty.PenaltyModelType": [[62, 3, 1, "", "keyword_match_penalty"], [62, 3, 1, "", "sentence_match_penalty"], [62, 3, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.TaskValidationPenaltyModel": [[62, 2, 1, "", "calculate_penalties"], [62, 4, 1, "", "name"]], "prompting.validators.penalty.content_match": [[61, 1, 1, "", "ContentMatchPenaltyModel"]], "prompting.validators.penalty.content_match.ContentMatchPenaltyModel": [[61, 2, 1, "", "calculate_penalties"], [61, 4, 1, "", "name"]], "prompting.validators.penalty.keyword_match": [[63, 1, 1, "", "KeywordMatchPenaltyModel"]], "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel": [[63, 2, 1, "", "calculate_penalties"], [63, 2, 1, "", "check_exploits_keywords"], [63, 4, 1, "", "name"]], "prompting.validators.penalty.penalty": [[64, 1, 1, "", "BasePenaltyModel"], [64, 1, 1, "", "PenaltyModelType"]], "prompting.validators.penalty.penalty.BasePenaltyModel": [[64, 2, 1, "", "__repr__"], [64, 2, 1, "", "__str__"], [64, 2, 1, "", "apply_penalties"], [64, 2, 1, "", "calculate_penalties"], [64, 4, 1, "", "name"]], "prompting.validators.penalty.penalty.PenaltyModelType": [[64, 3, 1, "", "keyword_match_penalty"], [64, 3, 1, "", "sentence_match_penalty"], [64, 3, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.task_validation": [[65, 1, 1, "", "TaskValidationPenaltyModel"]], "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel": [[65, 2, 1, "", "calculate_penalties"], [65, 4, 1, "", "name"]], "prompting.validators.prompts": [[66, 1, 1, "", "AnswerPrompt"], [66, 1, 1, "", "AugmentPrompt"], [66, 1, 1, "", "BasePrompt"], [66, 1, 1, "", "FirewallPrompt"], [66, 1, 1, "", "FollowupPrompt"], [66, 1, 1, "", "ScoringPrompt"], [66, 7, 1, "", "answer_prompt"], [66, 6, 1, "", "answer_scoring_template"], [66, 7, 1, "", "augment_prompt"], [66, 6, 1, "", "augment_request_template"], [66, 6, 1, "", "augment_scoring_template"], [66, 7, 1, "", "find_unique_tags"], [66, 6, 1, "", "firewall_template"], [66, 7, 1, "", "followup_prompt"], [66, 6, 1, "", "followup_request_template"], [66, 6, 1, "", "followup_scoring_template"]], "prompting.validators.prompts.BasePrompt": [[66, 2, 1, "", "extract"], [66, 2, 1, "", "matches_template"], [66, 2, 1, "", "text"]], "prompting.validators.prompts.FirewallPrompt": [[66, 2, 1, "", "detected"], [66, 2, 1, "", "mock_response"]], "prompting.validators.prompts.ScoringPrompt": [[66, 2, 1, "", "extract_score"], [66, 2, 1, "", "mock_response"]], "prompting.validators.reward": [[72, 1, 1, "", "BaseRewardModel"], [72, 1, 1, "", "Blacklist"], [72, 1, 1, "", "DahoasRewardModel"], [72, 1, 1, "", "DefaultRewardFrameworkConfig"], [72, 1, 1, "", "DirectPreferenceRewardModel"], [72, 1, 1, "", "DiversityRewardModel"], [72, 1, 1, "", "NSFWRewardModel"], [72, 1, 1, "", "OpenAssistantRewardModel"], [72, 1, 1, "", "PromptRewardModel"], [72, 1, 1, "", "ReciprocateRewardModel"], [72, 1, 1, "", "RelevanceRewardModel"], [72, 1, 1, "", "RewardModelType"], [67, 0, 0, "-", "blacklist"], [68, 0, 0, "-", "config"], [69, 0, 0, "-", "dahoas"], [70, 0, 0, "-", "diversity"], [71, 0, 0, "-", "dpo"], [73, 0, 0, "-", "nsfw"], [74, 0, 0, "-", "open_assistant"], [75, 0, 0, "-", "prompt"], [76, 0, 0, "-", "reciprocate"], [77, 0, 0, "-", "relevance"], [78, 0, 0, "-", "reward"]], "prompting.validators.reward.BaseRewardModel": [[72, 2, 1, "", "__repr__"], [72, 2, 1, "", "__str__"], [72, 2, 1, "", "apply"], [72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 2, 1, "", "normalize_rewards"]], "prompting.validators.reward.Blacklist": [[72, 2, 1, "", "_add_ngrams"], [72, 2, 1, "", "add"], [72, 2, 1, "", "calculate_significance"], [72, 2, 1, "", "extract_ngrams"], [72, 2, 1, "", "get_rewards"], [72, 2, 1, "", "get_significance"], [72, 2, 1, "", "most_common"], [72, 2, 1, "", "most_significant"], [72, 4, 1, "", "name"], [72, 2, 1, "", "normalize_rewards"], [72, 2, 1, "", "prune"], [72, 2, 1, "", "reset"], [72, 2, 1, "", "reward"], [72, 2, 1, "", "set_counter_to_half"]], "prompting.validators.reward.DahoasRewardModel": [[72, 2, 1, "", "forward"], [72, 2, 1, "", "get_rewards"], [72, 2, 1, "", "load_weights"], [72, 3, 1, "", "model_name"], [72, 4, 1, "", "name"], [72, 2, 1, "", "reward"]], "prompting.validators.reward.DefaultRewardFrameworkConfig": [[72, 3, 1, "", "dahoas_model_weight"], [72, 3, 1, "", "dpo_model_weight"], [72, 3, 1, "", "prompt_model_weight"], [72, 3, 1, "", "reciprocate_model_weight"], [72, 3, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.DirectPreferenceRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 3, 1, "", "reward_model_name"], [72, 2, 1, "", "reward_single"]], "prompting.validators.reward.DiversityRewardModel": [[72, 3, 1, "", "diversity_model_path"], [72, 2, 1, "", "get_batch_rewards"], [72, 2, 1, "", "get_embeddings"], [72, 2, 1, "", "get_historic_rewards"], [72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 2, 1, "", "normalize_rewards"], [72, 2, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.NSFWRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 2, 1, "", "normalize_rewards"], [72, 3, 1, "", "nsfw_filter_model_path"], [72, 2, 1, "", "reward"]], "prompting.validators.reward.OpenAssistantRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 3, 1, "", "reward_model_name"], [72, 2, 1, "", "reward_single"]], "prompting.validators.reward.PromptRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 2, 1, "", "reward"], [72, 3, 1, "", "reward_model_name"]], "prompting.validators.reward.ReciprocateRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 3, 1, "", "revision"], [72, 2, 1, "", "reward"], [72, 3, 1, "", "reward_model_path"]], "prompting.validators.reward.RelevanceRewardModel": [[72, 2, 1, "", "get_rewards"], [72, 4, 1, "", "name"], [72, 2, 1, "", "normalize_rewards"], [72, 2, 1, "", "reward"]], "prompting.validators.reward.RewardModelType": [[72, 3, 1, "", "blacklist"], [72, 3, 1, "", "dahoas"], [72, 3, 1, "", "diversity"], [72, 3, 1, "", "dpo"], [72, 3, 1, "", "keyword_match"], [72, 3, 1, "", "nsfw"], [72, 3, 1, "", "prompt"], [72, 3, 1, "", "reciprocate"], [72, 3, 1, "", "relevance"], [72, 3, 1, "", "relevance_bert"], [72, 3, 1, "", "relevance_mpnet"], [72, 3, 1, "", "rlhf"], [72, 3, 1, "", "task_validator"]], "prompting.validators.reward.blacklist": [[67, 1, 1, "", "Blacklist"], [67, 1, 1, "", "BlacklistRewardEvent"]], "prompting.validators.reward.blacklist.Blacklist": [[67, 2, 1, "", "_add_ngrams"], [67, 2, 1, "", "add"], [67, 2, 1, "", "calculate_significance"], [67, 2, 1, "", "extract_ngrams"], [67, 2, 1, "", "get_rewards"], [67, 2, 1, "", "get_significance"], [67, 2, 1, "", "most_common"], [67, 2, 1, "", "most_significant"], [67, 4, 1, "", "name"], [67, 2, 1, "", "normalize_rewards"], [67, 2, 1, "", "prune"], [67, 2, 1, "", "reset"], [67, 2, 1, "", "reward"], [67, 2, 1, "", "set_counter_to_half"]], "prompting.validators.reward.blacklist.BlacklistRewardEvent": [[67, 3, 1, "", "matched_ngram"], [67, 3, 1, "", "significance_score"]], "prompting.validators.reward.config": [[68, 1, 1, "", "DefaultRewardFrameworkConfig"], [68, 1, 1, "", "RewardModelType"]], "prompting.validators.reward.config.DefaultRewardFrameworkConfig": [[68, 3, 1, "", "dahoas_model_weight"], [68, 3, 1, "", "dpo_model_weight"], [68, 3, 1, "", "prompt_model_weight"], [68, 3, 1, "", "reciprocate_model_weight"], [68, 3, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.config.RewardModelType": [[68, 3, 1, "", "blacklist"], [68, 3, 1, "", "dahoas"], [68, 3, 1, "", "diversity"], [68, 3, 1, "", "dpo"], [68, 3, 1, "", "keyword_match"], [68, 3, 1, "", "nsfw"], [68, 3, 1, "", "prompt"], [68, 3, 1, "", "reciprocate"], [68, 3, 1, "", "relevance"], [68, 3, 1, "", "relevance_bert"], [68, 3, 1, "", "relevance_mpnet"], [68, 3, 1, "", "rlhf"], [68, 3, 1, "", "task_validator"]], "prompting.validators.reward.dahoas": [[69, 1, 1, "", "DahoasRewardModel"]], "prompting.validators.reward.dahoas.DahoasRewardModel": [[69, 2, 1, "", "forward"], [69, 2, 1, "", "get_rewards"], [69, 2, 1, "", "load_weights"], [69, 3, 1, "", "model_name"], [69, 4, 1, "", "name"], [69, 2, 1, "", "reward"]], "prompting.validators.reward.diversity": [[70, 1, 1, "", "DiversityRewardEvent"], [70, 1, 1, "", "DiversityRewardModel"], [70, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.diversity.DiversityRewardEvent": [[70, 3, 1, "", "batch"], [70, 3, 1, "", "historic"]], "prompting.validators.reward.diversity.DiversityRewardModel": [[70, 3, 1, "", "diversity_model_path"], [70, 2, 1, "", "get_batch_rewards"], [70, 2, 1, "", "get_embeddings"], [70, 2, 1, "", "get_historic_rewards"], [70, 2, 1, "", "get_rewards"], [70, 4, 1, "", "name"], [70, 2, 1, "", "normalize_rewards"], [70, 2, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.dpo": [[71, 1, 1, "", "DirectPreferenceRewardModel"]], "prompting.validators.reward.dpo.DirectPreferenceRewardModel": [[71, 2, 1, "", "get_rewards"], [71, 4, 1, "", "name"], [71, 3, 1, "", "reward_model_name"], [71, 2, 1, "", "reward_single"]], "prompting.validators.reward.nsfw": [[73, 1, 1, "", "NSFWRewardEvent"], [73, 1, 1, "", "NSFWRewardModel"]], "prompting.validators.reward.nsfw.NSFWRewardEvent": [[73, 3, 1, "", "score"]], "prompting.validators.reward.nsfw.NSFWRewardModel": [[73, 2, 1, "", "get_rewards"], [73, 4, 1, "", "name"], [73, 2, 1, "", "normalize_rewards"], [73, 3, 1, "", "nsfw_filter_model_path"], [73, 2, 1, "", "reward"]], "prompting.validators.reward.open_assistant": [[74, 1, 1, "", "OpenAssistantRewardModel"]], "prompting.validators.reward.open_assistant.OpenAssistantRewardModel": [[74, 2, 1, "", "get_rewards"], [74, 4, 1, "", "name"], [74, 3, 1, "", "reward_model_name"], [74, 2, 1, "", "reward_single"]], "prompting.validators.reward.prompt": [[75, 1, 1, "", "PromptRewardModel"]], "prompting.validators.reward.prompt.PromptRewardModel": [[75, 2, 1, "", "get_rewards"], [75, 4, 1, "", "name"], [75, 2, 1, "", "reward"], [75, 3, 1, "", "reward_model_name"]], "prompting.validators.reward.reciprocate": [[76, 1, 1, "", "ReciprocateRewardModel"]], "prompting.validators.reward.reciprocate.ReciprocateRewardModel": [[76, 2, 1, "", "get_rewards"], [76, 4, 1, "", "name"], [76, 3, 1, "", "revision"], [76, 2, 1, "", "reward"], [76, 3, 1, "", "reward_model_path"]], "prompting.validators.reward.relevance": [[77, 1, 1, "", "BertRelevanceRewardModel"], [77, 1, 1, "", "MpnetRelevenceModel"], [77, 1, 1, "", "RelevanceRewardEvent"], [77, 1, 1, "", "RelevanceRewardModel"], [77, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.relevance.BertRelevanceRewardModel": [[77, 2, 1, "", "get_embedding"], [77, 4, 1, "", "name"], [77, 3, 1, "", "relevance_model_path"], [77, 2, 1, "", "reward"]], "prompting.validators.reward.relevance.MpnetRelevenceModel": [[77, 3, 1, "", "diversity_model_path"], [77, 2, 1, "", "get_embeddings"], [77, 4, 1, "", "name"], [77, 2, 1, "", "reward"]], "prompting.validators.reward.relevance.RelevanceRewardEvent": [[77, 3, 1, "", "bert_score"], [77, 3, 1, "", "mpnet_score"]], "prompting.validators.reward.relevance.RelevanceRewardModel": [[77, 2, 1, "", "get_rewards"], [77, 4, 1, "", "name"], [77, 2, 1, "", "normalize_rewards"], [77, 2, 1, "", "reward"]], "prompting.validators.reward.reward": [[78, 1, 1, "", "BaseRewardEvent"], [78, 1, 1, "", "BaseRewardModel"]], "prompting.validators.reward.reward.BaseRewardEvent": [[78, 3, 1, "", "normalized_reward"], [78, 2, 1, "", "parse_reward_events"], [78, 3, 1, "", "reward"]], "prompting.validators.reward.reward.BaseRewardModel": [[78, 2, 1, "", "__repr__"], [78, 2, 1, "", "__str__"], [78, 2, 1, "", "apply"], [78, 2, 1, "", "get_rewards"], [78, 4, 1, "", "name"], [78, 2, 1, "", "normalize_rewards"]], "prompting.validators.tasks": [[79, 1, 1, "", "QuestionAnswerTask"], [79, 1, 1, "", "QuestionGenerationTask"], [79, 1, 1, "", "SummaryTask"], [79, 1, 1, "", "Task"], [79, 7, 1, "", "create_qa_task"], [79, 7, 1, "", "create_qg_task"], [79, 7, 1, "", "create_summarization_task"]], "prompting.validators.tasks.QuestionAnswerTask": [[79, 2, 1, "", "compose_prompt"]], "prompting.validators.tasks.QuestionGenerationTask": [[79, 2, 1, "", "compose_prompt"]], "prompting.validators.tasks.SummaryTask": [[79, 2, 1, "", "compose_prompt"]], "prompting.validators.tasks.Task": [[79, 3, 1, "", "base_text"], [79, 2, 1, "", "compose_prompt"], [79, 3, 1, "", "criteria"], [79, 3, 1, "", "task_name"], [79, 3, 1, "", "task_type"]], "prompting.validators.utils": [[80, 7, 1, "", "check_uid_availability"], [80, 7, 1, "", "checkpoint"], [80, 7, 1, "", "init_wandb"], [80, 7, 1, "", "load_state"], [80, 7, 1, "", "reinit_wandb"], [80, 7, 1, "", "resync_linear_layer"], [80, 7, 1, "", "resync_metagraph"], [80, 7, 1, "", "save_state"], [80, 7, 1, "", "should_checkpoint"], [80, 7, 1, "", "should_reinit_wandb"]], "prompting.validators.weights": [[81, 7, 1, "", "set_weights"], [81, 7, 1, "", "should_set_weights"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:exception", "6": "py:data", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "data", "Python data"], "7": ["py", "function", "Python function"]}, "titleterms": {"bittensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 82], "axon": 0, "modul": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "content": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "class": [0, 1, 2, 3, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 38, 40, 43, 47, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "exampl": [0, 18], "usag": [0, 18], "chain_data": 1, "function": [1, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 31, 32, 33, 35, 36, 37, 38, 43, 44, 45, 48, 49, 50, 53, 57, 60, 66, 70, 77, 79, 80, 81], "attribut": [1, 2, 5, 11, 14, 18, 19, 20, 23, 25, 26, 31, 35, 37, 40, 66], "config": [2, 45, 53, 68], "dendrit": 3, "error": 4, "extrins": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "deleg": 5, "submodul": [6, 18, 31, 42, 46, 51, 59, 62, 72], "log_util": 7, "network": [8, 32], "prometheu": 9, "registr": [10, 33], "root": 11, "senat": 12, "serv": 13, "set_weight": [14, 50], "stake": 15, "transfer": 16, "unstak": 17, "subpackag": [18, 41, 51, 59], "packag": [18, 31, 51, 59, 62, 72], "keyfil": 19, "log": 20, "metagraph": 21, "stream": 22, "subtensor": 23, "synaps": 24, "tensor": 25, "threadpool": 26, "type": 27, "util": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 80], "_register_cuda": 28, "balanc": 29, "format": 30, "stat": 34, "test_util": 35, "wallet_util": 36, "weight_util": 37, "wallet": 38, "api": [39, 82], "refer": 39, "miner": [40, 47], "neuron": [41, 42, 43], "valid": [42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "prompt": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "basemin": [44, 45, 46, 47, 48, 49, 50], "blacklist": [44, 67], "prioriti": 48, "run": 49, "protocol": 52, "criteria": 54, "dataset": 55, "event": 56, "forward": 57, "gate": 58, "misc": 60, "penalti": [61, 62, 63, 64, 65], "content_match": 61, "keyword_match": 63, "task_valid": 65, "reward": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "dahoa": 69, "divers": 70, "dpo": 71, "nsfw": 73, "open_assist": 74, "reciproc": 76, "relev": 77, "task": 79, "weight": 81, "welcom": 82, "document": [82, 83], "updat": 83, "28": 83, "march": 83, "2022": 83, "25": 83, "februari": 83, "05": 83, "novemb": 83, "2021": 83}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Documentation Updates": [[83, "documentation-updates"]], "28 March 2022": [[83, "march-2022"]], "25 February 2022": [[83, "february-2022"]], "05 November 2021": [[83, "november-2021"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"]], "Classes": [[0, "classes"], [1, "classes"], [2, "classes"], [3, "classes"], [7, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [33, "classes"], [34, "classes"], [38, "classes"], [40, "classes"], [43, "classes"], [47, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [58, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"]], "Example usage:": [[0, "example-usage"], [18, "example-usage"]], "bittensor.chain_data": [[1, "module-bittensor.chain_data"]], "Functions": [[1, "functions"], [5, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [19, "functions"], [20, "functions"], [21, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [28, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [48, "functions"], [49, "functions"], [50, "functions"], [53, "functions"], [57, "functions"], [60, "functions"], [66, "functions"], [70, "functions"], [77, "functions"], [79, "functions"], [80, "functions"], [81, "functions"]], "Attributes": [[1, "attributes"], [2, "attributes"], [5, "attributes"], [11, "attributes"], [14, "attributes"], [18, "attributes"], [19, "attributes"], [20, "attributes"], [23, "attributes"], [25, "attributes"], [26, "attributes"], [31, "attributes"], [35, "attributes"], [37, "attributes"], [40, "attributes"], [66, "attributes"]], "bittensor.config": [[2, "module-bittensor.config"]], "bittensor.dendrite": [[3, "module-bittensor.dendrite"]], "bittensor.errors": [[4, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[5, "module-bittensor.extrinsics.delegation"]], "bittensor.extrinsics": [[6, "module-bittensor.extrinsics"]], "Submodules": [[6, "submodules"], [18, "submodules"], [31, "submodules"], [42, "submodules"], [46, "submodules"], [51, "submodules"], [59, "submodules"], [62, "submodules"], [72, "submodules"]], "bittensor.extrinsics.log_utilities": [[7, "module-bittensor.extrinsics.log_utilities"]], "bittensor.extrinsics.network": [[8, "module-bittensor.extrinsics.network"]], "bittensor.extrinsics.prometheus": [[9, "module-bittensor.extrinsics.prometheus"]], "bittensor.extrinsics.registration": [[10, "module-bittensor.extrinsics.registration"]], "bittensor.extrinsics.root": [[11, "module-bittensor.extrinsics.root"]], "bittensor.extrinsics.senate": [[12, "module-bittensor.extrinsics.senate"]], "bittensor.extrinsics.serving": [[13, "module-bittensor.extrinsics.serving"]], "bittensor.extrinsics.set_weights": [[14, "module-bittensor.extrinsics.set_weights"]], "bittensor.extrinsics.staking": [[15, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[16, "module-bittensor.extrinsics.transfer"]], "bittensor.extrinsics.unstaking": [[17, "module-bittensor.extrinsics.unstaking"]], "bittensor": [[18, "module-bittensor"]], "Subpackages": [[18, "subpackages"], [41, "subpackages"], [51, "subpackages"], [59, "subpackages"]], "Package Contents": [[18, "package-contents"], [31, "package-contents"], [51, "package-contents"], [59, "package-contents"], [62, "package-contents"], [72, "package-contents"]], "bittensor.keyfile": [[19, "module-bittensor.keyfile"]], "bittensor.logging": [[20, "module-bittensor.logging"]], "bittensor.metagraph": [[21, "module-bittensor.metagraph"]], "bittensor.stream": [[22, "module-bittensor.stream"]], "bittensor.subtensor": [[23, "module-bittensor.subtensor"]], "bittensor.synapse": [[24, "module-bittensor.synapse"]], "bittensor.tensor": [[25, "module-bittensor.tensor"]], "bittensor.threadpool": [[26, "module-bittensor.threadpool"]], "bittensor.types": [[27, "module-bittensor.types"]], "bittensor.utils._register_cuda": [[28, "module-bittensor.utils._register_cuda"]], "bittensor.utils.balance": [[29, "module-bittensor.utils.balance"]], "bittensor.utils.formatting": [[30, "module-bittensor.utils.formatting"]], "bittensor.utils": [[31, "module-bittensor.utils"]], "bittensor.utils.networking": [[32, "module-bittensor.utils.networking"]], "bittensor.utils.registration": [[33, "module-bittensor.utils.registration"]], "bittensor.utils.stats": [[34, "module-bittensor.utils.stats"]], "bittensor.utils.test_utils": [[35, "module-bittensor.utils.test_utils"]], "bittensor.utils.wallet_utils": [[36, "module-bittensor.utils.wallet_utils"]], "bittensor.utils.weight_utils": [[37, "module-bittensor.utils.weight_utils"]], "bittensor.wallet": [[38, "module-bittensor.wallet"]], "API Reference": [[39, "api-reference"]], "miner": [[40, "module-miner"]], "neurons": [[41, "module-neurons"]], "neurons.validators": [[42, "module-neurons.validators"]], "neurons.validators.validator": [[43, "module-neurons.validators.validator"]], "prompting.baseminer.blacklist": [[44, "module-prompting.baseminer.blacklist"]], "prompting.baseminer.config": [[45, "module-prompting.baseminer.config"]], "prompting.baseminer": [[46, "module-prompting.baseminer"]], "prompting.baseminer.miner": [[47, "module-prompting.baseminer.miner"]], "prompting.baseminer.priority": [[48, "module-prompting.baseminer.priority"]], "prompting.baseminer.run": [[49, "module-prompting.baseminer.run"]], "prompting.baseminer.set_weights": [[50, "module-prompting.baseminer.set_weights"]], "prompting": [[51, "module-prompting"]], "prompting.protocol": [[52, "module-prompting.protocol"]], "prompting.validators.config": [[53, "module-prompting.validators.config"]], "prompting.validators.criteria": [[54, "module-prompting.validators.criteria"]], "prompting.validators.dataset": [[55, "module-prompting.validators.dataset"]], "prompting.validators.event": [[56, "module-prompting.validators.event"]], "prompting.validators.forward": [[57, "module-prompting.validators.forward"]], "prompting.validators.gating": [[58, "module-prompting.validators.gating"]], "prompting.validators": [[59, "module-prompting.validators"]], "prompting.validators.misc": [[60, "module-prompting.validators.misc"]], "prompting.validators.penalty.content_match": [[61, "module-prompting.validators.penalty.content_match"]], "prompting.validators.penalty": [[62, "module-prompting.validators.penalty"]], "prompting.validators.penalty.keyword_match": [[63, "module-prompting.validators.penalty.keyword_match"]], "prompting.validators.penalty.penalty": [[64, "module-prompting.validators.penalty.penalty"]], "prompting.validators.penalty.task_validation": [[65, "module-prompting.validators.penalty.task_validation"]], "prompting.validators.prompts": [[66, "module-prompting.validators.prompts"]], "prompting.validators.reward.blacklist": [[67, "module-prompting.validators.reward.blacklist"]], "prompting.validators.reward.config": [[68, "module-prompting.validators.reward.config"]], "prompting.validators.reward.dahoas": [[69, "module-prompting.validators.reward.dahoas"]], "prompting.validators.reward.diversity": [[70, "module-prompting.validators.reward.diversity"]], "prompting.validators.reward.dpo": [[71, "module-prompting.validators.reward.dpo"]], "prompting.validators.reward": [[72, "module-prompting.validators.reward"]], "prompting.validators.reward.nsfw": [[73, "module-prompting.validators.reward.nsfw"]], "prompting.validators.reward.open_assistant": [[74, "module-prompting.validators.reward.open_assistant"]], "prompting.validators.reward.prompt": [[75, "module-prompting.validators.reward.prompt"]], "prompting.validators.reward.reciprocate": [[76, "module-prompting.validators.reward.reciprocate"]], "prompting.validators.reward.relevance": [[77, "module-prompting.validators.reward.relevance"]], "prompting.validators.reward.reward": [[78, "module-prompting.validators.reward.reward"]], "prompting.validators.tasks": [[79, "module-prompting.validators.tasks"]], "prompting.validators.utils": [[80, "module-prompting.validators.utils"]], "prompting.validators.weights": [[81, "module-prompting.validators.weights"]], "Welcome to Bittensor API Documentation": [[82, "welcome-to-bittensor-api-documentation"]]}, "indexentries": {"axonmiddleware (class in bittensor.axon)": [[0, "bittensor.axon.AxonMiddleware"]], "fastapithreadedserver (class in bittensor.axon)": [[0, "bittensor.axon.FastAPIThreadedServer"]], "__del__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__del__"]], "__repr__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__repr__"]], "__str__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__str__"]], "_wrapper_run() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer._wrapper_run"]], "add_args() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.add_args"]], "attach() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.attach"]], "axon (class in bittensor.axon)": [[0, "bittensor.axon.axon"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "blacklist() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.blacklist"]], "check_config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.check_config"]], "config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.config"]], "default_verify() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.default_verify"]], "dispatch() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.dispatch"]], "help() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.help"]], "info() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.info"]], "install_signal_handlers() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.install_signal_handlers"]], "is_running (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.is_running"]], "module": [[0, "module-bittensor.axon"], [1, "module-bittensor.chain_data"], [2, "module-bittensor.config"], [3, "module-bittensor.dendrite"], [4, "module-bittensor.errors"], [5, "module-bittensor.extrinsics.delegation"], [6, "module-bittensor.extrinsics"], [7, "module-bittensor.extrinsics.log_utilities"], [8, "module-bittensor.extrinsics.network"], [9, "module-bittensor.extrinsics.prometheus"], [10, "module-bittensor.extrinsics.registration"], [11, "module-bittensor.extrinsics.root"], [12, "module-bittensor.extrinsics.senate"], [13, "module-bittensor.extrinsics.serving"], [14, "module-bittensor.extrinsics.set_weights"], [15, "module-bittensor.extrinsics.staking"], [16, "module-bittensor.extrinsics.transfer"], [17, "module-bittensor.extrinsics.unstaking"], [18, "module-bittensor"], [19, "module-bittensor.keyfile"], [20, "module-bittensor.logging"], [21, "module-bittensor.metagraph"], [22, "module-bittensor.stream"], [23, "module-bittensor.subtensor"], [24, "module-bittensor.synapse"], [25, "module-bittensor.tensor"], [26, "module-bittensor.threadpool"], [27, "module-bittensor.types"], [28, "module-bittensor.utils._register_cuda"], [29, "module-bittensor.utils.balance"], [30, "module-bittensor.utils.formatting"], [31, "module-bittensor.utils"], [32, "module-bittensor.utils.networking"], [33, "module-bittensor.utils.registration"], [34, "module-bittensor.utils.stats"], [35, "module-bittensor.utils.test_utils"], [36, "module-bittensor.utils.wallet_utils"], [37, "module-bittensor.utils.weight_utils"], [38, "module-bittensor.wallet"], [40, "module-miner"], [41, "module-neurons"], [42, "module-neurons.validators"], [43, "module-neurons.validators.validator"], [44, "module-prompting.baseminer.blacklist"], [45, "module-prompting.baseminer.config"], [46, "module-prompting.baseminer"], [47, "module-prompting.baseminer.miner"], [48, "module-prompting.baseminer.priority"], [49, "module-prompting.baseminer.run"], [50, "module-prompting.baseminer.set_weights"], [51, "module-prompting"], [52, "module-prompting.protocol"], [53, "module-prompting.validators.config"], [54, "module-prompting.validators.criteria"], [55, "module-prompting.validators.dataset"], [56, "module-prompting.validators.event"], [57, "module-prompting.validators.forward"], [58, "module-prompting.validators.gating"], [59, "module-prompting.validators"], [60, "module-prompting.validators.misc"], [61, "module-prompting.validators.penalty.content_match"], [62, "module-prompting.validators.penalty"], [63, "module-prompting.validators.penalty.keyword_match"], [64, "module-prompting.validators.penalty.penalty"], [65, "module-prompting.validators.penalty.task_validation"], [66, "module-prompting.validators.prompts"], [67, "module-prompting.validators.reward.blacklist"], [68, "module-prompting.validators.reward.config"], [69, "module-prompting.validators.reward.dahoas"], [70, "module-prompting.validators.reward.diversity"], [71, "module-prompting.validators.reward.dpo"], [72, "module-prompting.validators.reward"], [73, "module-prompting.validators.reward.nsfw"], [74, "module-prompting.validators.reward.open_assistant"], [75, "module-prompting.validators.reward.prompt"], [76, "module-prompting.validators.reward.reciprocate"], [77, "module-prompting.validators.reward.relevance"], [78, "module-prompting.validators.reward.reward"], [79, "module-prompting.validators.tasks"], [80, "module-prompting.validators.utils"], [81, "module-prompting.validators.weights"]], "postprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.postprocess"]], "preprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.preprocess"]], "priority() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.priority"]], "run() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.run"]], "run_in_thread() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.run_in_thread"]], "serve() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.serve"]], "should_exit (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.should_exit"]], "start() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.start"]], "start() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.start"]], "stop() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.stop"]], "stop() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.stop"]], "verify() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.verify"]], "verify_body_integrity() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.verify_body_integrity"]], "axoninfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.AxonInfo"]], "chaindatatype (class in bittensor.chain_data)": [[1, "bittensor.chain_data.ChainDataType"]], "delegateinfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.DelegateInfo"]], "delegatedinfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.DelegatedInfo"]], "ipinfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.IPInfo"]], "ipinfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.IPInfo"]], "neuroninfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.NeuronInfo"]], "neuroninfolite (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor.chain_data)": [[1, "bittensor.chain_data.NeuronInfoLite"]], "prometheusinfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.PrometheusInfo"]], "proposalcalldata (in module bittensor.chain_data)": [[1, "bittensor.chain_data.ProposalCallData"]], "proposalvotedata (class in bittensor.chain_data)": [[1, "bittensor.chain_data.ProposalVoteData"]], "raopertao (in module bittensor.chain_data)": [[1, "bittensor.chain_data.RAOPERTAO"]], "stakeinfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.StakeInfo"]], "subnethyperparameters (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor.chain_data)": [[1, "bittensor.chain_data.SubnetHyperparameters"]], "subnetinfo (bittensor.chain_data.chaindatatype attribute)": [[1, "bittensor.chain_data.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor.chain_data)": [[1, "bittensor.chain_data.SubnetInfo"]], "u16_max (in module bittensor.chain_data)": [[1, "bittensor.chain_data.U16_MAX"]], "u64_max (in module bittensor.chain_data)": [[1, "bittensor.chain_data.U64_MAX"]], "__eq__() (bittensor.chain_data.axoninfo method)": [[1, "bittensor.chain_data.AxonInfo.__eq__"]], "__repr__() (bittensor.chain_data.axoninfo method)": [[1, "bittensor.chain_data.AxonInfo.__repr__"]], "__str__() (bittensor.chain_data.axoninfo method)": [[1, "bittensor.chain_data.AxonInfo.__str__"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfo static method)": [[1, "bittensor.chain_data.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfolite static method)": [[1, "bittensor.chain_data.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.chain_data.neuroninfo static method)": [[1, "bittensor.chain_data.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.chain_data.neuroninfolite static method)": [[1, "bittensor.chain_data.NeuronInfoLite._null_neuron"]], "active (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.active"]], "active (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.active"]], "activity_cutoff (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.activity_cutoff"]], "adjustment_interval (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.adjustment_interval"]], "axon_info (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.axon_info"]], "axon_info (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.axon_info"]], "ayes (bittensor.chain_data.proposalvotedata attribute)": [[1, "bittensor.chain_data.ProposalVoteData.ayes"]], "bittensor.chain_data": [[1, "module-bittensor.chain_data"]], "block (bittensor.chain_data.prometheusinfo attribute)": [[1, "bittensor.chain_data.PrometheusInfo.block"]], "blocks_since_epoch (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.blocks_since_epoch"]], "bonds (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.bonds"]], "bonds_moving_avg (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.bonds_moving_avg"]], "burn (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.burn"]], "coldkey (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.coldkey"]], "coldkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[1, "bittensor.chain_data.StakeInfo.coldkey_ss58"]], "connection_requirements (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.connection_requirements"]], "consensus (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.consensus"]], "consensus (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.consensus"]], "custom_rpc_type_registry (in module bittensor.chain_data)": [[1, "bittensor.chain_data.custom_rpc_type_registry"]], "delegated_list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[1, "bittensor.chain_data.DelegateInfo.delegated_list_from_vec_u8"]], "difficulty (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.difficulty"]], "dividends (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.dividends"]], "dividends (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.dividends"]], "emission (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.emission"]], "emission (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.emission"]], "emission_value (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.emission_value"]], "encode() (bittensor.chain_data.ipinfo method)": [[1, "bittensor.chain_data.IPInfo.encode"]], "end (bittensor.chain_data.proposalvotedata attribute)": [[1, "bittensor.chain_data.ProposalVoteData.end"]], "fix_decoded_values() (bittensor.chain_data.delegateinfo class method)": [[1, "bittensor.chain_data.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.ipinfo class method)": [[1, "bittensor.chain_data.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfo class method)": [[1, "bittensor.chain_data.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfolite class method)": [[1, "bittensor.chain_data.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.prometheusinfo class method)": [[1, "bittensor.chain_data.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.stakeinfo class method)": [[1, "bittensor.chain_data.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnethyperparameters class method)": [[1, "bittensor.chain_data.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnetinfo class method)": [[1, "bittensor.chain_data.SubnetInfo.fix_decoded_values"]], "from_neuron_info() (bittensor.chain_data.axoninfo class method)": [[1, "bittensor.chain_data.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.chain_data.axoninfo class method)": [[1, "bittensor.chain_data.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.ipinfo class method)": [[1, "bittensor.chain_data.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnethyperparameters class method)": [[1, "bittensor.chain_data.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnetinfo class method)": [[1, "bittensor.chain_data.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor.chain_data)": [[1, "bittensor.chain_data.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor.chain_data)": [[1, "bittensor.chain_data.from_scale_encoding_using_type_string"]], "from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[1, "bittensor.chain_data.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[1, "bittensor.chain_data.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[1, "bittensor.chain_data.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[1, "bittensor.chain_data.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[1, "bittensor.chain_data.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[1, "bittensor.chain_data.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[1, "bittensor.chain_data.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.chain_data.neuroninfo class method)": [[1, "bittensor.chain_data.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "hotkey (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.hotkey"]], "hotkey_ss58 (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[1, "bittensor.chain_data.StakeInfo.hotkey_ss58"]], "immunity_period (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.immunity_period"]], "incentive (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.incentive"]], "incentive (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.incentive"]], "index (bittensor.chain_data.proposalvotedata attribute)": [[1, "bittensor.chain_data.ProposalVoteData.index"]], "ip (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.ip"]], "ip (bittensor.chain_data.ipinfo attribute)": [[1, "bittensor.chain_data.IPInfo.ip"]], "ip (bittensor.chain_data.prometheusinfo attribute)": [[1, "bittensor.chain_data.PrometheusInfo.ip"]], "ip_str() (bittensor.chain_data.axoninfo method)": [[1, "bittensor.chain_data.AxonInfo.ip_str"]], "ip_type (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.ip_type"]], "ip_type (bittensor.chain_data.ipinfo attribute)": [[1, "bittensor.chain_data.IPInfo.ip_type"]], "ip_type (bittensor.chain_data.prometheusinfo attribute)": [[1, "bittensor.chain_data.PrometheusInfo.ip_type"]], "is_null (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.is_null"]], "is_null (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.is_null"]], "is_serving (bittensor.chain_data.axoninfo property)": [[1, "bittensor.chain_data.AxonInfo.is_serving"]], "kappa (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.kappa"]], "kappa (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.kappa"]], "last_update (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.last_update"]], "last_update (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.last_update"]], "list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[1, "bittensor.chain_data.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[1, "bittensor.chain_data.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[1, "bittensor.chain_data.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[1, "bittensor.chain_data.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[1, "bittensor.chain_data.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[1, "bittensor.chain_data.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[1, "bittensor.chain_data.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[1, "bittensor.chain_data.StakeInfo.list_of_tuple_from_vec_u8"]], "max_allowed_validators (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.max_allowed_validators"]], "max_burn (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.max_n"]], "max_regs_per_block (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.max_weight_limit"]], "min_allowed_weights (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.min_allowed_weights"]], "min_burn (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.modality"]], "nays (bittensor.chain_data.proposalvotedata attribute)": [[1, "bittensor.chain_data.ProposalVoteData.nays"]], "netuid (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.netuid"]], "netuid (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.netuid"]], "netuid (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.netuid"]], "nominators (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.nominators"]], "owner_ss58 (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.owner_ss58"]], "placeholder1 (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.placeholder1"]], "placeholder2 (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.placeholder2"]], "port (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.port"]], "port (bittensor.chain_data.prometheusinfo attribute)": [[1, "bittensor.chain_data.PrometheusInfo.port"]], "prometheus_info (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.protocol"]], "protocol (bittensor.chain_data.ipinfo attribute)": [[1, "bittensor.chain_data.IPInfo.protocol"]], "pruning_score (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.pruning_score"]], "pruning_score (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.pruning_score"]], "rank (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.rank"]], "rank (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.rank"]], "registration_allowed (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.registrations"]], "return_per_1000 (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.return_per_1000"]], "rho (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.rho"]], "rho (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.rho"]], "scaling_law_power (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.scaling_law_power"]], "stake (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.stake"]], "stake (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.stake"]], "stake (bittensor.chain_data.stakeinfo attribute)": [[1, "bittensor.chain_data.StakeInfo.stake"]], "stake_dict (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.stake_dict"]], "stake_dict (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.stake_dict"]], "subnetwork_n (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.subnetwork_n"]], "take (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.take"]], "target_regs_per_interval (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.tempo"]], "tempo (bittensor.chain_data.subnetinfo attribute)": [[1, "bittensor.chain_data.SubnetInfo.tempo"]], "threshold (bittensor.chain_data.proposalvotedata attribute)": [[1, "bittensor.chain_data.ProposalVoteData.threshold"]], "to_parameter_dict() (bittensor.chain_data.axoninfo method)": [[1, "bittensor.chain_data.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.ipinfo method)": [[1, "bittensor.chain_data.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnethyperparameters method)": [[1, "bittensor.chain_data.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnetinfo method)": [[1, "bittensor.chain_data.SubnetInfo.to_parameter_dict"]], "total_daily_return (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.total_daily_return"]], "total_stake (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.total_stake"]], "trust (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.trust"]], "trust (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.trust"]], "uid (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.uid"]], "uid (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.uid"]], "validator_permit (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.validator_permit"]], "validator_permit (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.chain_data.delegateinfo attribute)": [[1, "bittensor.chain_data.DelegateInfo.validator_permits"]], "validator_trust (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.validator_trust"]], "validator_trust (bittensor.chain_data.neuroninfolite attribute)": [[1, "bittensor.chain_data.NeuronInfoLite.validator_trust"]], "version (bittensor.chain_data.axoninfo attribute)": [[1, "bittensor.chain_data.AxonInfo.version"]], "version (bittensor.chain_data.prometheusinfo attribute)": [[1, "bittensor.chain_data.PrometheusInfo.version"]], "weights (bittensor.chain_data.neuroninfo attribute)": [[1, "bittensor.chain_data.NeuronInfo.weights"]], "weights_rate_limit (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.chain_data.subnethyperparameters attribute)": [[1, "bittensor.chain_data.SubnetHyperparameters.weights_version"]], "defaultconfig (class in bittensor.config)": [[2, "bittensor.config.DefaultConfig"]], "invalidconfigfile": [[2, "bittensor.config.InvalidConfigFile"], [18, "bittensor.InvalidConfigFile"]], "t (in module bittensor.config)": [[2, "bittensor.config.T"]], "__deepcopy__() (bittensor.config.config method)": [[2, "bittensor.config.config.__deepcopy__"]], "__is_set (bittensor.config.config attribute)": [[2, "bittensor.config.config.__is_set"]], "__parse_args__() (bittensor.config.config static method)": [[2, "bittensor.config.config.__parse_args__"]], "__repr__() (bittensor.config.config method)": [[2, "bittensor.config.config.__repr__"]], "__split_params__() (bittensor.config.config static method)": [[2, "bittensor.config.config.__split_params__"]], "__str__() (bittensor.config.config method)": [[2, "bittensor.config.config.__str__"]], "_merge() (bittensor.config.config class method)": [[2, "bittensor.config.config._merge"]], "bittensor.config": [[2, "module-bittensor.config"]], "config (class in bittensor.config)": [[2, "bittensor.config.config"]], "copy() (bittensor.config.config method)": [[2, "bittensor.config.config.copy"]], "default() (bittensor.config.defaultconfig class method)": [[2, "bittensor.config.DefaultConfig.default"]], "is_set() (bittensor.config.config method)": [[2, "bittensor.config.config.is_set"]], "merge() (bittensor.config.config method)": [[2, "bittensor.config.config.merge"]], "merge_all() (bittensor.config.config class method)": [[2, "bittensor.config.config.merge_all"]], "to_string() (bittensor.config.config method)": [[2, "bittensor.config.config.to_string"]], "update_with_kwargs() (bittensor.config.config method)": [[2, "bittensor.config.config.update_with_kwargs"]], "__aenter__() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.__aexit__"]], "__del__() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.__del__"]], "__repr__() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.__repr__"], [3, "id9"]], "__str__() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.__str__"], [3, "id8"]], "_get_endpoint_url() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite._handle_request_errors"]], "_log_incoming_response() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite._log_outgoing_request"]], "aclose_session() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.aclose_session"], [3, "id1"]], "bittensor.dendrite": [[3, "module-bittensor.dendrite"]], "call() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.call"], [3, "id4"]], "call_stream() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.call_stream"], [3, "id5"]], "close_session() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.close_session"], [3, "id0"]], "dendrite (class in bittensor.dendrite)": [[3, "bittensor.dendrite.dendrite"]], "external_ip (bittensor.dendrite.dendrite attribute)": [[3, "bittensor.dendrite.dendrite.external_ip"]], "forward() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.forward"], [3, "id3"]], "keypair (bittensor.dendrite.dendrite attribute)": [[3, "bittensor.dendrite.dendrite.keypair"]], "preprocess_synapse_for_request() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.preprocess_synapse_for_request"], [3, "id6"]], "process_server_response() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.process_server_response"], [3, "id7"]], "query() (bittensor.dendrite.dendrite method)": [[3, "bittensor.dendrite.dendrite.query"], [3, "id2"]], "session (bittensor.dendrite.dendrite property)": [[3, "bittensor.dendrite.dendrite.session"]], "synapse_history (bittensor.dendrite.dendrite attribute)": [[3, "bittensor.dendrite.dendrite.synapse_history"]], "chainconnectionerror": [[4, "bittensor.errors.ChainConnectionError"], [18, "bittensor.ChainConnectionError"]], "chainerror": [[4, "bittensor.errors.ChainError"], [18, "bittensor.ChainError"]], "chainqueryerror": [[4, "bittensor.errors.ChainQueryError"], [18, "bittensor.ChainQueryError"]], "chaintransactionerror": [[4, "bittensor.errors.ChainTransactionError"], [18, "bittensor.ChainTransactionError"]], "keyfileerror": [[4, "bittensor.errors.KeyFileError"], [18, "bittensor.KeyFileError"], [18, "id0"]], "nominationerror": [[4, "bittensor.errors.NominationError"], [18, "bittensor.NominationError"]], "notdelegateerror": [[4, "bittensor.errors.NotDelegateError"], [18, "bittensor.NotDelegateError"]], "notregisterederror": [[4, "bittensor.errors.NotRegisteredError"], [18, "bittensor.NotRegisteredError"]], "registrationerror": [[4, "bittensor.errors.RegistrationError"], [18, "bittensor.RegistrationError"]], "stakeerror": [[4, "bittensor.errors.StakeError"], [18, "bittensor.StakeError"]], "transfererror": [[4, "bittensor.errors.TransferError"], [18, "bittensor.TransferError"]], "unstakeerror": [[4, "bittensor.errors.UnstakeError"], [18, "bittensor.UnstakeError"]], "bittensor.errors": [[4, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[5, "module-bittensor.extrinsics.delegation"]], "delegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[5, "bittensor.extrinsics.delegation.delegate_extrinsic"]], "logger (in module bittensor.extrinsics.delegation)": [[5, "bittensor.extrinsics.delegation.logger"]], "nominate_extrinsic() (in module bittensor.extrinsics.delegation)": [[5, "bittensor.extrinsics.delegation.nominate_extrinsic"]], "undelegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[5, "bittensor.extrinsics.delegation.undelegate_extrinsic"]], "bittensor.extrinsics": [[6, "module-bittensor.extrinsics"]], "validatorlogger (class in bittensor.extrinsics.log_utilities)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger"]], "validatorprometheus (class in bittensor.extrinsics.log_utilities)": [[7, "bittensor.extrinsics.log_utilities.ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities": [[7, "module-bittensor.extrinsics.log_utilities"]], "log_epoch_end() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_end"]], "log_epoch_start() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_start"]], "log_run_info() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_run_info"]], "log_step() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_step"]], "print_console_metagraph_status() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_metagraph_status"]], "print_console_query_summary() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_query_summary"]], "print_console_subtensor_weight() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_subtensor_weight"]], "print_console_validator_identifier() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_validator_identifier"]], "print_response_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_response_table"]], "print_stats_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_stats_table"]], "print_synapse_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synapse_table"]], "print_synergy_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synergy_table"]], "print_weights_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[7, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_weights_table"]], "bittensor.extrinsics.network": [[8, "module-bittensor.extrinsics.network"]], "register_subnetwork_extrinsic() (in module bittensor.extrinsics.network)": [[8, "bittensor.extrinsics.network.register_subnetwork_extrinsic"]], "set_hyperparameter_extrinsic() (in module bittensor.extrinsics.network)": [[8, "bittensor.extrinsics.network.set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[9, "module-bittensor.extrinsics.prometheus"]], "prometheus_extrinsic() (in module bittensor.extrinsics.prometheus)": [[9, "bittensor.extrinsics.prometheus.prometheus_extrinsic"]], "maxattemptsexception": [[10, "bittensor.extrinsics.registration.MaxAttemptsException"]], "maxsuccessexception": [[10, "bittensor.extrinsics.registration.MaxSuccessException"]], "bittensor.extrinsics.registration": [[10, "module-bittensor.extrinsics.registration"]], "burned_register_extrinsic() (in module bittensor.extrinsics.registration)": [[10, "bittensor.extrinsics.registration.burned_register_extrinsic"]], "register_extrinsic() (in module bittensor.extrinsics.registration)": [[10, "bittensor.extrinsics.registration.register_extrinsic"]], "run_faucet_extrinsic() (in module bittensor.extrinsics.registration)": [[10, "bittensor.extrinsics.registration.run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[11, "module-bittensor.extrinsics.root"]], "logger (in module bittensor.extrinsics.root)": [[11, "bittensor.extrinsics.root.logger"]], "root_register_extrinsic() (in module bittensor.extrinsics.root)": [[11, "bittensor.extrinsics.root.root_register_extrinsic"]], "set_root_weights_extrinsic() (in module bittensor.extrinsics.root)": [[11, "bittensor.extrinsics.root.set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[12, "module-bittensor.extrinsics.senate"]], "leave_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[12, "bittensor.extrinsics.senate.leave_senate_extrinsic"]], "register_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[12, "bittensor.extrinsics.senate.register_senate_extrinsic"]], "vote_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[12, "bittensor.extrinsics.senate.vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[13, "module-bittensor.extrinsics.serving"]], "serve_axon_extrinsic() (in module bittensor.extrinsics.serving)": [[13, "bittensor.extrinsics.serving.serve_axon_extrinsic"]], "serve_extrinsic() (in module bittensor.extrinsics.serving)": [[13, "bittensor.extrinsics.serving.serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[14, "module-bittensor.extrinsics.set_weights"]], "logger (in module bittensor.extrinsics.set_weights)": [[14, "bittensor.extrinsics.set_weights.logger"]], "set_weights_extrinsic() (in module bittensor.extrinsics.set_weights)": [[14, "bittensor.extrinsics.set_weights.set_weights_extrinsic"]], "__do_add_stake_single() (in module bittensor.extrinsics.staking)": [[15, "bittensor.extrinsics.staking.__do_add_stake_single"]], "add_stake_extrinsic() (in module bittensor.extrinsics.staking)": [[15, "bittensor.extrinsics.staking.add_stake_extrinsic"]], "add_stake_multiple_extrinsic() (in module bittensor.extrinsics.staking)": [[15, "bittensor.extrinsics.staking.add_stake_multiple_extrinsic"]], "bittensor.extrinsics.staking": [[15, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[16, "module-bittensor.extrinsics.transfer"]], "transfer_extrinsic() (in module bittensor.extrinsics.transfer)": [[16, "bittensor.extrinsics.transfer.transfer_extrinsic"]], "__do_remove_stake_single() (in module bittensor.extrinsics.unstaking)": [[17, "bittensor.extrinsics.unstaking.__do_remove_stake_single"]], "bittensor.extrinsics.unstaking": [[17, "module-bittensor.extrinsics.unstaking"]], "unstake_extrinsic() (in module bittensor.extrinsics.unstaking)": [[17, "bittensor.extrinsics.unstaking.unstake_extrinsic"]], "unstake_multiple_extrinsic() (in module bittensor.extrinsics.unstaking)": [[17, "bittensor.extrinsics.unstaking.unstake_multiple_extrinsic"]], "axoninfo (class in bittensor)": [[18, "bittensor.AxonInfo"]], "b (bittensor.metagraph property)": [[18, "bittensor.metagraph.B"]], "btstreamingresponsemodel (class in bittensor)": [[18, "bittensor.BTStreamingResponseModel"]], "balance (class in bittensor)": [[18, "bittensor.Balance"], [18, "id11"]], "c (bittensor.metagraph property)": [[18, "bittensor.metagraph.C"]], "chaindatatype (class in bittensor)": [[18, "bittensor.ChainDataType"]], "d (bittensor.metagraph property)": [[18, "bittensor.metagraph.D"]], "defaultconfig (class in bittensor)": [[18, "bittensor.DefaultConfig"]], "delegateinfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor)": [[18, "bittensor.DelegateInfo"]], "delegatedinfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.DelegatedInfo"]], "e (bittensor.metagraph property)": [[18, "bittensor.metagraph.E"]], "i (bittensor.metagraph property)": [[18, "bittensor.metagraph.I"]], "ipinfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.IPInfo"]], "ipinfo (class in bittensor)": [[18, "bittensor.IPInfo"]], "mockkeyfile (class in bittensor)": [[18, "bittensor.Mockkeyfile"]], "nacl_salt (in module bittensor)": [[18, "bittensor.NACL_SALT"]], "neuroninfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor)": [[18, "bittensor.NeuronInfo"]], "neuroninfolite (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor)": [[18, "bittensor.NeuronInfoLite"]], "prioritythreadpoolexecutor (class in bittensor)": [[18, "bittensor.PriorityThreadPoolExecutor"]], "prometheusinfo (class in bittensor)": [[18, "bittensor.PrometheusInfo"]], "proposalcalldata (in module bittensor)": [[18, "bittensor.ProposalCallData"]], "proposalvotedata (class in bittensor)": [[18, "bittensor.ProposalVoteData"]], "r (bittensor.metagraph property)": [[18, "bittensor.metagraph.R"]], "raopertao (in module bittensor)": [[18, "bittensor.RAOPERTAO"], [18, "id53"]], "s (bittensor.metagraph property)": [[18, "bittensor.metagraph.S"]], "stakeinfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor)": [[18, "bittensor.StakeInfo"]], "streamingsynapse (class in bittensor)": [[18, "bittensor.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor)": [[18, "bittensor.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor)": [[18, "bittensor.StreamingSynapse.Config"]], "subnethyperparameters (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor)": [[18, "bittensor.SubnetHyperparameters"]], "subnetinfo (bittensor.chaindatatype attribute)": [[18, "bittensor.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor)": [[18, "bittensor.SubnetInfo"]], "synapse (class in bittensor)": [[18, "bittensor.Synapse"]], "synapse.config (class in bittensor)": [[18, "bittensor.Synapse.Config"]], "t (bittensor.metagraph property)": [[18, "bittensor.metagraph.T"]], "t (in module bittensor)": [[18, "bittensor.T"]], "torch_dtypes (in module bittensor)": [[18, "bittensor.TORCH_DTYPES"]], "tensor (class in bittensor)": [[18, "bittensor.Tensor"], [18, "bittensor.tensor"]], "tensor.config (class in bittensor)": [[18, "bittensor.Tensor.Config"]], "terminalinfo (class in bittensor)": [[18, "bittensor.TerminalInfo"]], "terminalinfo.config (class in bittensor)": [[18, "bittensor.TerminalInfo.Config"]], "tv (bittensor.metagraph property)": [[18, "bittensor.metagraph.Tv"]], "u16_max (in module bittensor)": [[18, "bittensor.U16_MAX"], [18, "id9"]], "u16_normalized_float() (in module bittensor)": [[18, "bittensor.U16_NORMALIZED_FLOAT"], [18, "id10"]], "u64_max (in module bittensor)": [[18, "bittensor.U64_MAX"], [18, "id54"]], "u64_normalized_float() (in module bittensor)": [[18, "bittensor.U64_NORMALIZED_FLOAT"]], "w (bittensor.metagraph property)": [[18, "bittensor.metagraph.W"]], "__abs__() (bittensor.balance method)": [[18, "bittensor.Balance.__abs__"], [18, "id49"]], "__add__() (bittensor.balance method)": [[18, "bittensor.Balance.__add__"], [18, "id34"]], "__aenter__() (bittensor.dendrite method)": [[18, "bittensor.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite method)": [[18, "bittensor.dendrite.__aexit__"]], "__bellagene_entrypoint__ (in module bittensor)": [[18, "bittensor.__bellagene_entrypoint__"]], "__blocktime__ (in module bittensor)": [[18, "bittensor.__blocktime__"]], "__call__() (bittensor.streamingsynapse.btstreamingresponse method)": [[18, "bittensor.StreamingSynapse.BTStreamingResponse.__call__"]], "__console__ (in module bittensor)": [[18, "bittensor.__console__"]], "__debug_on__ (bittensor.logging attribute)": [[18, "bittensor.logging.__debug_on__"]], "__deepcopy__() (bittensor.config method)": [[18, "bittensor.config.__deepcopy__"]], "__del__() (bittensor.axon method)": [[18, "bittensor.axon.__del__"]], "__del__() (bittensor.dendrite method)": [[18, "bittensor.dendrite.__del__"]], "__delegates_details_url__ (in module bittensor)": [[18, "bittensor.__delegates_details_url__"]], "__eq__() (bittensor.axoninfo method)": [[18, "bittensor.AxonInfo.__eq__"]], "__eq__() (bittensor.balance method)": [[18, "bittensor.Balance.__eq__"], [18, "id28"]], "__file_sink__ (bittensor.logging attribute)": [[18, "bittensor.logging.__file_sink__"]], "__finney_entrypoint__ (in module bittensor)": [[18, "bittensor.__finney_entrypoint__"]], "__finney_test_entrypoint__ (in module bittensor)": [[18, "bittensor.__finney_test_entrypoint__"]], "__float__() (bittensor.balance method)": [[18, "bittensor.Balance.__float__"], [18, "id22"], [18, "id45"], [18, "id8"]], "__floordiv__() (bittensor.balance method)": [[18, "bittensor.Balance.__floordiv__"], [18, "id42"]], "__ge__() (bittensor.balance method)": [[18, "bittensor.Balance.__ge__"], [18, "id33"]], "__gt__() (bittensor.balance method)": [[18, "bittensor.Balance.__gt__"], [18, "id30"]], "__has_been_inited__ (bittensor.logging attribute)": [[18, "bittensor.logging.__has_been_inited__"]], "__int__() (bittensor.balance method)": [[18, "bittensor.Balance.__int__"], [18, "id21"], [18, "id44"], [18, "id7"]], "__is_set (bittensor.config attribute)": [[18, "bittensor.config.__is_set"]], "__le__() (bittensor.balance method)": [[18, "bittensor.Balance.__le__"], [18, "id32"]], "__local_entrypoint__ (in module bittensor)": [[18, "bittensor.__local_entrypoint__"]], "__lt__() (bittensor.balance method)": [[18, "bittensor.Balance.__lt__"], [18, "id31"]], "__mul__() (bittensor.balance method)": [[18, "bittensor.Balance.__mul__"], [18, "id38"]], "__ne__() (bittensor.balance method)": [[18, "bittensor.Balance.__ne__"], [18, "id29"]], "__neg__() (bittensor.balance method)": [[18, "bittensor.Balance.__neg__"], [18, "id47"]], "__network_explorer_map__ (in module bittensor)": [[18, "bittensor.__network_explorer_map__"]], "__networks__ (in module bittensor)": [[18, "bittensor.__networks__"]], "__new_signature_version__ (in module bittensor)": [[18, "bittensor.__new_signature_version__"]], "__nonzero__() (bittensor.balance method)": [[18, "bittensor.Balance.__nonzero__"], [18, "id46"]], "__parse_args__() (bittensor.config static method)": [[18, "bittensor.config.__parse_args__"]], "__pipaddress__ (in module bittensor)": [[18, "bittensor.__pipaddress__"]], "__pos__() (bittensor.balance method)": [[18, "bittensor.Balance.__pos__"], [18, "id48"]], "__radd__() (bittensor.balance method)": [[18, "bittensor.Balance.__radd__"], [18, "id35"]], "__rao_symbol__ (in module bittensor)": [[18, "bittensor.__rao_symbol__"]], "__repr__() (bittensor.axoninfo method)": [[18, "bittensor.AxonInfo.__repr__"]], "__repr__() (bittensor.balance method)": [[18, "bittensor.Balance.__repr__"], [18, "id27"]], "__repr__() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.__repr__"]], "__repr__() (bittensor.axon method)": [[18, "bittensor.axon.__repr__"]], "__repr__() (bittensor.config method)": [[18, "bittensor.config.__repr__"]], "__repr__() (bittensor.dendrite method)": [[18, "bittensor.dendrite.__repr__"], [18, "id82"]], "__repr__() (bittensor.keyfile method)": [[18, "bittensor.keyfile.__repr__"]], "__repr__() (bittensor.metagraph method)": [[18, "bittensor.metagraph.__repr__"]], "__repr__() (bittensor.subtensor method)": [[18, "bittensor.subtensor.__repr__"]], "__repr__() (bittensor.wallet method)": [[18, "bittensor.wallet.__repr__"]], "__rfloordiv__() (bittensor.balance method)": [[18, "bittensor.Balance.__rfloordiv__"], [18, "id43"]], "__rich__() (bittensor.balance method)": [[18, "bittensor.Balance.__rich__"], [18, "id24"]], "__rich_rao__() (bittensor.balance method)": [[18, "bittensor.Balance.__rich_rao__"], [18, "id26"]], "__rmul__() (bittensor.balance method)": [[18, "bittensor.Balance.__rmul__"], [18, "id39"]], "__rsub__() (bittensor.balance method)": [[18, "bittensor.Balance.__rsub__"], [18, "id37"]], "__rtruediv__() (bittensor.balance method)": [[18, "bittensor.Balance.__rtruediv__"], [18, "id41"]], "__setattr__() (bittensor.synapse method)": [[18, "bittensor.Synapse.__setattr__"]], "__split_params__() (bittensor.config static method)": [[18, "bittensor.config.__split_params__"]], "__ss58_address_length__ (in module bittensor)": [[18, "bittensor.__ss58_address_length__"]], "__ss58_format__ (in module bittensor)": [[18, "bittensor.__ss58_format__"]], "__std_sink__ (bittensor.logging attribute)": [[18, "bittensor.logging.__std_sink__"]], "__str__() (bittensor.axoninfo method)": [[18, "bittensor.AxonInfo.__str__"]], "__str__() (bittensor.balance method)": [[18, "bittensor.Balance.__str__"], [18, "id23"]], "__str__() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.__str__"]], "__str__() (bittensor.axon method)": [[18, "bittensor.axon.__str__"]], "__str__() (bittensor.config method)": [[18, "bittensor.config.__str__"]], "__str__() (bittensor.dendrite method)": [[18, "bittensor.dendrite.__str__"], [18, "id81"]], "__str__() (bittensor.keyfile method)": [[18, "bittensor.keyfile.__str__"]], "__str__() (bittensor.metagraph method)": [[18, "bittensor.metagraph.__str__"]], "__str__() (bittensor.subtensor method)": [[18, "bittensor.subtensor.__str__"]], "__str__() (bittensor.wallet method)": [[18, "bittensor.wallet.__str__"]], "__str_rao__() (bittensor.balance method)": [[18, "bittensor.Balance.__str_rao__"], [18, "id25"]], "__sub__() (bittensor.balance method)": [[18, "bittensor.Balance.__sub__"], [18, "id36"]], "__tao_symbol__ (in module bittensor)": [[18, "bittensor.__tao_symbol__"]], "__trace_on__ (bittensor.logging attribute)": [[18, "bittensor.logging.__trace_on__"]], "__truediv__() (bittensor.balance method)": [[18, "bittensor.Balance.__truediv__"], [18, "id40"]], "__type_registry__ (in module bittensor)": [[18, "bittensor.__type_registry__"]], "__use_console__ (in module bittensor)": [[18, "bittensor.__use_console__"]], "__version__ (in module bittensor)": [[18, "bittensor.__version__"]], "__version_as_int__ (in module bittensor)": [[18, "bittensor.__version_as_int__"]], "_adjust_thread_count() (bittensor.prioritythreadpoolexecutor method)": [[18, "bittensor.PriorityThreadPoolExecutor._adjust_thread_count"]], "_assign_neurons() (bittensor.metagraph method)": [[18, "bittensor.metagraph._assign_neurons"]], "_counter (bittensor.prioritythreadpoolexecutor attribute)": [[18, "bittensor.PriorityThreadPoolExecutor._counter"]], "_create_tensor() (bittensor.metagraph method)": [[18, "bittensor.metagraph._create_tensor"]], "_do_associate_ips() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_serve_prometheus"]], "_do_set_weights() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_stake"]], "_do_transfer() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor method)": [[18, "bittensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor method)": [[18, "bittensor.subtensor._encode_params"]], "_extract_dtype (bittensor.tensor attribute)": [[18, "bittensor.Tensor._extract_dtype"]], "_extract_header_size (bittensor.synapse attribute)": [[18, "bittensor.Synapse._extract_header_size"]], "_extract_nonce (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo._extract_process_time"]], "_extract_shape (bittensor.tensor attribute)": [[18, "bittensor.Tensor._extract_shape"]], "_extract_status_code (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse attribute)": [[18, "bittensor.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse attribute)": [[18, "bittensor.Synapse._extract_total_size"]], "_extract_version (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo._extract_version"]], "_format() (bittensor.logging class method)": [[18, "bittensor.logging._format"]], "_get_endpoint_url() (bittensor.dendrite method)": [[18, "bittensor.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite method)": [[18, "bittensor.dendrite._handle_request_errors"]], "_initialize_subtensor() (bittensor.metagraph method)": [[18, "bittensor.metagraph._initialize_subtensor"]], "_initializer_failed() (bittensor.prioritythreadpoolexecutor method)": [[18, "bittensor.PriorityThreadPoolExecutor._initializer_failed"]], "_log_incoming_response() (bittensor.dendrite method)": [[18, "bittensor.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite method)": [[18, "bittensor.dendrite._log_outgoing_request"]], "_may_overwrite() (bittensor.keyfile method)": [[18, "bittensor.keyfile._may_overwrite"]], "_merge() (bittensor.config class method)": [[18, "bittensor.config._merge"]], "_neuron_dict_to_namespace() (bittensor.neuroninfo static method)": [[18, "bittensor.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.neuroninfolite static method)": [[18, "bittensor.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.neuroninfo static method)": [[18, "bittensor.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.neuroninfolite static method)": [[18, "bittensor.NeuronInfoLite._null_neuron"]], "_null_neuron() (bittensor.subtensor static method)": [[18, "bittensor.subtensor._null_neuron"]], "_process_root_weights() (bittensor.metagraph method)": [[18, "bittensor.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph method)": [[18, "bittensor.metagraph._process_weights_or_bonds"]], "_read_keyfile_data_from_file() (bittensor.keyfile method)": [[18, "bittensor.keyfile._read_keyfile_data_from_file"]], "_set_metagraph_attributes() (bittensor.metagraph method)": [[18, "bittensor.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph method)": [[18, "bittensor.metagraph._set_weights_and_bonds"]], "_write_keyfile_data_to_file() (bittensor.keyfile method)": [[18, "bittensor.keyfile._write_keyfile_data_to_file"]], "aclose_session() (bittensor.dendrite method)": [[18, "bittensor.dendrite.aclose_session"], [18, "id74"]], "active (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.active"]], "active (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.active"]], "active (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.active"]], "activity_cutoff (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.activity_cutoff"]], "add_args() (bittensor.prioritythreadpoolexecutor class method)": [[18, "bittensor.PriorityThreadPoolExecutor.add_args"]], "add_args() (bittensor.axon class method)": [[18, "bittensor.axon.add_args"]], "add_args() (bittensor.logging class method)": [[18, "bittensor.logging.add_args"]], "add_args() (bittensor.subtensor class method)": [[18, "bittensor.subtensor.add_args"]], "add_args() (bittensor.wallet class method)": [[18, "bittensor.wallet.add_args"]], "add_stake() (bittensor.subtensor method)": [[18, "bittensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor method)": [[18, "bittensor.subtensor.add_stake_multiple"]], "addresses (bittensor.metagraph property)": [[18, "bittensor.metagraph.addresses"]], "adjustment_interval (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.adjustment_interval"]], "ask_password_to_encrypt() (in module bittensor)": [[18, "bittensor.ask_password_to_encrypt"]], "associated_validator_ip_info() (bittensor.subtensor method)": [[18, "bittensor.subtensor.associated_validator_ip_info"]], "attach() (bittensor.axon method)": [[18, "bittensor.axon.attach"]], "axon (bittensor.synapse attribute)": [[18, "bittensor.Synapse.axon"]], "axon (class in bittensor)": [[18, "bittensor.axon"]], "axon_info (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.axon_info"]], "axon_info (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.axon_info"]], "axons (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.axons"]], "ayes (bittensor.proposalvotedata attribute)": [[18, "bittensor.ProposalVoteData.ayes"]], "bittensor": [[18, "module-bittensor"]], "block (bittensor.prometheusinfo attribute)": [[18, "bittensor.PrometheusInfo.block"]], "block (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.block"]], "block (bittensor.subtensor property)": [[18, "bittensor.subtensor.block"]], "blocks_since_epoch (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.blocks_since_epoch"]], "blocks_since_epoch() (bittensor.subtensor method)": [[18, "bittensor.subtensor.blocks_since_epoch"]], "body_hash (bittensor.synapse property)": [[18, "bittensor.Synapse.body_hash"]], "bonds (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.bonds"]], "bonds (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.bonds"]], "bonds() (bittensor.subtensor method)": [[18, "bittensor.subtensor.bonds"]], "bonds_moving_avg (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.bonds_moving_avg"]], "buffer (bittensor.tensor attribute)": [[18, "bittensor.Tensor.buffer"], [18, "id62"]], "burn (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.burn"]], "burn() (bittensor.subtensor method)": [[18, "bittensor.subtensor.burn"]], "burned_register() (bittensor.subtensor method)": [[18, "bittensor.subtensor.burned_register"]], "call() (bittensor.dendrite method)": [[18, "bittensor.dendrite.call"], [18, "id77"]], "call_stream() (bittensor.dendrite method)": [[18, "bittensor.dendrite.call_stream"], [18, "id78"]], "cast_dtype() (in module bittensor)": [[18, "bittensor.cast_dtype"]], "cast_float() (in module bittensor)": [[18, "bittensor.cast_float"]], "cast_int() (in module bittensor)": [[18, "bittensor.cast_int"]], "cast_shape() (in module bittensor)": [[18, "bittensor.cast_shape"]], "check_and_update_encryption() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile method)": [[18, "bittensor.keyfile.check_and_update_encryption"]], "check_config() (bittensor.axon class method)": [[18, "bittensor.axon.check_config"]], "check_config() (bittensor.logging class method)": [[18, "bittensor.logging.check_config"]], "close_session() (bittensor.dendrite method)": [[18, "bittensor.dendrite.close_session"], [18, "id73"]], "coldkey (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.coldkey"]], "coldkey (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.coldkey"]], "coldkey (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.coldkey"]], "coldkey (bittensor.wallet property)": [[18, "bittensor.wallet.coldkey"]], "coldkey_file (bittensor.wallet property)": [[18, "bittensor.wallet.coldkey_file"]], "coldkey_ss58 (bittensor.stakeinfo attribute)": [[18, "bittensor.StakeInfo.coldkey_ss58"]], "coldkeypub (bittensor.wallet property)": [[18, "bittensor.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet property)": [[18, "bittensor.wallet.coldkeypub_file"]], "coldkeys (bittensor.metagraph property)": [[18, "bittensor.metagraph.coldkeys"]], "computed_body_hash (bittensor.synapse attribute)": [[18, "bittensor.Synapse.computed_body_hash"]], "config (class in bittensor)": [[18, "bittensor.config"]], "config() (bittensor.prioritythreadpoolexecutor class method)": [[18, "bittensor.PriorityThreadPoolExecutor.config"]], "config() (bittensor.axon class method)": [[18, "bittensor.axon.config"]], "config() (bittensor.logging class method)": [[18, "bittensor.logging.config"]], "config() (bittensor.subtensor static method)": [[18, "bittensor.subtensor.config"]], "config() (bittensor.wallet class method)": [[18, "bittensor.wallet.config"]], "configs (in module bittensor)": [[18, "bittensor.configs"]], "connection_requirements (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.connection_requirements"]], "consensus (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.consensus"]], "consensus (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.consensus"]], "consensus (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.consensus"]], "copy() (bittensor.config method)": [[18, "bittensor.config.copy"]], "create() (bittensor.wallet method)": [[18, "bittensor.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet method)": [[18, "bittensor.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet method)": [[18, "bittensor.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet method)": [[18, "bittensor.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet method)": [[18, "bittensor.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet method)": [[18, "bittensor.wallet.create_new_hotkey"]], "create_pow() (in module bittensor)": [[18, "bittensor.create_pow"]], "create_streaming_response() (bittensor.streamingsynapse method)": [[18, "bittensor.StreamingSynapse.create_streaming_response"]], "custom_rpc_type_registry (in module bittensor)": [[18, "bittensor.custom_rpc_type_registry"]], "data (bittensor.mockkeyfile property)": [[18, "bittensor.Mockkeyfile.data"]], "data (bittensor.keyfile property)": [[18, "bittensor.keyfile.data"]], "debug() (bittensor.logging class method)": [[18, "bittensor.logging.debug"]], "debug() (in module bittensor)": [[18, "bittensor.debug"]], "decrypt() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile method)": [[18, "bittensor.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor)": [[18, "bittensor.decrypt_keyfile_data"]], "default() (bittensor.defaultconfig class method)": [[18, "bittensor.DefaultConfig.default"]], "default_verify() (bittensor.axon method)": [[18, "bittensor.axon.default_verify"]], "defaults (in module bittensor)": [[18, "bittensor.defaults"]], "delegate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.delegate"]], "delegated_list_from_vec_u8() (bittensor.delegateinfo class method)": [[18, "bittensor.DelegateInfo.delegated_list_from_vec_u8"]], "dendrite (bittensor.synapse attribute)": [[18, "bittensor.Synapse.dendrite"]], "dendrite (class in bittensor)": [[18, "bittensor.dendrite"]], "deserialize() (bittensor.synapse method)": [[18, "bittensor.Synapse.deserialize"]], "deserialize() (bittensor.tensor method)": [[18, "bittensor.Tensor.deserialize"]], "deserialize_keypair_from_keyfile_data() (in module bittensor)": [[18, "bittensor.deserialize_keypair_from_keyfile_data"]], "determine_chain_endpoint_and_network() (bittensor.subtensor static method)": [[18, "bittensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.difficulty"]], "difficulty() (bittensor.subtensor method)": [[18, "bittensor.subtensor.difficulty"]], "display_mnemonic_msg() (in module bittensor)": [[18, "bittensor.display_mnemonic_msg"]], "dividends (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.dividends"]], "dividends (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.dividends"]], "dividends (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.dividends"]], "does_hotkey_exist() (bittensor.subtensor method)": [[18, "bittensor.subtensor.does_hotkey_exist"]], "dtype (bittensor.tensor attribute)": [[18, "bittensor.Tensor.dtype"], [18, "id63"]], "emission (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.emission"]], "emission (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.emission"]], "emission (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.emission"]], "emission_value (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.emission_value"]], "encode() (bittensor.ipinfo method)": [[18, "bittensor.IPInfo.encode"]], "encrypt() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile method)": [[18, "bittensor.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor)": [[18, "bittensor.encrypt_keyfile_data"]], "end (bittensor.proposalvotedata attribute)": [[18, "bittensor.ProposalVoteData.end"]], "error() (bittensor.logging class method)": [[18, "bittensor.logging.error"]], "exists_on_device() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile method)": [[18, "bittensor.keyfile.exists_on_device"]], "external_ip (bittensor.dendrite attribute)": [[18, "bittensor.dendrite.external_ip"]], "extract_response_json() (bittensor.streamingsynapse method)": [[18, "bittensor.StreamingSynapse.extract_response_json"]], "failed_verification (bittensor.synapse property)": [[18, "bittensor.Synapse.failed_verification"]], "fix_decoded_values() (bittensor.delegateinfo class method)": [[18, "bittensor.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.ipinfo class method)": [[18, "bittensor.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfo class method)": [[18, "bittensor.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfolite class method)": [[18, "bittensor.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.prometheusinfo class method)": [[18, "bittensor.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.stakeinfo class method)": [[18, "bittensor.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnethyperparameters class method)": [[18, "bittensor.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnetinfo class method)": [[18, "bittensor.SubnetInfo.fix_decoded_values"]], "forward() (bittensor.dendrite method)": [[18, "bittensor.dendrite.forward"], [18, "id76"]], "from_float() (bittensor.balance static method)": [[18, "bittensor.Balance.from_float"], [18, "id50"]], "from_headers() (bittensor.synapse class method)": [[18, "bittensor.Synapse.from_headers"]], "from_neuron_info() (bittensor.axoninfo class method)": [[18, "bittensor.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.axoninfo class method)": [[18, "bittensor.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.ipinfo class method)": [[18, "bittensor.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnethyperparameters class method)": [[18, "bittensor.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnetinfo class method)": [[18, "bittensor.SubnetInfo.from_parameter_dict"]], "from_rao() (bittensor.balance static method)": [[18, "bittensor.Balance.from_rao"], [18, "id52"]], "from_scale_encoding() (in module bittensor)": [[18, "bittensor.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor)": [[18, "bittensor.from_scale_encoding_using_type_string"]], "from_tao() (bittensor.balance static method)": [[18, "bittensor.Balance.from_tao"], [18, "id51"]], "from_vec_u8() (bittensor.delegateinfo class method)": [[18, "bittensor.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.ipinfo class method)": [[18, "bittensor.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfo class method)": [[18, "bittensor.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfolite class method)": [[18, "bittensor.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.stakeinfo class method)": [[18, "bittensor.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.subnethyperparameters class method)": [[18, "bittensor.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.subnetinfo class method)": [[18, "bittensor.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.neuroninfo class method)": [[18, "bittensor.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "get_all_neurons_for_pubkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_block_hash"]], "get_coldkey() (bittensor.wallet method)": [[18, "bittensor.wallet.get_coldkey"]], "get_coldkey_password_from_environment() (in module bittensor)": [[18, "bittensor.get_coldkey_password_from_environment"]], "get_coldkeypub() (bittensor.wallet method)": [[18, "bittensor.wallet.get_coldkeypub"]], "get_current_block() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_existential_deposit"]], "get_explorer_root_url_by_network_from_map() (in module bittensor)": [[18, "bittensor.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor)": [[18, "bittensor.get_explorer_url_for_network"]], "get_hotkey() (bittensor.wallet method)": [[18, "bittensor.wallet.get_hotkey"]], "get_hotkey_owner() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_hotkey_owner"]], "get_keypair() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile method)": [[18, "bittensor.keyfile.get_keypair"]], "get_level() (bittensor.logging class method)": [[18, "bittensor.logging.get_level"]], "get_netuids_for_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor attribute)": [[18, "bittensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_senate_members"]], "get_size() (in module bittensor)": [[18, "bittensor.get_size"]], "get_ss58_format() (in module bittensor)": [[18, "bittensor.get_ss58_format"]], "get_stake() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_subnets"]], "get_total_size() (bittensor.synapse method)": [[18, "bittensor.Synapse.get_total_size"]], "get_total_stake_for_coldkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor method)": [[18, "bittensor.subtensor.get_vote_data"]], "hash() (in module bittensor)": [[18, "bittensor.hash"]], "header_size (bittensor.synapse attribute)": [[18, "bittensor.Synapse.header_size"]], "help() (bittensor.axon class method)": [[18, "bittensor.axon.help"]], "help() (bittensor.logging class method)": [[18, "bittensor.logging.help"]], "help() (bittensor.subtensor class method)": [[18, "bittensor.subtensor.help"]], "help() (bittensor.wallet class method)": [[18, "bittensor.wallet.help"]], "hotkey (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.hotkey"]], "hotkey (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.hotkey"]], "hotkey (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.hotkey"]], "hotkey (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.hotkey"]], "hotkey (bittensor.wallet property)": [[18, "bittensor.wallet.hotkey"]], "hotkey_file (bittensor.wallet property)": [[18, "bittensor.wallet.hotkey_file"]], "hotkey_ss58 (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.stakeinfo attribute)": [[18, "bittensor.StakeInfo.hotkey_ss58"]], "hotkeys (bittensor.metagraph property)": [[18, "bittensor.metagraph.hotkeys"]], "immunity_period (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.immunity_period"]], "immunity_period() (bittensor.subtensor method)": [[18, "bittensor.subtensor.immunity_period"]], "incentive (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.incentive"]], "incentive (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.incentive"]], "incentive (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.incentive"]], "incentive() (bittensor.subtensor method)": [[18, "bittensor.subtensor.incentive"]], "index (bittensor.proposalvotedata attribute)": [[18, "bittensor.ProposalVoteData.index"]], "info() (bittensor.axon method)": [[18, "bittensor.axon.info"]], "info() (bittensor.logging class method)": [[18, "bittensor.logging.info"]], "ip (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.ip"]], "ip (bittensor.ipinfo attribute)": [[18, "bittensor.IPInfo.ip"]], "ip (bittensor.prometheusinfo attribute)": [[18, "bittensor.PrometheusInfo.ip"]], "ip (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.ip"]], "ip_str() (bittensor.axoninfo method)": [[18, "bittensor.AxonInfo.ip_str"]], "ip_type (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.ip_type"]], "ip_type (bittensor.ipinfo attribute)": [[18, "bittensor.IPInfo.ip_type"]], "ip_type (bittensor.prometheusinfo attribute)": [[18, "bittensor.PrometheusInfo.ip_type"]], "is_blacklist (bittensor.synapse property)": [[18, "bittensor.Synapse.is_blacklist"]], "is_empty (bittensor.prioritythreadpoolexecutor property)": [[18, "bittensor.PriorityThreadPoolExecutor.is_empty"]], "is_encrypted() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile method)": [[18, "bittensor.keyfile.is_encrypted"]], "is_failure (bittensor.synapse property)": [[18, "bittensor.Synapse.is_failure"]], "is_hotkey_delegate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor method)": [[18, "bittensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor method)": [[18, "bittensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.is_hotkey_registered_on_subnet"]], "is_null (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.is_null"]], "is_null (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.is_null"]], "is_readable() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile method)": [[18, "bittensor.keyfile.is_readable"]], "is_senate_member() (bittensor.subtensor method)": [[18, "bittensor.subtensor.is_senate_member"]], "is_serving (bittensor.axoninfo property)": [[18, "bittensor.AxonInfo.is_serving"]], "is_set() (bittensor.config method)": [[18, "bittensor.config.is_set"]], "is_success (bittensor.synapse property)": [[18, "bittensor.Synapse.is_success"]], "is_timeout (bittensor.synapse property)": [[18, "bittensor.Synapse.is_timeout"]], "is_valid_bittensor_address_or_public_key() (in module bittensor)": [[18, "bittensor.is_valid_bittensor_address_or_public_key"], [18, "id1"]], "is_valid_ed25519_pubkey() (in module bittensor)": [[18, "bittensor.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor)": [[18, "bittensor.is_valid_ss58_address"]], "is_writable() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile method)": [[18, "bittensor.keyfile.is_writable"]], "kappa (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.kappa"]], "kappa (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.kappa"]], "kappa() (bittensor.subtensor method)": [[18, "bittensor.subtensor.kappa"]], "keyfile (class in bittensor)": [[18, "bittensor.keyfile"]], "keyfile_data (bittensor.keyfile property)": [[18, "bittensor.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor)": [[18, "bittensor.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor)": [[18, "bittensor.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor)": [[18, "bittensor.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor)": [[18, "bittensor.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor)": [[18, "bittensor.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.mockkeyfile property)": [[18, "bittensor.Mockkeyfile.keypair"]], "keypair (bittensor.dendrite attribute)": [[18, "bittensor.dendrite.keypair"]], "keypair (bittensor.keyfile property)": [[18, "bittensor.keyfile.keypair"]], "last_update (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.last_update"]], "last_update (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.last_update"]], "last_update (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.last_update"]], "leave_senate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.leave_senate"]], "legacy_encrypt_keyfile_data() (in module bittensor)": [[18, "bittensor.legacy_encrypt_keyfile_data"]], "list_from_vec_u8() (bittensor.delegateinfo class method)": [[18, "bittensor.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.ipinfo class method)": [[18, "bittensor.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfo class method)": [[18, "bittensor.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfolite class method)": [[18, "bittensor.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.stakeinfo class method)": [[18, "bittensor.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnethyperparameters class method)": [[18, "bittensor.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnetinfo class method)": [[18, "bittensor.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.stakeinfo class method)": [[18, "bittensor.StakeInfo.list_of_tuple_from_vec_u8"]], "load() (bittensor.metagraph method)": [[18, "bittensor.metagraph.load"]], "load_from_path() (bittensor.metagraph method)": [[18, "bittensor.metagraph.load_from_path"]], "log_filter() (bittensor.logging class method)": [[18, "bittensor.logging.log_filter"]], "log_formatter() (bittensor.logging class method)": [[18, "bittensor.logging.log_formatter"]], "log_save_filter() (bittensor.logging class method)": [[18, "bittensor.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging class method)": [[18, "bittensor.logging.log_save_formatter"]], "logging (class in bittensor)": [[18, "bittensor.logging"]], "make_dirs() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile method)": [[18, "bittensor.keyfile.make_dirs"]], "max_allowed_validators (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.max_allowed_validators"]], "max_allowed_validators() (bittensor.subtensor method)": [[18, "bittensor.subtensor.max_allowed_validators"]], "max_burn (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.max_n"]], "max_n() (bittensor.subtensor method)": [[18, "bittensor.subtensor.max_n"]], "max_regs_per_block (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.max_weight_limit"]], "max_weight_limit() (bittensor.subtensor method)": [[18, "bittensor.subtensor.max_weight_limit"]], "merge() (bittensor.config method)": [[18, "bittensor.config.merge"]], "merge_all() (bittensor.config class method)": [[18, "bittensor.config.merge_all"]], "metadata() (bittensor.metagraph method)": [[18, "bittensor.metagraph.metadata"]], "metagraph (class in bittensor)": [[18, "bittensor.metagraph"]], "metagraph() (bittensor.subtensor method)": [[18, "bittensor.subtensor.metagraph"]], "min_allowed_weights (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.min_allowed_weights"]], "min_allowed_weights() (bittensor.subtensor method)": [[18, "bittensor.subtensor.min_allowed_weights"]], "min_burn (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.modality"]], "n (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.n"]], "name (bittensor.synapse attribute)": [[18, "bittensor.Synapse.name"]], "nays (bittensor.proposalvotedata attribute)": [[18, "bittensor.ProposalVoteData.nays"]], "netuid (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.netuid"]], "netuid (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.netuid"]], "netuid (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.netuid"]], "netuid (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.netuid"]], "network (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.network"]], "neuron_for_uid() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor method)": [[18, "bittensor.subtensor.neurons_lite"]], "new_coldkey() (bittensor.wallet method)": [[18, "bittensor.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet method)": [[18, "bittensor.wallet.new_hotkey"]], "nominate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.nominate"]], "nominators (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.nominators"]], "nonce (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.nonce"]], "numpy() (bittensor.tensor method)": [[18, "bittensor.Tensor.numpy"]], "owner_ss58 (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.owner_ss58"]], "parse_headers_to_inputs() (bittensor.synapse class method)": [[18, "bittensor.Synapse.parse_headers_to_inputs"]], "placeholder1 (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.placeholder1"]], "placeholder2 (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.placeholder2"]], "port (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.port"]], "port (bittensor.prometheusinfo attribute)": [[18, "bittensor.PrometheusInfo.port"]], "port (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.port"]], "preprocess_synapse_for_request() (bittensor.dendrite method)": [[18, "bittensor.dendrite.preprocess_synapse_for_request"], [18, "id79"]], "process_server_response() (bittensor.dendrite method)": [[18, "bittensor.dendrite.process_server_response"], [18, "id80"]], "process_streaming_response() (bittensor.streamingsynapse method)": [[18, "bittensor.StreamingSynapse.process_streaming_response"]], "process_time (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.process_time"]], "prometheus_info (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.protocol"]], "protocol (bittensor.ipinfo attribute)": [[18, "bittensor.IPInfo.protocol"]], "pruning_score (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.pruning_score"]], "pruning_score (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.pruning_score"]], "query() (bittensor.dendrite method)": [[18, "bittensor.dendrite.query"], [18, "id75"]], "query_constant() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_constant"]], "query_map() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor method)": [[18, "bittensor.subtensor.query_subtensor"]], "rank (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.rank"]], "rank (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.rank"]], "ranks (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.ranks"]], "rao (bittensor.balance attribute)": [[18, "bittensor.Balance.rao"], [18, "id14"], [18, "id19"], [18, "id5"]], "rao_unit (bittensor.balance attribute)": [[18, "bittensor.Balance.rao_unit"], [18, "id13"], [18, "id18"], [18, "id4"]], "recreate() (bittensor.wallet method)": [[18, "bittensor.wallet.recreate"]], "regen_coldkey (bittensor.wallet attribute)": [[18, "bittensor.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet attribute)": [[18, "bittensor.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet attribute)": [[18, "bittensor.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet method)": [[18, "bittensor.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet method)": [[18, "bittensor.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet method)": [[18, "bittensor.wallet.regenerate_hotkey"]], "register() (bittensor.subtensor method)": [[18, "bittensor.subtensor.register"]], "register_senate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor method)": [[18, "bittensor.subtensor.register_subnetwork"]], "registration_allowed (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.registrations"]], "required_hash_fields (bittensor.synapse attribute)": [[18, "bittensor.Synapse.required_hash_fields"]], "return_per_1000 (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.return_per_1000"]], "rho (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.rho"]], "rho (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.rho"]], "rho() (bittensor.subtensor method)": [[18, "bittensor.subtensor.rho"]], "root_register() (bittensor.subtensor method)": [[18, "bittensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor method)": [[18, "bittensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor method)": [[18, "bittensor.subtensor.run_faucet"]], "save() (bittensor.metagraph method)": [[18, "bittensor.metagraph.save"]], "scaling_law_power (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.scaling_law_power"]], "scaling_law_power() (bittensor.subtensor method)": [[18, "bittensor.subtensor.scaling_law_power"]], "serialize() (bittensor.tensor static method)": [[18, "bittensor.Tensor.serialize"]], "serialized_keypair_to_keyfile_data() (in module bittensor)": [[18, "bittensor.serialized_keypair_to_keyfile_data"]], "serve() (bittensor.axon method)": [[18, "bittensor.axon.serve"]], "serve() (bittensor.subtensor method)": [[18, "bittensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor method)": [[18, "bittensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor method)": [[18, "bittensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor method)": [[18, "bittensor.subtensor.serving_rate_limit"]], "session (bittensor.dendrite property)": [[18, "bittensor.dendrite.session"]], "set_coldkey() (bittensor.wallet method)": [[18, "bittensor.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet method)": [[18, "bittensor.wallet.set_coldkeypub"]], "set_debug() (bittensor.logging class method)": [[18, "bittensor.logging.set_debug"]], "set_hotkey() (bittensor.wallet method)": [[18, "bittensor.wallet.set_hotkey"]], "set_hyperparameter() (bittensor.subtensor method)": [[18, "bittensor.subtensor.set_hyperparameter"]], "set_keypair() (bittensor.mockkeyfile method)": [[18, "bittensor.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile method)": [[18, "bittensor.keyfile.set_keypair"]], "set_name_type() (bittensor.synapse method)": [[18, "bittensor.Synapse.set_name_type"]], "set_trace() (bittensor.logging class method)": [[18, "bittensor.logging.set_trace"]], "set_weights() (bittensor.subtensor method)": [[18, "bittensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor static method)": [[18, "bittensor.subtensor.setup_config"]], "shape (bittensor.tensor attribute)": [[18, "bittensor.Tensor.shape"], [18, "id64"]], "shutdown() (bittensor.prioritythreadpoolexecutor method)": [[18, "bittensor.PriorityThreadPoolExecutor.shutdown"]], "signature (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.signature"]], "ss58_address_to_bytes() (in module bittensor)": [[18, "bittensor.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor)": [[18, "bittensor.ss58_to_vec_u8"]], "stake (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.stake"]], "stake (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.stake"]], "stake (bittensor.stakeinfo attribute)": [[18, "bittensor.StakeInfo.stake"]], "stake (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.stake"]], "stake_dict (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.stake_dict"]], "stake_dict (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.stake_dict"]], "start() (bittensor.axon method)": [[18, "bittensor.axon.start"]], "state_call() (bittensor.subtensor method)": [[18, "bittensor.subtensor.state_call"]], "status_code (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.status_code"]], "status_message (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.status_message"]], "stop() (bittensor.axon method)": [[18, "bittensor.axon.stop"]], "stream_response() (bittensor.streamingsynapse.btstreamingresponse method)": [[18, "bittensor.StreamingSynapse.BTStreamingResponse.stream_response"]], "strtobool() (in module bittensor)": [[18, "bittensor.strtobool"]], "strtobool_with_default() (in module bittensor)": [[18, "bittensor.strtobool_with_default"]], "submit() (bittensor.prioritythreadpoolexecutor method)": [[18, "bittensor.PriorityThreadPoolExecutor.submit"]], "subnet_exists() (bittensor.subtensor method)": [[18, "bittensor.subtensor.subnet_exists"]], "subnetwork_n (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.subnetwork_n"]], "subnetwork_n() (bittensor.subtensor method)": [[18, "bittensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor)": [[18, "bittensor.subtensor"]], "success() (bittensor.logging class method)": [[18, "bittensor.logging.success"]], "synapse_history (bittensor.dendrite attribute)": [[18, "bittensor.dendrite.synapse_history"]], "sync() (bittensor.metagraph method)": [[18, "bittensor.metagraph.sync"]], "synergy_scaling_law_power() (bittensor.subtensor method)": [[18, "bittensor.subtensor.synergy_scaling_law_power"]], "take (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.take"]], "tao (bittensor.balance attribute)": [[18, "bittensor.Balance.tao"], [18, "id15"], [18, "id20"], [18, "id6"]], "tao (bittensor.balance property)": [[18, "id16"], [18, "id2"]], "target_regs_per_interval (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.tempo"]], "tempo (bittensor.subnetinfo attribute)": [[18, "bittensor.SubnetInfo.tempo"]], "tempo() (bittensor.subtensor method)": [[18, "bittensor.subtensor.tempo"]], "tensor() (bittensor.tensor method)": [[18, "bittensor.Tensor.tensor"]], "threshold (bittensor.proposalvotedata attribute)": [[18, "bittensor.ProposalVoteData.threshold"]], "timeout (bittensor.synapse attribute)": [[18, "bittensor.Synapse.timeout"]], "to_headers() (bittensor.synapse method)": [[18, "bittensor.Synapse.to_headers"]], "to_parameter_dict() (bittensor.axoninfo method)": [[18, "bittensor.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.ipinfo method)": [[18, "bittensor.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnethyperparameters method)": [[18, "bittensor.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnetinfo method)": [[18, "bittensor.SubnetInfo.to_parameter_dict"]], "to_string() (bittensor.config method)": [[18, "bittensor.config.to_string"]], "token_streamer (bittensor.btstreamingresponsemodel attribute)": [[18, "bittensor.BTStreamingResponseModel.token_streamer"], [18, "id61"]], "tolist() (bittensor.tensor method)": [[18, "bittensor.Tensor.tolist"]], "total_daily_return (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.total_daily_return"]], "total_issuance() (bittensor.subtensor method)": [[18, "bittensor.subtensor.total_issuance"]], "total_size (bittensor.synapse attribute)": [[18, "bittensor.Synapse.total_size"]], "total_stake (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.total_stake"]], "total_stake (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.total_stake"]], "total_stake (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.total_stake"]], "total_stake (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.total_stake"]], "total_stake() (bittensor.subtensor method)": [[18, "bittensor.subtensor.total_stake"]], "trace() (bittensor.logging class method)": [[18, "bittensor.logging.trace"]], "trace() (in module bittensor)": [[18, "bittensor.trace"]], "transfer() (bittensor.subtensor method)": [[18, "bittensor.subtensor.transfer"]], "trust (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.trust"]], "trust (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.trust"]], "trust (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.trust"]], "turn_console_off() (in module bittensor)": [[18, "bittensor.turn_console_off"]], "turn_console_on() (in module bittensor)": [[18, "bittensor.turn_console_on"]], "tx_rate_limit() (bittensor.subtensor method)": [[18, "bittensor.subtensor.tx_rate_limit"]], "u8_key_to_ss58() (in module bittensor)": [[18, "bittensor.u8_key_to_ss58"]], "uid (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.uid"]], "uid (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.uid"]], "uids (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.uids"]], "unbiased_topk() (in module bittensor)": [[18, "bittensor.unbiased_topk"]], "undelegate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.undelegate"]], "unit (bittensor.balance attribute)": [[18, "bittensor.Balance.unit"], [18, "id12"], [18, "id17"], [18, "id3"]], "unstake() (bittensor.subtensor method)": [[18, "bittensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor method)": [[18, "bittensor.subtensor.unstake_multiple"]], "update_with_kwargs() (bittensor.config method)": [[18, "bittensor.config.update_with_kwargs"]], "uuid (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.uuid"]], "validate_assignment (bittensor.streamingsynapse.config attribute)": [[18, "bittensor.StreamingSynapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.config attribute)": [[18, "bittensor.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.tensor.config attribute)": [[18, "bittensor.Tensor.Config.validate_assignment"]], "validate_assignment (bittensor.terminalinfo.config attribute)": [[18, "bittensor.TerminalInfo.Config.validate_assignment"]], "validate_password() (in module bittensor)": [[18, "bittensor.validate_password"]], "validator_batch_size() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_logits_divergence"]], "validator_permit (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.validator_permit"]], "validator_permit (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.validator_permit"]], "validator_permit (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.validator_permit"]], "validator_permits (bittensor.delegateinfo attribute)": [[18, "bittensor.DelegateInfo.validator_permits"]], "validator_prune_len() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor method)": [[18, "bittensor.subtensor.validator_sequence_length"]], "validator_trust (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.validator_trust"]], "validator_trust (bittensor.neuroninfolite attribute)": [[18, "bittensor.NeuronInfoLite.validator_trust"]], "validator_trust (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.validator_trust"]], "verify_body_integrity() (bittensor.axon method)": [[18, "bittensor.axon.verify_body_integrity"]], "version (bittensor.axoninfo attribute)": [[18, "bittensor.AxonInfo.version"]], "version (bittensor.prometheusinfo attribute)": [[18, "bittensor.PrometheusInfo.version"]], "version (bittensor.terminalinfo attribute)": [[18, "bittensor.TerminalInfo.version"]], "version (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.version"]], "version_checking() (in module bittensor)": [[18, "bittensor.version_checking"]], "version_split (in module bittensor)": [[18, "bittensor.version_split"]], "vote_senate() (bittensor.subtensor method)": [[18, "bittensor.subtensor.vote_senate"]], "wallet (class in bittensor)": [[18, "bittensor.wallet"]], "warning() (bittensor.logging class method)": [[18, "bittensor.logging.warning"]], "weights (bittensor.neuroninfo attribute)": [[18, "bittensor.NeuronInfo.weights"]], "weights (bittensor.metagraph attribute)": [[18, "bittensor.metagraph.weights"]], "weights() (bittensor.subtensor method)": [[18, "bittensor.subtensor.weights"]], "weights_rate_limit (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.subnethyperparameters attribute)": [[18, "bittensor.SubnetHyperparameters.weights_version"]], "mockkeyfile (class in bittensor.keyfile)": [[19, "bittensor.keyfile.Mockkeyfile"]], "nacl_salt (in module bittensor.keyfile)": [[19, "bittensor.keyfile.NACL_SALT"]], "__repr__() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.__repr__"]], "__repr__() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.__repr__"]], "__str__() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.__str__"]], "__str__() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.__str__"]], "_may_overwrite() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile._may_overwrite"]], "_read_keyfile_data_from_file() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile._read_keyfile_data_from_file"]], "_write_keyfile_data_to_file() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile._write_keyfile_data_to_file"]], "ask_password_to_encrypt() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.ask_password_to_encrypt"]], "bittensor.keyfile": [[19, "module-bittensor.keyfile"]], "check_and_update_encryption() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.check_and_update_encryption"]], "data (bittensor.keyfile.mockkeyfile property)": [[19, "bittensor.keyfile.Mockkeyfile.data"]], "data (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.data"]], "decrypt() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.decrypt_keyfile_data"]], "deserialize_keypair_from_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.deserialize_keypair_from_keyfile_data"]], "encrypt() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.encrypt_keyfile_data"]], "exists_on_device() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.exists_on_device"]], "get_coldkey_password_from_environment() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.get_coldkey_password_from_environment"]], "get_keypair() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.get_keypair"]], "is_encrypted() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_encrypted"]], "is_readable() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_readable"]], "is_writable() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_writable"]], "keyfile (class in bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile"]], "keyfile_data (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.keyfile.mockkeyfile property)": [[19, "bittensor.keyfile.Mockkeyfile.keypair"]], "keypair (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.keypair"]], "legacy_encrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.legacy_encrypt_keyfile_data"]], "make_dirs() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.make_dirs"]], "serialized_keypair_to_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.serialized_keypair_to_keyfile_data"]], "set_keypair() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.set_keypair"]], "validate_password() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.validate_password"]], "__debug_on__ (bittensor.logging.logging attribute)": [[20, "bittensor.logging.logging.__debug_on__"]], "__file_sink__ (bittensor.logging.logging attribute)": [[20, "bittensor.logging.logging.__file_sink__"]], "__has_been_inited__ (bittensor.logging.logging attribute)": [[20, "bittensor.logging.logging.__has_been_inited__"]], "__std_sink__ (bittensor.logging.logging attribute)": [[20, "bittensor.logging.logging.__std_sink__"]], "__trace_on__ (bittensor.logging.logging attribute)": [[20, "bittensor.logging.logging.__trace_on__"]], "_format() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging._format"]], "_remove_loguru_ansi_directive() (in module bittensor.logging)": [[20, "bittensor.logging._remove_loguru_ansi_directive"]], "add_args() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.add_args"]], "bittensor.logging": [[20, "module-bittensor.logging"]], "check_config() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.check_config"]], "config() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.config"]], "debug() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.debug"]], "error() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.error"]], "get_level() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.get_level"]], "help() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.help"]], "info() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.info"]], "log_filter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_filter"]], "log_formatter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_formatter"]], "log_save_filter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_save_formatter"]], "logger (in module bittensor.logging)": [[20, "bittensor.logging.logger"]], "logging (class in bittensor.logging)": [[20, "bittensor.logging.logging"]], "set_debug() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.set_debug"]], "set_trace() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.set_trace"]], "success() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.success"]], "trace() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.trace"]], "warning() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.warning"]], "b (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.B"]], "c (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.C"]], "d (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.D"]], "e (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.E"]], "i (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.I"]], "r (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.R"]], "s (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.S"]], "t (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.T"]], "tv (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.Tv"]], "w (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.W"]], "__repr__() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.__repr__"]], "__str__() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.__str__"]], "_assign_neurons() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._assign_neurons"]], "_create_tensor() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._create_tensor"]], "_initialize_subtensor() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._initialize_subtensor"]], "_process_root_weights() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._process_weights_or_bonds"]], "_set_metagraph_attributes() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph._set_weights_and_bonds"]], "active (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.active"]], "addresses (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.addresses"]], "axons (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.axons"]], "bittensor.metagraph": [[21, "module-bittensor.metagraph"]], "block (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.block"]], "bonds (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.bonds"]], "coldkeys (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.coldkeys"]], "consensus (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.consensus"]], "dividends (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.dividends"]], "emission (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.emission"]], "get_save_dir() (in module bittensor.metagraph)": [[21, "bittensor.metagraph.get_save_dir"]], "hotkeys (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.hotkeys"]], "incentive (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.incentive"]], "last_update (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.last_update"]], "latest_block_path() (in module bittensor.metagraph)": [[21, "bittensor.metagraph.latest_block_path"]], "load() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.load"]], "load_from_path() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.load_from_path"]], "metadata() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.metadata"]], "metagraph (class in bittensor.metagraph)": [[21, "bittensor.metagraph.metagraph"]], "n (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.n"]], "netuid (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.netuid"]], "network (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.network"]], "ranks (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.ranks"]], "save() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.save"]], "stake (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.stake"]], "sync() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.sync"]], "total_stake (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.total_stake"]], "trust (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.trust"]], "uids (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.uids"]], "validator_permit (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.validator_permit"]], "validator_trust (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.validator_trust"]], "version (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.version"]], "weights (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.weights"]], "btstreamingresponsemodel (class in bittensor.stream)": [[22, "bittensor.stream.BTStreamingResponseModel"]], "streamingsynapse (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse.Config"]], "__call__() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[22, "bittensor.stream.StreamingSynapse.BTStreamingResponse.__call__"]], "bittensor.stream": [[22, "module-bittensor.stream"]], "create_streaming_response() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.create_streaming_response"]], "extract_response_json() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.extract_response_json"]], "process_streaming_response() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.process_streaming_response"]], "stream_response() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[22, "bittensor.stream.StreamingSynapse.BTStreamingResponse.stream_response"]], "token_streamer (bittensor.stream.btstreamingresponsemodel attribute)": [[22, "bittensor.stream.BTStreamingResponseModel.token_streamer"], [22, "id0"]], "validate_assignment (bittensor.stream.streamingsynapse.config attribute)": [[22, "bittensor.stream.StreamingSynapse.Config.validate_assignment"]], "paramwithtypes (class in bittensor.subtensor)": [[23, "bittensor.subtensor.ParamWithTypes"]], "__repr__() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.__repr__"]], "__str__() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.__str__"]], "_do_associate_ips() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_serve_prometheus"]], "_do_set_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_stake"]], "_do_transfer() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor._encode_params"]], "_null_neuron() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor._null_neuron"]], "add_args() (bittensor.subtensor.subtensor class method)": [[23, "bittensor.subtensor.subtensor.add_args"]], "add_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.add_stake_multiple"]], "associated_validator_ip_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.associated_validator_ip_info"]], "bittensor.subtensor": [[23, "module-bittensor.subtensor"]], "block (bittensor.subtensor.subtensor property)": [[23, "bittensor.subtensor.subtensor.block"]], "blocks_since_epoch() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.blocks_since_epoch"]], "bonds() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.bonds"]], "burn() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.burn"]], "burned_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.burned_register"]], "config() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.config"]], "delegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.delegate"]], "determine_chain_endpoint_and_network() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.difficulty"]], "does_hotkey_exist() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.does_hotkey_exist"]], "get_all_neurons_for_pubkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_block_hash"]], "get_current_block() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_existential_deposit"]], "get_hotkey_owner() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_hotkey_owner"]], "get_netuids_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor.subtensor attribute)": [[23, "bittensor.subtensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_senate_members"]], "get_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnets"]], "get_total_stake_for_coldkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_vote_data"]], "help() (bittensor.subtensor.subtensor class method)": [[23, "bittensor.subtensor.subtensor.help"]], "immunity_period() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.immunity_period"]], "incentive() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.incentive"]], "is_hotkey_delegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered_on_subnet"]], "is_senate_member() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_senate_member"]], "kappa() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.kappa"]], "leave_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.leave_senate"]], "logger (in module bittensor.subtensor)": [[23, "bittensor.subtensor.logger"]], "max_allowed_validators() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_allowed_validators"]], "max_n() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_n"]], "max_weight_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_weight_limit"]], "metagraph() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.metagraph"]], "min_allowed_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.min_allowed_weights"]], "name (bittensor.subtensor.paramwithtypes attribute)": [[23, "bittensor.subtensor.ParamWithTypes.name"]], "neuron_for_uid() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neurons_lite"]], "nominate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.nominate"]], "query_constant() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_constant"]], "query_map() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_subtensor"]], "register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register"]], "register_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register_subnetwork"]], "rho() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.rho"]], "root_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.run_faucet"]], "scaling_law_power() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.scaling_law_power"]], "serve() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serving_rate_limit"]], "set_hyperparameter() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.set_hyperparameter"]], "set_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.setup_config"]], "state_call() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.state_call"]], "subnet_exists() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.subnet_exists"]], "subnetwork_n() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor.subtensor)": [[23, "bittensor.subtensor.subtensor"]], "synergy_scaling_law_power() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.synergy_scaling_law_power"]], "tempo() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.tempo"]], "total_issuance() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.total_issuance"]], "total_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.total_stake"]], "transfer() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.transfer"]], "tx_rate_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.tx_rate_limit"]], "type (bittensor.subtensor.paramwithtypes attribute)": [[23, "bittensor.subtensor.ParamWithTypes.type"]], "undelegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.unstake_multiple"]], "validator_batch_size() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_logits_divergence"]], "validator_prune_len() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_sequence_length"]], "vote_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.vote_senate"]], "weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.weights"]], "synapse (class in bittensor.synapse)": [[24, "bittensor.synapse.Synapse"]], "synapse.config (class in bittensor.synapse)": [[24, "bittensor.synapse.Synapse.Config"]], "terminalinfo (class in bittensor.synapse)": [[24, "bittensor.synapse.TerminalInfo"]], "terminalinfo.config (class in bittensor.synapse)": [[24, "bittensor.synapse.TerminalInfo.Config"]], "__setattr__() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.__setattr__"]], "_extract_header_size (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse._extract_header_size"]], "_extract_nonce (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo._extract_process_time"]], "_extract_status_code (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse._extract_total_size"]], "_extract_version (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo._extract_version"]], "axon (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.axon"]], "bittensor.synapse": [[24, "module-bittensor.synapse"]], "body_hash (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.body_hash"]], "cast_float() (in module bittensor.synapse)": [[24, "bittensor.synapse.cast_float"]], "cast_int() (in module bittensor.synapse)": [[24, "bittensor.synapse.cast_int"]], "computed_body_hash (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.computed_body_hash"]], "dendrite (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.dendrite"]], "deserialize() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.deserialize"]], "failed_verification (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.failed_verification"]], "from_headers() (bittensor.synapse.synapse class method)": [[24, "bittensor.synapse.Synapse.from_headers"]], "get_size() (in module bittensor.synapse)": [[24, "bittensor.synapse.get_size"]], "get_total_size() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.get_total_size"]], "header_size (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.header_size"]], "hotkey (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.hotkey"]], "ip (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.ip"]], "is_blacklist (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_blacklist"]], "is_failure (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_failure"]], "is_success (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_success"]], "is_timeout (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_timeout"]], "name (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.name"]], "nonce (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.nonce"]], "parse_headers_to_inputs() (bittensor.synapse.synapse class method)": [[24, "bittensor.synapse.Synapse.parse_headers_to_inputs"]], "port (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.port"]], "process_time (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.process_time"]], "required_hash_fields (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.required_hash_fields"]], "set_name_type() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.set_name_type"]], "signature (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.signature"]], "status_code (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.status_code"]], "status_message (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.status_message"]], "timeout (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.timeout"]], "to_headers() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.to_headers"]], "total_size (bittensor.synapse.synapse attribute)": [[24, "bittensor.synapse.Synapse.total_size"]], "uuid (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.uuid"]], "validate_assignment (bittensor.synapse.synapse.config attribute)": [[24, "bittensor.synapse.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.terminalinfo.config attribute)": [[24, "bittensor.synapse.TerminalInfo.Config.validate_assignment"]], "version (bittensor.synapse.terminalinfo attribute)": [[24, "bittensor.synapse.TerminalInfo.version"]], "torch_dtypes (in module bittensor.tensor)": [[25, "bittensor.tensor.TORCH_DTYPES"]], "tensor (class in bittensor.tensor)": [[25, "bittensor.tensor.Tensor"], [25, "bittensor.tensor.tensor"]], "tensor.config (class in bittensor.tensor)": [[25, "bittensor.tensor.Tensor.Config"]], "_extract_dtype (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor._extract_dtype"]], "_extract_shape (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor._extract_shape"]], "bittensor.tensor": [[25, "module-bittensor.tensor"]], "buffer (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.buffer"], [25, "id0"]], "cast_dtype() (in module bittensor.tensor)": [[25, "bittensor.tensor.cast_dtype"]], "cast_shape() (in module bittensor.tensor)": [[25, "bittensor.tensor.cast_shape"]], "deserialize() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.deserialize"]], "dtype (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.dtype"], [25, "id1"]], "numpy() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.numpy"]], "serialize() (bittensor.tensor.tensor static method)": [[25, "bittensor.tensor.Tensor.serialize"]], "shape (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.shape"], [25, "id2"]], "tensor() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.tensor"]], "tolist() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.tolist"]], "validate_assignment (bittensor.tensor.tensor.config attribute)": [[25, "bittensor.tensor.Tensor.Config.validate_assignment"]], "brokenthreadpool": [[26, "bittensor.threadpool.BrokenThreadPool"]], "null_entry (in module bittensor.threadpool)": [[26, "bittensor.threadpool.NULL_ENTRY"]], "prioritythreadpoolexecutor (class in bittensor.threadpool)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor"]], "_workitem (class in bittensor.threadpool)": [[26, "bittensor.threadpool._WorkItem"]], "__author__ (in module bittensor.threadpool)": [[26, "bittensor.threadpool.__author__"]], "_adjust_thread_count() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor._adjust_thread_count"]], "_counter (bittensor.threadpool.prioritythreadpoolexecutor attribute)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor._counter"]], "_initializer_failed() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor._initializer_failed"]], "_shutdown (in module bittensor.threadpool)": [[26, "bittensor.threadpool._shutdown"]], "_threads_queues (in module bittensor.threadpool)": [[26, "bittensor.threadpool._threads_queues"]], "_worker() (in module bittensor.threadpool)": [[26, "bittensor.threadpool._worker"]], "add_args() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.add_args"]], "bittensor.threadpool": [[26, "module-bittensor.threadpool"]], "config() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.config"]], "is_empty (bittensor.threadpool.prioritythreadpoolexecutor property)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.is_empty"]], "run() (bittensor.threadpool._workitem method)": [[26, "bittensor.threadpool._WorkItem.run"]], "shutdown() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.shutdown"]], "submit() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.submit"]], "axonservecallparams (class in bittensor.types)": [[27, "bittensor.types.AxonServeCallParams"]], "prometheusservecallparams (class in bittensor.types)": [[27, "bittensor.types.PrometheusServeCallParams"]], "bittensor.types": [[27, "module-bittensor.types"]], "ip (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.ip"]], "ip (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.ip"]], "ip_type (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.ip_type"]], "ip_type (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.netuid"]], "netuid (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.netuid"]], "port (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.port"]], "port (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.port"]], "version (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.version"]], "version (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.version"]], "bittensor.utils._register_cuda": [[28, "module-bittensor.utils._register_cuda"]], "log_cuda_errors() (in module bittensor.utils._register_cuda)": [[28, "bittensor.utils._register_cuda.log_cuda_errors"]], "reset_cuda() (in module bittensor.utils._register_cuda)": [[28, "bittensor.utils._register_cuda.reset_cuda"]], "solve_cuda() (in module bittensor.utils._register_cuda)": [[28, "bittensor.utils._register_cuda.solve_cuda"]], "balance (class in bittensor.utils.balance)": [[29, "bittensor.utils.balance.Balance"]], "__abs__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__abs__"]], "__add__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__add__"]], "__eq__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__eq__"]], "__float__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__float__"], [29, "id6"]], "__floordiv__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__floordiv__"]], "__ge__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__ge__"]], "__gt__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__gt__"]], "__int__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__int__"], [29, "id5"]], "__le__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__le__"]], "__lt__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__lt__"]], "__mul__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__mul__"]], "__ne__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__ne__"]], "__neg__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__neg__"]], "__nonzero__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__nonzero__"]], "__pos__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__pos__"]], "__radd__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__radd__"]], "__repr__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__repr__"]], "__rfloordiv__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rfloordiv__"]], "__rich__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rich__"]], "__rich_rao__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rich_rao__"]], "__rmul__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rmul__"]], "__rsub__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rsub__"]], "__rtruediv__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__rtruediv__"]], "__str__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__str__"]], "__str_rao__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__str_rao__"]], "__sub__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__sub__"]], "__truediv__() (bittensor.utils.balance.balance method)": [[29, "bittensor.utils.balance.Balance.__truediv__"]], "bittensor.utils.balance": [[29, "module-bittensor.utils.balance"]], "from_float() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_float"]], "from_rao() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_rao"]], "from_tao() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_tao"]], "rao (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.rao"], [29, "id3"]], "rao_unit (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.rao_unit"], [29, "id2"]], "tao (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.tao"], [29, "id4"]], "tao (bittensor.utils.balance.balance property)": [[29, "id0"]], "unit (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.unit"], [29, "id1"]], "bittensor.utils.formatting": [[30, "module-bittensor.utils.formatting"]], "get_human_readable() (in module bittensor.utils.formatting)": [[30, "bittensor.utils.formatting.get_human_readable"]], "millify() (in module bittensor.utils.formatting)": [[30, "bittensor.utils.formatting.millify"]], "raopertao (in module bittensor.utils)": [[31, "bittensor.utils.RAOPERTAO"]], "u16_max (in module bittensor.utils)": [[31, "bittensor.utils.U16_MAX"]], "u16_normalized_float() (in module bittensor.utils)": [[31, "bittensor.utils.U16_NORMALIZED_FLOAT"]], "u64_max (in module bittensor.utils)": [[31, "bittensor.utils.U64_MAX"]], "u64_normalized_float() (in module bittensor.utils)": [[31, "bittensor.utils.U64_NORMALIZED_FLOAT"]], "bittensor.utils": [[31, "module-bittensor.utils"]], "create_pow() (in module bittensor.utils)": [[31, "bittensor.utils.create_pow"]], "get_explorer_root_url_by_network_from_map() (in module bittensor.utils)": [[31, "bittensor.utils.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor.utils)": [[31, "bittensor.utils.get_explorer_url_for_network"]], "get_ss58_format() (in module bittensor.utils)": [[31, "bittensor.utils.get_ss58_format"]], "hash() (in module bittensor.utils)": [[31, "bittensor.utils.hash"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils)": [[31, "bittensor.utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils)": [[31, "bittensor.utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils)": [[31, "bittensor.utils.is_valid_ss58_address"]], "ss58_address_to_bytes() (in module bittensor.utils)": [[31, "bittensor.utils.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor.utils)": [[31, "bittensor.utils.ss58_to_vec_u8"]], "strtobool() (in module bittensor.utils)": [[31, "bittensor.utils.strtobool"]], "strtobool_with_default() (in module bittensor.utils)": [[31, "bittensor.utils.strtobool_with_default"]], "u8_key_to_ss58() (in module bittensor.utils)": [[31, "bittensor.utils.u8_key_to_ss58"]], "unbiased_topk() (in module bittensor.utils)": [[31, "bittensor.utils.unbiased_topk"]], "version_checking() (in module bittensor.utils)": [[31, "bittensor.utils.version_checking"]], "externalipnotfound": [[32, "bittensor.utils.networking.ExternalIPNotFound"]], "bittensor.utils.networking": [[32, "module-bittensor.utils.networking"]], "get_external_ip() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.get_external_ip"]], "get_formatted_ws_endpoint_url() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.get_formatted_ws_endpoint_url"]], "int_to_ip() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.int_to_ip"]], "ip__str__() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.ip__str__"]], "ip_to_int() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.ip_to_int"]], "ip_version() (in module bittensor.utils.networking)": [[32, "bittensor.utils.networking.ip_version"]], "cudaexception": [[33, "bittensor.utils.registration.CUDAException"]], "powsolution (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration.POWSolution"]], "registrationstatistics (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration.RegistrationStatistics"]], "registrationstatisticslogger (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger"]], "tpb (bittensor.utils.registration._cudasolver attribute)": [[33, "bittensor.utils.registration._CUDASolver.TPB"]], "_cudasolver (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration._CUDASolver"]], "_solver (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration._Solver"]], "_solverbase (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration._SolverBase"]], "_usingspawnstartmethod (class in bittensor.utils.registration)": [[33, "bittensor.utils.registration._UsingSpawnStartMethod"]], "__enter__() (bittensor.utils.registration._usingspawnstartmethod method)": [[33, "bittensor.utils.registration._UsingSpawnStartMethod.__enter__"]], "__exit__() (bittensor.utils.registration._usingspawnstartmethod method)": [[33, "bittensor.utils.registration._UsingSpawnStartMethod.__exit__"]], "_check_for_newest_block_and_update() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._check_for_newest_block_and_update"]], "_create_seal_hash() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._create_seal_hash"]], "_get_block_with_retry() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._get_block_with_retry"]], "_hash_block_with_hotkey() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._hash_block_with_hotkey"]], "_hex_bytes_to_u8_list() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._hex_bytes_to_u8_list"]], "_registration_diff_pack() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._registration_diff_pack"]], "_registration_diff_unpack() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._registration_diff_unpack"]], "_seal_meets_difficulty() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._seal_meets_difficulty"]], "_solve_for_difficulty_fast() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._solve_for_difficulty_fast"]], "_solve_for_difficulty_fast_cuda() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._solve_for_difficulty_fast_cuda"]], "_solve_for_nonce_block() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._solve_for_nonce_block"]], "_solve_for_nonce_block_cuda() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._solve_for_nonce_block_cuda"]], "_terminate_workers_and_wait_for_exit() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._terminate_workers_and_wait_for_exit"]], "_update_curr_block() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration._update_curr_block"]], "bittensor.utils.registration": [[33, "module-bittensor.utils.registration"]], "block_hash (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.block_hash"]], "block_number (bittensor.utils.registration.powsolution attribute)": [[33, "bittensor.utils.registration.POWSolution.block_number"]], "block_number (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.block_number"]], "check_block (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.check_block"]], "console (bittensor.utils.registration.registrationstatisticslogger attribute)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.console"]], "create_pow() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration.create_pow"]], "create_shared_memory() (bittensor.utils.registration._solverbase static method)": [[33, "bittensor.utils.registration._SolverBase.create_shared_memory"]], "curr_block (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.curr_block"]], "curr_block_num (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.curr_block_num"]], "curr_diff (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.curr_diff"]], "dev_id (bittensor.utils.registration._cudasolver attribute)": [[33, "bittensor.utils.registration._CUDASolver.dev_id"]], "difficulty (bittensor.utils.registration.powsolution attribute)": [[33, "bittensor.utils.registration.POWSolution.difficulty"]], "difficulty (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.difficulty"]], "finished_queue (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.finished_queue"]], "get_cpu_count() (in module bittensor.utils.registration)": [[33, "bittensor.utils.registration.get_cpu_count"]], "get_status_message() (bittensor.utils.registration.registrationstatisticslogger method)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.get_status_message"]], "hash_rate (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.hash_rate"]], "hash_rate_perpetual (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.hash_rate_perpetual"]], "hotkey_bytes (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.hotkey_bytes"]], "is_stale() (bittensor.utils.registration.powsolution method)": [[33, "bittensor.utils.registration.POWSolution.is_stale"]], "limit (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.limit"]], "newblockevent (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.newBlockEvent"]], "nonce (bittensor.utils.registration.powsolution attribute)": [[33, "bittensor.utils.registration.POWSolution.nonce"]], "num_proc (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.num_proc"]], "proc_num (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.proc_num"]], "rounds_total (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.rounds_total"]], "run() (bittensor.utils.registration._cudasolver method)": [[33, "bittensor.utils.registration._CUDASolver.run"]], "run() (bittensor.utils.registration._solver method)": [[33, "bittensor.utils.registration._Solver.run"]], "run() (bittensor.utils.registration._solverbase method)": [[33, "bittensor.utils.registration._SolverBase.run"]], "seal (bittensor.utils.registration.powsolution attribute)": [[33, "bittensor.utils.registration.POWSolution.seal"]], "solution_queue (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.solution_queue"]], "start() (bittensor.utils.registration.registrationstatisticslogger method)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.start"]], "status (bittensor.utils.registration.registrationstatisticslogger attribute)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.status"]], "stop() (bittensor.utils.registration.registrationstatisticslogger method)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.stop"]], "stopevent (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.stopEvent"]], "time_average (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.time_average"]], "time_spent (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.time_spent"]], "time_spent_total (bittensor.utils.registration.registrationstatistics attribute)": [[33, "bittensor.utils.registration.RegistrationStatistics.time_spent_total"]], "update() (bittensor.utils.registration.registrationstatisticslogger method)": [[33, "bittensor.utils.registration.RegistrationStatisticsLogger.update"]], "update_interval (bittensor.utils.registration._solverbase attribute)": [[33, "bittensor.utils.registration._SolverBase.update_interval"]], "amountpersecondrollingaverage (class in bittensor.utils.stats)": [[34, "bittensor.utils.stats.AmountPerSecondRollingAverage"]], "eventspersecondrollingaverage (class in bittensor.utils.stats)": [[34, "bittensor.utils.stats.EventsPerSecondRollingAverage"]], "bittensor.utils.stats": [[34, "module-bittensor.utils.stats"]], "event() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[34, "bittensor.utils.stats.AmountPerSecondRollingAverage.event"]], "event() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[34, "bittensor.utils.stats.EventsPerSecondRollingAverage.event"]], "get() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[34, "bittensor.utils.stats.AmountPerSecondRollingAverage.get"]], "get() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[34, "bittensor.utils.stats.EventsPerSecondRollingAverage.get"]], "timed_rolling_avg (class in bittensor.utils.stats)": [[34, "bittensor.utils.stats.timed_rolling_avg"]], "update() (bittensor.utils.stats.timed_rolling_avg method)": [[34, "bittensor.utils.stats.timed_rolling_avg.update"]], "bittensor.utils.test_utils": [[35, "module-bittensor.utils.test_utils"]], "get_random_unused_port() (in module bittensor.utils.test_utils)": [[35, "bittensor.utils.test_utils.get_random_unused_port"]], "max_tries (in module bittensor.utils.test_utils)": [[35, "bittensor.utils.test_utils.max_tries"]], "bittensor.utils.wallet_utils": [[36, "module-bittensor.utils.wallet_utils"]], "get_ss58_format() (in module bittensor.utils.wallet_utils)": [[36, "bittensor.utils.wallet_utils.get_ss58_format"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils.wallet_utils)": [[36, "bittensor.utils.wallet_utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils.wallet_utils)": [[36, "bittensor.utils.wallet_utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils.wallet_utils)": [[36, "bittensor.utils.wallet_utils.is_valid_ss58_address"]], "u16_max (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.U16_MAX"]], "u32_max (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.U32_MAX"]], "bittensor.utils.weight_utils": [[37, "module-bittensor.utils.weight_utils"]], "convert_bond_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.convert_bond_uids_and_vals_to_tensor"]], "convert_root_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.convert_root_weight_uids_and_vals_to_tensor"]], "convert_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.convert_weight_uids_and_vals_to_tensor"]], "convert_weights_and_uids_for_emit() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.convert_weights_and_uids_for_emit"]], "normalize_max_weight() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.normalize_max_weight"]], "process_weights_for_netuid() (in module bittensor.utils.weight_utils)": [[37, "bittensor.utils.weight_utils.process_weights_for_netuid"]], "__repr__() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.__repr__"]], "__str__() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.__str__"]], "add_args() (bittensor.wallet.wallet class method)": [[38, "bittensor.wallet.wallet.add_args"]], "bittensor.wallet": [[38, "module-bittensor.wallet"]], "coldkey (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.coldkey"]], "coldkey_file (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.coldkey_file"]], "coldkeypub (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.coldkeypub_file"]], "config() (bittensor.wallet.wallet class method)": [[38, "bittensor.wallet.wallet.config"]], "create() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.create_new_hotkey"]], "display_mnemonic_msg() (in module bittensor.wallet)": [[38, "bittensor.wallet.display_mnemonic_msg"]], "get_coldkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.get_coldkey"]], "get_coldkeypub() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.get_coldkeypub"]], "get_hotkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.get_hotkey"]], "help() (bittensor.wallet.wallet class method)": [[38, "bittensor.wallet.wallet.help"]], "hotkey (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.hotkey"]], "hotkey_file (bittensor.wallet.wallet property)": [[38, "bittensor.wallet.wallet.hotkey_file"]], "new_coldkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.new_hotkey"]], "recreate() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.recreate"]], "regen_coldkey (bittensor.wallet.wallet attribute)": [[38, "bittensor.wallet.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet.wallet attribute)": [[38, "bittensor.wallet.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet.wallet attribute)": [[38, "bittensor.wallet.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.regenerate_hotkey"]], "set_coldkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.set_coldkeypub"]], "set_hotkey() (bittensor.wallet.wallet method)": [[38, "bittensor.wallet.wallet.set_hotkey"]], "wallet (class in bittensor.wallet)": [[38, "bittensor.wallet.wallet"]], "openaiminer (class in miner)": [[40, "miner.OpenAIMiner"]], "add_args() (miner.openaiminer class method)": [[40, "miner.OpenAIMiner.add_args"]], "config() (miner.openaiminer method)": [[40, "miner.OpenAIMiner.config"]], "miner": [[40, "module-miner"]], "openai_api_key (in module miner)": [[40, "miner.openai_api_key"]], "prompt() (miner.openaiminer method)": [[40, "miner.OpenAIMiner.prompt"]], "neurons": [[41, "module-neurons"]], "neurons.validators": [[42, "module-neurons.validators"]], "add_args() (neurons.validators.validator.neuron class method)": [[43, "neurons.validators.validator.neuron.add_args"]], "check_config() (neurons.validators.validator.neuron class method)": [[43, "neurons.validators.validator.neuron.check_config"]], "config() (neurons.validators.validator.neuron class method)": [[43, "neurons.validators.validator.neuron.config"]], "main() (in module neurons.validators.validator)": [[43, "neurons.validators.validator.main"]], "metagraph (neurons.validators.validator.neuron attribute)": [[43, "neurons.validators.validator.neuron.metagraph"]], "neuron (class in neurons.validators.validator)": [[43, "neurons.validators.validator.neuron"]], "neurons.validators.validator": [[43, "module-neurons.validators.validator"]], "run() (neurons.validators.validator.neuron method)": [[43, "neurons.validators.validator.neuron.run"]], "subtensor (neurons.validators.validator.neuron attribute)": [[43, "neurons.validators.validator.neuron.subtensor"]], "wallet (neurons.validators.validator.neuron attribute)": [[43, "neurons.validators.validator.neuron.wallet"]], "blacklist() (in module prompting.baseminer.blacklist)": [[44, "prompting.baseminer.blacklist.blacklist"]], "default_blacklist() (in module prompting.baseminer.blacklist)": [[44, "prompting.baseminer.blacklist.default_blacklist"]], "is_prompt_in_cache() (in module prompting.baseminer.blacklist)": [[44, "prompting.baseminer.blacklist.is_prompt_in_cache"]], "prompting.baseminer.blacklist": [[44, "module-prompting.baseminer.blacklist"]], "check_config() (in module prompting.baseminer.config)": [[45, "prompting.baseminer.config.check_config"]], "get_config() (in module prompting.baseminer.config)": [[45, "prompting.baseminer.config.get_config"]], "prompting.baseminer.config": [[45, "module-prompting.baseminer.config"]], "prompting.baseminer": [[46, "module-prompting.baseminer"]], "miner (class in prompting.baseminer.miner)": [[47, "prompting.baseminer.miner.Miner"]], "__enter__() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.__enter__"]], "__exit__() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.__exit__"]], "_prompt() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner._prompt"]], "add_args() (prompting.baseminer.miner.miner class method)": [[47, "prompting.baseminer.miner.Miner.add_args"]], "blacklist() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.blacklist"]], "config() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.config"]], "priority() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.priority"]], "prompt() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.prompt"]], "prompting.baseminer.miner": [[47, "module-prompting.baseminer.miner"]], "run() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.run"]], "run_in_background_thread() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.run_in_background_thread"]], "stop_run_thread() (prompting.baseminer.miner.miner method)": [[47, "prompting.baseminer.miner.Miner.stop_run_thread"]], "default_priority() (in module prompting.baseminer.priority)": [[48, "prompting.baseminer.priority.default_priority"]], "priority() (in module prompting.baseminer.priority)": [[48, "prompting.baseminer.priority.priority"]], "prompting.baseminer.priority": [[48, "module-prompting.baseminer.priority"]], "record_request_timestamps() (in module prompting.baseminer.priority)": [[48, "prompting.baseminer.priority.record_request_timestamps"]], "prompting.baseminer.run": [[49, "module-prompting.baseminer.run"]], "run() (in module prompting.baseminer.run)": [[49, "prompting.baseminer.run.run"]], "prompting.baseminer.set_weights": [[50, "module-prompting.baseminer.set_weights"]], "set_weights() (in module prompting.baseminer.set_weights)": [[50, "prompting.baseminer.set_weights.set_weights"]], "__spec_version__ (in module prompting)": [[51, "prompting.__spec_version__"]], "__version__ (in module prompting)": [[51, "prompting.__version__"]], "prompting": [[51, "module-prompting"]], "version_split (in module prompting)": [[51, "prompting.version_split"]], "prompting (class in prompting.protocol)": [[52, "prompting.protocol.Prompting"]], "prompting.config (class in prompting.protocol)": [[52, "prompting.protocol.Prompting.Config"]], "streamprompting (class in prompting.protocol)": [[52, "prompting.protocol.StreamPrompting"]], "completion (prompting.protocol.prompting attribute)": [[52, "id10"], [52, "prompting.protocol.Prompting.completion"]], "completion (prompting.protocol.streamprompting attribute)": [[52, "prompting.protocol.StreamPrompting.completion"]], "deserialize() (prompting.protocol.prompting method)": [[52, "id11"], [52, "prompting.protocol.Prompting.deserialize"]], "deserialize() (prompting.protocol.streamprompting method)": [[52, "prompting.protocol.StreamPrompting.deserialize"]], "extract_response_json() (prompting.protocol.streamprompting method)": [[52, "prompting.protocol.StreamPrompting.extract_response_json"]], "messages (prompting.protocol.prompting attribute)": [[52, "id9"], [52, "prompting.protocol.Prompting.messages"]], "messages (prompting.protocol.streamprompting attribute)": [[52, "prompting.protocol.StreamPrompting.messages"]], "process_streaming_response() (prompting.protocol.streamprompting method)": [[52, "prompting.protocol.StreamPrompting.process_streaming_response"]], "prompting.protocol": [[52, "module-prompting.protocol"]], "required_hash_fields (prompting.protocol.prompting attribute)": [[52, "prompting.protocol.Prompting.required_hash_fields"]], "required_hash_fields (prompting.protocol.streamprompting attribute)": [[52, "prompting.protocol.StreamPrompting.required_hash_fields"]], "roles (prompting.protocol.prompting attribute)": [[52, "id0"], [52, "prompting.protocol.Prompting.roles"]], "roles (prompting.protocol.streamprompting attribute)": [[52, "prompting.protocol.StreamPrompting.roles"]], "validate_assignment (prompting.protocol.prompting.config attribute)": [[52, "prompting.protocol.Prompting.Config.validate_assignment"]], "add_args() (in module prompting.validators.config)": [[53, "prompting.validators.config.add_args"]], "check_config() (in module prompting.validators.config)": [[53, "prompting.validators.config.check_config"]], "config() (in module prompting.validators.config)": [[53, "prompting.validators.config.config"]], "prompting.validators.config": [[53, "module-prompting.validators.config"]], "characters (prompting.validators.criteria.textlengthunitenum attribute)": [[54, "prompting.validators.criteria.TextLengthUnitEnum.CHARACTERS"]], "contentmatchtypeenum (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.ContentMatchTypeEnum"]], "ends_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[54, "prompting.validators.criteria.ContentMatchTypeEnum.ENDS_WITH"]], "includes (prompting.validators.criteria.contentmatchtypeenum attribute)": [[54, "prompting.validators.criteria.ContentMatchTypeEnum.INCLUDES"]], "layoutmatchtypeenum (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.LayoutMatchTypeEnum"]], "matchcontentcriteria (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.MatchContentCriteria"]], "matchlayoutcriteria (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.MatchLayoutCriteria"]], "matchlengthcriteria (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.MatchLengthCriteria"]], "numbered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[54, "prompting.validators.criteria.LayoutMatchTypeEnum.NUMBERED_LIST"]], "paragraphs (prompting.validators.criteria.textlengthunitenum attribute)": [[54, "prompting.validators.criteria.TextLengthUnitEnum.PARAGRAPHS"]], "sentences (prompting.validators.criteria.textlengthunitenum attribute)": [[54, "prompting.validators.criteria.TextLengthUnitEnum.SENTENCES"]], "starts_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[54, "prompting.validators.criteria.ContentMatchTypeEnum.STARTS_WITH"]], "simpleresponselayoutcriteria (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.SimpleResponseLayoutCriteria"]], "taskcriterion (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.TaskCriterion"]], "textlengthunitenum (class in prompting.validators.criteria)": [[54, "prompting.validators.criteria.TextLengthUnitEnum"]], "unordered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[54, "prompting.validators.criteria.LayoutMatchTypeEnum.UNORDERED_LIST"]], "words (prompting.validators.criteria.textlengthunitenum attribute)": [[54, "prompting.validators.criteria.TextLengthUnitEnum.WORDS"]], "__post_init__() (prompting.validators.criteria.matchcontentcriteria method)": [[54, "prompting.validators.criteria.MatchContentCriteria.__post_init__"]], "_count_sentences() (prompting.validators.criteria.matchlengthcriteria method)": [[54, "prompting.validators.criteria.MatchLengthCriteria._count_sentences"]], "_get_completion_length() (prompting.validators.criteria.matchlengthcriteria method)": [[54, "prompting.validators.criteria.MatchLengthCriteria._get_completion_length"]], "_get_regex_pattern() (prompting.validators.criteria.matchcontentcriteria method)": [[54, "prompting.validators.criteria.MatchContentCriteria._get_regex_pattern"]], "compose_text() (prompting.validators.criteria.matchcontentcriteria method)": [[54, "prompting.validators.criteria.MatchContentCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlayoutcriteria method)": [[54, "prompting.validators.criteria.MatchLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlengthcriteria method)": [[54, "prompting.validators.criteria.MatchLengthCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[54, "prompting.validators.criteria.SimpleResponseLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.taskcriterion method)": [[54, "prompting.validators.criteria.TaskCriterion.compose_text"]], "contentmatchtype (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.contentMatchType"]], "default_text (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.default_text"]], "evaluate() (prompting.validators.criteria.matchcontentcriteria method)": [[54, "prompting.validators.criteria.MatchContentCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlayoutcriteria method)": [[54, "prompting.validators.criteria.MatchLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlengthcriteria method)": [[54, "prompting.validators.criteria.MatchLengthCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[54, "prompting.validators.criteria.SimpleResponseLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.taskcriterion method)": [[54, "prompting.validators.criteria.TaskCriterion.evaluate"]], "layout_type (prompting.validators.criteria.matchlayoutcriteria attribute)": [[54, "prompting.validators.criteria.MatchLayoutCriteria.layout_type"]], "n_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.n_words"]], "negate_match (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.negate_match"]], "penalty (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "id5"], [54, "prompting.validators.criteria.MatchContentCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlayoutcriteria attribute)": [[54, "id8"], [54, "prompting.validators.criteria.MatchLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlengthcriteria attribute)": [[54, "id3"], [54, "prompting.validators.criteria.MatchLengthCriteria.penalty"]], "penalty (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[54, "id6"], [54, "prompting.validators.criteria.SimpleResponseLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.taskcriterion attribute)": [[54, "id1"], [54, "prompting.validators.criteria.TaskCriterion.penalty"]], "prompting.validators.criteria": [[54, "module-prompting.validators.criteria"]], "sampled_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.sampled_words"]], "target_length (prompting.validators.criteria.matchlengthcriteria attribute)": [[54, "prompting.validators.criteria.MatchLengthCriteria.target_length"]], "text (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "id4"], [54, "prompting.validators.criteria.MatchContentCriteria.text"]], "text (prompting.validators.criteria.matchlayoutcriteria attribute)": [[54, "id9"], [54, "prompting.validators.criteria.MatchLayoutCriteria.text"]], "text (prompting.validators.criteria.matchlengthcriteria attribute)": [[54, "id2"], [54, "prompting.validators.criteria.MatchLengthCriteria.text"]], "text (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[54, "id7"], [54, "prompting.validators.criteria.SimpleResponseLayoutCriteria.text"]], "text (prompting.validators.criteria.taskcriterion attribute)": [[54, "id0"], [54, "prompting.validators.criteria.TaskCriterion.text"]], "unit (prompting.validators.criteria.matchlengthcriteria attribute)": [[54, "prompting.validators.criteria.MatchLengthCriteria.unit"]], "words_array (prompting.validators.criteria.matchcontentcriteria attribute)": [[54, "prompting.validators.criteria.MatchContentCriteria.words_array"]], "dataset (class in prompting.validators.dataset)": [[55, "prompting.validators.dataset.Dataset"]], "mockdataset (class in prompting.validators.dataset)": [[55, "prompting.validators.dataset.MockDataset"]], "__next__() (prompting.validators.dataset.dataset method)": [[55, "prompting.validators.dataset.Dataset.__next__"]], "__next__() (prompting.validators.dataset.mockdataset method)": [[55, "prompting.validators.dataset.MockDataset.__next__"]], "prompting.validators.dataset": [[55, "module-prompting.validators.dataset"]], "eventschema (class in prompting.validators.event)": [[56, "prompting.validators.event.EventSchema"]], "best (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.best"]], "blacklist_filter (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.blacklist_filter"]], "blacklist_filter_matched_ngram (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.blacklist_filter_matched_ngram"]], "blacklist_filter_significance_score (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.blacklist_filter_significance_score"]], "block (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.block"]], "completion_status_codes (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.completion_status_codes"]], "completion_status_messages (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.completion_status_messages"]], "completion_times (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.completion_times"]], "completions (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.completions"]], "dahoas_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.dahoas_reward_model"]], "dahoas_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.dahoas_reward_model_normalized"]], "diversity_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.diversity_reward_model"]], "diversity_reward_model_batch (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.diversity_reward_model_batch"]], "diversity_reward_model_historic (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.diversity_reward_model_historic"]], "diversity_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.diversity_reward_model_normalized"]], "dpo_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.dpo_reward_model"]], "dpo_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.dpo_reward_model_normalized"]], "from_dict() (prompting.validators.event.eventschema static method)": [[56, "prompting.validators.event.EventSchema.from_dict"]], "gating_loss (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.gating_loss"]], "keyword_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.keyword_match_penalty_adjusted"]], "keyword_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.keyword_match_penalty_applied"]], "keyword_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.keyword_match_penalty_raw"]], "name (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.name"]], "nsfw_filter (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.nsfw_filter"]], "nsfw_filter_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.nsfw_filter_normalized"]], "nsfw_filter_score (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.nsfw_filter_score"]], "prompt (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.prompt"]], "prompt_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.prompt_reward_model"]], "prompt_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.prompt_reward_model_normalized"]], "prompting.validators.event": [[56, "module-prompting.validators.event"]], "reciprocate_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.reciprocate_reward_model"]], "reciprocate_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.reciprocate_reward_model_normalized"]], "relevance_filter (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.relevance_filter"]], "relevance_filter_bert_score (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.relevance_filter_bert_score"]], "relevance_filter_mpnet_score (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.relevance_filter_mpnet_score"]], "relevance_filter_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.relevance_filter_normalized"]], "rewards (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.rewards"]], "rlhf_reward_model (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.rlhf_reward_model"]], "rlhf_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.rlhf_reward_model_normalized"]], "sentence_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.sentence_match_penalty_adjusted"]], "sentence_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.sentence_match_penalty_applied"]], "sentence_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.sentence_match_penalty_raw"]], "set_weights (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.set_weights"]], "step_length (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.step_length"]], "task_type (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.task_type"]], "task_validation_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.task_validation_penalty_adjusted"]], "task_validation_penalty_applied (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.task_validation_penalty_applied"]], "task_validation_penalty_raw (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.task_validation_penalty_raw"]], "uids (prompting.validators.event.eventschema attribute)": [[56, "prompting.validators.event.EventSchema.uids"]], "forward() (in module prompting.validators.forward)": [[57, "prompting.validators.forward.forward"]], "get_random_uids() (in module prompting.validators.forward)": [[57, "prompting.validators.forward.get_random_uids"]], "prompting.validators.forward": [[57, "module-prompting.validators.forward"]], "run_step() (in module prompting.validators.forward)": [[57, "prompting.validators.forward.run_step"]], "basegatingmodel (class in prompting.validators.gating)": [[58, "prompting.validators.gating.BaseGatingModel"]], "gatingmodel (class in prompting.validators.gating)": [[58, "prompting.validators.gating.GatingModel"]], "sentenceembedgatingmodel (class in prompting.validators.gating)": [[58, "prompting.validators.gating.SentenceEmbedGatingModel"]], "add_args() (prompting.validators.gating.basegatingmodel class method)": [[58, "prompting.validators.gating.BaseGatingModel.add_args"]], "backward() (prompting.validators.gating.basegatingmodel method)": [[58, "prompting.validators.gating.BaseGatingModel.backward"]], "backward() (prompting.validators.gating.gatingmodel method)": [[58, "prompting.validators.gating.GatingModel.backward"]], "backward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[58, "prompting.validators.gating.SentenceEmbedGatingModel.backward"]], "check_config() (prompting.validators.gating.basegatingmodel class method)": [[58, "prompting.validators.gating.BaseGatingModel.check_config"]], "config() (prompting.validators.gating.basegatingmodel class method)": [[58, "prompting.validators.gating.BaseGatingModel.config"]], "forward() (prompting.validators.gating.basegatingmodel method)": [[58, "prompting.validators.gating.BaseGatingModel.forward"]], "forward() (prompting.validators.gating.gatingmodel method)": [[58, "prompting.validators.gating.GatingModel.forward"]], "forward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[58, "prompting.validators.gating.SentenceEmbedGatingModel.forward"]], "mean_pooling() (prompting.validators.gating.sentenceembedgatingmodel method)": [[58, "prompting.validators.gating.SentenceEmbedGatingModel.mean_pooling"]], "prompting.validators.gating": [[58, "module-prompting.validators.gating"]], "resync() (prompting.validators.gating.basegatingmodel method)": [[58, "prompting.validators.gating.BaseGatingModel.resync"]], "resync() (prompting.validators.gating.gatingmodel method)": [[58, "prompting.validators.gating.GatingModel.resync"]], "resync() (prompting.validators.gating.sentenceembedgatingmodel method)": [[58, "prompting.validators.gating.SentenceEmbedGatingModel.resync"]], "__spec_version__ (in module prompting.validators)": [[59, "prompting.validators.__spec_version__"]], "__version__ (in module prompting.validators)": [[59, "prompting.validators.__version__"]], "prompting.validators": [[59, "module-prompting.validators"]], "version_split (in module prompting.validators)": [[59, "prompting.validators.version_split"]], "_ttl_hash_gen() (in module prompting.validators.misc)": [[60, "prompting.validators.misc._ttl_hash_gen"]], "prompting.validators.misc": [[60, "module-prompting.validators.misc"]], "ttl_cache() (in module prompting.validators.misc)": [[60, "prompting.validators.misc.ttl_cache"]], "ttl_get_block() (in module prompting.validators.misc)": [[60, "prompting.validators.misc.ttl_get_block"]], "contentmatchpenaltymodel (class in prompting.validators.penalty.content_match)": [[61, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.content_match.contentmatchpenaltymodel method)": [[61, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.content_match.contentmatchpenaltymodel property)": [[61, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.name"]], "prompting.validators.penalty.content_match": [[61, "module-prompting.validators.penalty.content_match"]], "basepenaltymodel (class in prompting.validators.penalty)": [[62, "prompting.validators.penalty.BasePenaltyModel"]], "contentmatchpenaltymodel (class in prompting.validators.penalty)": [[62, "prompting.validators.penalty.ContentMatchPenaltyModel"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty)": [[62, "prompting.validators.penalty.KeywordMatchPenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty)": [[62, "prompting.validators.penalty.PenaltyModelType"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty)": [[62, "prompting.validators.penalty.TaskValidationPenaltyModel"]], "__repr__() (prompting.validators.penalty.basepenaltymodel method)": [[62, "prompting.validators.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.basepenaltymodel method)": [[62, "prompting.validators.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[62, "prompting.validators.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[62, "prompting.validators.penalty.BasePenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.contentmatchpenaltymodel method)": [[62, "prompting.validators.penalty.ContentMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[62, "prompting.validators.penalty.KeywordMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.taskvalidationpenaltymodel method)": [[62, "prompting.validators.penalty.TaskValidationPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[62, "prompting.validators.penalty.KeywordMatchPenaltyModel.check_exploits_keywords"]], "keyword_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[62, "prompting.validators.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.basepenaltymodel property)": [[62, "prompting.validators.penalty.BasePenaltyModel.name"]], "name (prompting.validators.penalty.contentmatchpenaltymodel property)": [[62, "prompting.validators.penalty.ContentMatchPenaltyModel.name"]], "name (prompting.validators.penalty.keywordmatchpenaltymodel property)": [[62, "prompting.validators.penalty.KeywordMatchPenaltyModel.name"]], "name (prompting.validators.penalty.taskvalidationpenaltymodel property)": [[62, "prompting.validators.penalty.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty": [[62, "module-prompting.validators.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[62, "prompting.validators.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[62, "prompting.validators.penalty.PenaltyModelType.task_validation_penalty"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty.keyword_match)": [[63, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[63, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[63, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.check_exploits_keywords"]], "name (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel property)": [[63, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.name"]], "prompting.validators.penalty.keyword_match": [[63, "module-prompting.validators.penalty.keyword_match"]], "basepenaltymodel (class in prompting.validators.penalty.penalty)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty.penalty)": [[64, "prompting.validators.penalty.penalty.PenaltyModelType"]], "__repr__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel.calculate_penalties"]], "keyword_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[64, "prompting.validators.penalty.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.penalty.basepenaltymodel property)": [[64, "prompting.validators.penalty.penalty.BasePenaltyModel.name"]], "prompting.validators.penalty.penalty": [[64, "module-prompting.validators.penalty.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[64, "prompting.validators.penalty.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[64, "prompting.validators.penalty.penalty.PenaltyModelType.task_validation_penalty"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty.task_validation)": [[65, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel method)": [[65, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel property)": [[65, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty.task_validation": [[65, "module-prompting.validators.penalty.task_validation"]], "answerprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.AnswerPrompt"]], "augmentprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.AugmentPrompt"]], "baseprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.BasePrompt"]], "firewallprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.FirewallPrompt"]], "followupprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.FollowupPrompt"]], "scoringprompt (class in prompting.validators.prompts)": [[66, "prompting.validators.prompts.ScoringPrompt"]], "answer_prompt() (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.answer_prompt"]], "answer_scoring_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.answer_scoring_template"]], "augment_prompt() (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.augment_prompt"]], "augment_request_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.augment_request_template"]], "augment_scoring_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.augment_scoring_template"]], "detected() (prompting.validators.prompts.firewallprompt method)": [[66, "prompting.validators.prompts.FirewallPrompt.detected"]], "extract() (prompting.validators.prompts.baseprompt method)": [[66, "prompting.validators.prompts.BasePrompt.extract"]], "extract_score() (prompting.validators.prompts.scoringprompt method)": [[66, "prompting.validators.prompts.ScoringPrompt.extract_score"]], "find_unique_tags() (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.find_unique_tags"]], "firewall_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.firewall_template"]], "followup_prompt() (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.followup_prompt"]], "followup_request_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.followup_request_template"]], "followup_scoring_template (in module prompting.validators.prompts)": [[66, "prompting.validators.prompts.followup_scoring_template"]], "matches_template() (prompting.validators.prompts.baseprompt method)": [[66, "prompting.validators.prompts.BasePrompt.matches_template"]], "mock_response() (prompting.validators.prompts.firewallprompt static method)": [[66, "prompting.validators.prompts.FirewallPrompt.mock_response"]], "mock_response() (prompting.validators.prompts.scoringprompt static method)": [[66, "prompting.validators.prompts.ScoringPrompt.mock_response"]], "prompting.validators.prompts": [[66, "module-prompting.validators.prompts"]], "text() (prompting.validators.prompts.baseprompt method)": [[66, "prompting.validators.prompts.BasePrompt.text"]], "blacklist (class in prompting.validators.reward.blacklist)": [[67, "prompting.validators.reward.blacklist.Blacklist"]], "blacklistrewardevent (class in prompting.validators.reward.blacklist)": [[67, "prompting.validators.reward.blacklist.BlacklistRewardEvent"]], "_add_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.add"]], "calculate_significance() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.calculate_significance"]], "extract_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.extract_ngrams"]], "get_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.get_significance"]], "matched_ngram (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[67, "prompting.validators.reward.blacklist.BlacklistRewardEvent.matched_ngram"]], "most_common() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.most_significant"]], "name (prompting.validators.reward.blacklist.blacklist property)": [[67, "prompting.validators.reward.blacklist.Blacklist.name"]], "normalize_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.normalize_rewards"]], "prompting.validators.reward.blacklist": [[67, "module-prompting.validators.reward.blacklist"]], "prune() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.prune"]], "reset() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.reset"]], "reward() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.reward"]], "set_counter_to_half() (prompting.validators.reward.blacklist.blacklist method)": [[67, "prompting.validators.reward.blacklist.Blacklist.set_counter_to_half"]], "significance_score (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[67, "prompting.validators.reward.blacklist.BlacklistRewardEvent.significance_score"]], "defaultrewardframeworkconfig (class in prompting.validators.reward.config)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig"]], "rewardmodeltype (class in prompting.validators.reward.config)": [[68, "prompting.validators.reward.config.RewardModelType"]], "blacklist (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.blacklist"]], "dahoas (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.diversity"]], "dpo (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dpo_model_weight"]], "keyword_match (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.keyword_match"]], "nsfw (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.nsfw"]], "prompt (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward.config": [[68, "module-prompting.validators.reward.config"]], "reciprocate (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.relevance_mpnet"]], "rlhf (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[68, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "task_validator (prompting.validators.reward.config.rewardmodeltype attribute)": [[68, "prompting.validators.reward.config.RewardModelType.task_validator"]], "dahoasrewardmodel (class in prompting.validators.reward.dahoas)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel"]], "forward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.forward"]], "get_rewards() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.get_rewards"]], "load_weights() (prompting.validators.reward.dahoas.dahoasrewardmodel static method)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoas.dahoasrewardmodel attribute)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.model_name"]], "name (prompting.validators.reward.dahoas.dahoasrewardmodel property)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.name"]], "prompting.validators.reward.dahoas": [[69, "module-prompting.validators.reward.dahoas"]], "reward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[69, "prompting.validators.reward.dahoas.DahoasRewardModel.reward"]], "diversityrewardevent (class in prompting.validators.reward.diversity)": [[70, "prompting.validators.reward.diversity.DiversityRewardEvent"]], "diversityrewardmodel (class in prompting.validators.reward.diversity)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel"]], "batch (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[70, "prompting.validators.reward.diversity.DiversityRewardEvent.batch"]], "diversity_model_path (prompting.validators.reward.diversity.diversityrewardmodel attribute)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.diversity_model_path"]], "get_batch_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.get_rewards"]], "historic (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[70, "prompting.validators.reward.diversity.DiversityRewardEvent.historic"]], "mean_pooling() (in module prompting.validators.reward.diversity)": [[70, "prompting.validators.reward.diversity.mean_pooling"]], "name (prompting.validators.reward.diversity.diversityrewardmodel property)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.normalize_rewards"]], "prompting.validators.reward.diversity": [[70, "module-prompting.validators.reward.diversity"]], "update_historic_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[70, "prompting.validators.reward.diversity.DiversityRewardModel.update_historic_embeddings"]], "directpreferencerewardmodel (class in prompting.validators.reward.dpo)": [[71, "prompting.validators.reward.dpo.DirectPreferenceRewardModel"]], "get_rewards() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[71, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.get_rewards"]], "name (prompting.validators.reward.dpo.directpreferencerewardmodel property)": [[71, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.name"]], "prompting.validators.reward.dpo": [[71, "module-prompting.validators.reward.dpo"]], "reward_model_name (prompting.validators.reward.dpo.directpreferencerewardmodel attribute)": [[71, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[71, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_single"]], "baserewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.BaseRewardModel"]], "blacklist (class in prompting.validators.reward)": [[72, "prompting.validators.reward.Blacklist"]], "dahoasrewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.DahoasRewardModel"]], "defaultrewardframeworkconfig (class in prompting.validators.reward)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig"]], "directpreferencerewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.DirectPreferenceRewardModel"]], "diversityrewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.DiversityRewardModel"]], "nsfwrewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.NSFWRewardModel"]], "openassistantrewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.OpenAssistantRewardModel"]], "promptrewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.PromptRewardModel"]], "reciprocaterewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.ReciprocateRewardModel"]], "relevancerewardmodel (class in prompting.validators.reward)": [[72, "prompting.validators.reward.RelevanceRewardModel"]], "rewardmodeltype (class in prompting.validators.reward)": [[72, "prompting.validators.reward.RewardModelType"]], "__repr__() (prompting.validators.reward.baserewardmodel method)": [[72, "prompting.validators.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.baserewardmodel method)": [[72, "prompting.validators.reward.BaseRewardModel.__str__"]], "_add_ngrams() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.add"]], "apply() (prompting.validators.reward.baserewardmodel method)": [[72, "prompting.validators.reward.BaseRewardModel.apply"]], "blacklist (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.blacklist"]], "calculate_significance() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.calculate_significance"]], "dahoas (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.diversity"]], "diversity_model_path (prompting.validators.reward.diversityrewardmodel attribute)": [[72, "prompting.validators.reward.DiversityRewardModel.diversity_model_path"]], "dpo (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig.dpo_model_weight"]], "extract_ngrams() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.extract_ngrams"]], "forward() (prompting.validators.reward.dahoasrewardmodel method)": [[72, "prompting.validators.reward.DahoasRewardModel.forward"]], "get_batch_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.baserewardmodel method)": [[72, "prompting.validators.reward.BaseRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.get_rewards"]], "get_rewards() (prompting.validators.reward.dahoasrewardmodel method)": [[72, "prompting.validators.reward.DahoasRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.directpreferencerewardmodel method)": [[72, "prompting.validators.reward.DirectPreferenceRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[72, "prompting.validators.reward.NSFWRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.openassistantrewardmodel method)": [[72, "prompting.validators.reward.OpenAssistantRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.promptrewardmodel method)": [[72, "prompting.validators.reward.PromptRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.reciprocaterewardmodel method)": [[72, "prompting.validators.reward.ReciprocateRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[72, "prompting.validators.reward.RelevanceRewardModel.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.get_significance"]], "keyword_match (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.keyword_match"]], "load_weights() (prompting.validators.reward.dahoasrewardmodel static method)": [[72, "prompting.validators.reward.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoasrewardmodel attribute)": [[72, "prompting.validators.reward.DahoasRewardModel.model_name"]], "most_common() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.most_significant"]], "name (prompting.validators.reward.baserewardmodel property)": [[72, "prompting.validators.reward.BaseRewardModel.name"]], "name (prompting.validators.reward.blacklist property)": [[72, "prompting.validators.reward.Blacklist.name"]], "name (prompting.validators.reward.dahoasrewardmodel property)": [[72, "prompting.validators.reward.DahoasRewardModel.name"]], "name (prompting.validators.reward.directpreferencerewardmodel property)": [[72, "prompting.validators.reward.DirectPreferenceRewardModel.name"]], "name (prompting.validators.reward.diversityrewardmodel property)": [[72, "prompting.validators.reward.DiversityRewardModel.name"]], "name (prompting.validators.reward.nsfwrewardmodel property)": [[72, "prompting.validators.reward.NSFWRewardModel.name"]], "name (prompting.validators.reward.openassistantrewardmodel property)": [[72, "prompting.validators.reward.OpenAssistantRewardModel.name"]], "name (prompting.validators.reward.promptrewardmodel property)": [[72, "prompting.validators.reward.PromptRewardModel.name"]], "name (prompting.validators.reward.reciprocaterewardmodel property)": [[72, "prompting.validators.reward.ReciprocateRewardModel.name"]], "name (prompting.validators.reward.relevancerewardmodel property)": [[72, "prompting.validators.reward.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.baserewardmodel method)": [[72, "prompting.validators.reward.BaseRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[72, "prompting.validators.reward.NSFWRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[72, "prompting.validators.reward.RelevanceRewardModel.normalize_rewards"]], "nsfw (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.nsfw"]], "nsfw_filter_model_path (prompting.validators.reward.nsfwrewardmodel attribute)": [[72, "prompting.validators.reward.NSFWRewardModel.nsfw_filter_model_path"]], "prompt (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward": [[72, "module-prompting.validators.reward"]], "prune() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.prune"]], "reciprocate (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.relevance_mpnet"]], "reset() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.reset"]], "revision (prompting.validators.reward.reciprocaterewardmodel attribute)": [[72, "prompting.validators.reward.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.reward"]], "reward() (prompting.validators.reward.dahoasrewardmodel method)": [[72, "prompting.validators.reward.DahoasRewardModel.reward"]], "reward() (prompting.validators.reward.nsfwrewardmodel method)": [[72, "prompting.validators.reward.NSFWRewardModel.reward"]], "reward() (prompting.validators.reward.promptrewardmodel method)": [[72, "prompting.validators.reward.PromptRewardModel.reward"]], "reward() (prompting.validators.reward.reciprocaterewardmodel method)": [[72, "prompting.validators.reward.ReciprocateRewardModel.reward"]], "reward() (prompting.validators.reward.relevancerewardmodel method)": [[72, "prompting.validators.reward.RelevanceRewardModel.reward"]], "reward_model_name (prompting.validators.reward.directpreferencerewardmodel attribute)": [[72, "prompting.validators.reward.DirectPreferenceRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.openassistantrewardmodel attribute)": [[72, "prompting.validators.reward.OpenAssistantRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.promptrewardmodel attribute)": [[72, "prompting.validators.reward.PromptRewardModel.reward_model_name"]], "reward_model_path (prompting.validators.reward.reciprocaterewardmodel attribute)": [[72, "prompting.validators.reward.ReciprocateRewardModel.reward_model_path"]], "reward_single() (prompting.validators.reward.directpreferencerewardmodel method)": [[72, "prompting.validators.reward.DirectPreferenceRewardModel.reward_single"]], "reward_single() (prompting.validators.reward.openassistantrewardmodel method)": [[72, "prompting.validators.reward.OpenAssistantRewardModel.reward_single"]], "rlhf (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[72, "prompting.validators.reward.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "set_counter_to_half() (prompting.validators.reward.blacklist method)": [[72, "prompting.validators.reward.Blacklist.set_counter_to_half"]], "task_validator (prompting.validators.reward.rewardmodeltype attribute)": [[72, "prompting.validators.reward.RewardModelType.task_validator"]], "update_historic_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[72, "prompting.validators.reward.DiversityRewardModel.update_historic_embeddings"]], "nsfwrewardevent (class in prompting.validators.reward.nsfw)": [[73, "prompting.validators.reward.nsfw.NSFWRewardEvent"]], "nsfwrewardmodel (class in prompting.validators.reward.nsfw)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel"]], "get_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel.get_rewards"]], "name (prompting.validators.reward.nsfw.nsfwrewardmodel property)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel.normalize_rewards"]], "nsfw_filter_model_path (prompting.validators.reward.nsfw.nsfwrewardmodel attribute)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel.nsfw_filter_model_path"]], "prompting.validators.reward.nsfw": [[73, "module-prompting.validators.reward.nsfw"]], "reward() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[73, "prompting.validators.reward.nsfw.NSFWRewardModel.reward"]], "score (prompting.validators.reward.nsfw.nsfwrewardevent attribute)": [[73, "prompting.validators.reward.nsfw.NSFWRewardEvent.score"]], "openassistantrewardmodel (class in prompting.validators.reward.open_assistant)": [[74, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel"]], "get_rewards() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[74, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.get_rewards"]], "name (prompting.validators.reward.open_assistant.openassistantrewardmodel property)": [[74, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.name"]], "prompting.validators.reward.open_assistant": [[74, "module-prompting.validators.reward.open_assistant"]], "reward_model_name (prompting.validators.reward.open_assistant.openassistantrewardmodel attribute)": [[74, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[74, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_single"]], "promptrewardmodel (class in prompting.validators.reward.prompt)": [[75, "prompting.validators.reward.prompt.PromptRewardModel"]], "get_rewards() (prompting.validators.reward.prompt.promptrewardmodel method)": [[75, "prompting.validators.reward.prompt.PromptRewardModel.get_rewards"]], "name (prompting.validators.reward.prompt.promptrewardmodel property)": [[75, "prompting.validators.reward.prompt.PromptRewardModel.name"]], "prompting.validators.reward.prompt": [[75, "module-prompting.validators.reward.prompt"]], "reward() (prompting.validators.reward.prompt.promptrewardmodel method)": [[75, "prompting.validators.reward.prompt.PromptRewardModel.reward"]], "reward_model_name (prompting.validators.reward.prompt.promptrewardmodel attribute)": [[75, "prompting.validators.reward.prompt.PromptRewardModel.reward_model_name"]], "reciprocaterewardmodel (class in prompting.validators.reward.reciprocate)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel"]], "get_rewards() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.get_rewards"]], "name (prompting.validators.reward.reciprocate.reciprocaterewardmodel property)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.name"]], "prompting.validators.reward.reciprocate": [[76, "module-prompting.validators.reward.reciprocate"]], "revision (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward"]], "reward_model_path (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[76, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward_model_path"]], "bertrelevancerewardmodel (class in prompting.validators.reward.relevance)": [[77, "prompting.validators.reward.relevance.BertRelevanceRewardModel"]], "mpnetrelevencemodel (class in prompting.validators.reward.relevance)": [[77, "prompting.validators.reward.relevance.MpnetRelevenceModel"]], "relevancerewardevent (class in prompting.validators.reward.relevance)": [[77, "prompting.validators.reward.relevance.RelevanceRewardEvent"]], "relevancerewardmodel (class in prompting.validators.reward.relevance)": [[77, "prompting.validators.reward.relevance.RelevanceRewardModel"]], "bert_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[77, "prompting.validators.reward.relevance.RelevanceRewardEvent.bert_score"]], "diversity_model_path (prompting.validators.reward.relevance.mpnetrelevencemodel attribute)": [[77, "prompting.validators.reward.relevance.MpnetRelevenceModel.diversity_model_path"]], "get_embedding() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[77, "prompting.validators.reward.relevance.BertRelevanceRewardModel.get_embedding"]], "get_embeddings() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[77, "prompting.validators.reward.relevance.MpnetRelevenceModel.get_embeddings"]], "get_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[77, "prompting.validators.reward.relevance.RelevanceRewardModel.get_rewards"]], "mean_pooling() (in module prompting.validators.reward.relevance)": [[77, "prompting.validators.reward.relevance.mean_pooling"]], "mpnet_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[77, "prompting.validators.reward.relevance.RelevanceRewardEvent.mpnet_score"]], "name (prompting.validators.reward.relevance.bertrelevancerewardmodel property)": [[77, "prompting.validators.reward.relevance.BertRelevanceRewardModel.name"]], "name (prompting.validators.reward.relevance.mpnetrelevencemodel property)": [[77, "prompting.validators.reward.relevance.MpnetRelevenceModel.name"]], "name (prompting.validators.reward.relevance.relevancerewardmodel property)": [[77, "prompting.validators.reward.relevance.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[77, "prompting.validators.reward.relevance.RelevanceRewardModel.normalize_rewards"]], "prompting.validators.reward.relevance": [[77, "module-prompting.validators.reward.relevance"]], "relevance_model_path (prompting.validators.reward.relevance.bertrelevancerewardmodel attribute)": [[77, "prompting.validators.reward.relevance.BertRelevanceRewardModel.relevance_model_path"]], "reward() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[77, "prompting.validators.reward.relevance.BertRelevanceRewardModel.reward"]], "reward() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[77, "prompting.validators.reward.relevance.MpnetRelevenceModel.reward"]], "reward() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[77, "prompting.validators.reward.relevance.RelevanceRewardModel.reward"]], "baserewardevent (class in prompting.validators.reward.reward)": [[78, "prompting.validators.reward.reward.BaseRewardEvent"]], "baserewardmodel (class in prompting.validators.reward.reward)": [[78, "prompting.validators.reward.reward.BaseRewardModel"]], "__repr__() (prompting.validators.reward.reward.baserewardmodel method)": [[78, "prompting.validators.reward.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.reward.baserewardmodel method)": [[78, "prompting.validators.reward.reward.BaseRewardModel.__str__"]], "apply() (prompting.validators.reward.reward.baserewardmodel method)": [[78, "prompting.validators.reward.reward.BaseRewardModel.apply"]], "get_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[78, "prompting.validators.reward.reward.BaseRewardModel.get_rewards"]], "name (prompting.validators.reward.reward.baserewardmodel property)": [[78, "prompting.validators.reward.reward.BaseRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[78, "prompting.validators.reward.reward.BaseRewardModel.normalize_rewards"]], "normalized_reward (prompting.validators.reward.reward.baserewardevent attribute)": [[78, "prompting.validators.reward.reward.BaseRewardEvent.normalized_reward"]], "parse_reward_events() (prompting.validators.reward.reward.baserewardevent static method)": [[78, "prompting.validators.reward.reward.BaseRewardEvent.parse_reward_events"]], "prompting.validators.reward.reward": [[78, "module-prompting.validators.reward.reward"]], "reward (prompting.validators.reward.reward.baserewardevent attribute)": [[78, "prompting.validators.reward.reward.BaseRewardEvent.reward"]], "questionanswertask (class in prompting.validators.tasks)": [[79, "prompting.validators.tasks.QuestionAnswerTask"]], "questiongenerationtask (class in prompting.validators.tasks)": [[79, "prompting.validators.tasks.QuestionGenerationTask"]], "summarytask (class in prompting.validators.tasks)": [[79, "prompting.validators.tasks.SummaryTask"]], "task (class in prompting.validators.tasks)": [[79, "prompting.validators.tasks.Task"]], "base_text (prompting.validators.tasks.task attribute)": [[79, "prompting.validators.tasks.Task.base_text"]], "compose_prompt() (prompting.validators.tasks.questionanswertask method)": [[79, "prompting.validators.tasks.QuestionAnswerTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.questiongenerationtask method)": [[79, "prompting.validators.tasks.QuestionGenerationTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.summarytask method)": [[79, "prompting.validators.tasks.SummaryTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.task method)": [[79, "prompting.validators.tasks.Task.compose_prompt"]], "create_qa_task() (in module prompting.validators.tasks)": [[79, "prompting.validators.tasks.create_qa_task"]], "create_qg_task() (in module prompting.validators.tasks)": [[79, "prompting.validators.tasks.create_qg_task"]], "create_summarization_task() (in module prompting.validators.tasks)": [[79, "prompting.validators.tasks.create_summarization_task"]], "criteria (prompting.validators.tasks.task attribute)": [[79, "prompting.validators.tasks.Task.criteria"]], "prompting.validators.tasks": [[79, "module-prompting.validators.tasks"]], "task_name (prompting.validators.tasks.task attribute)": [[79, "prompting.validators.tasks.Task.task_name"]], "task_type (prompting.validators.tasks.task attribute)": [[79, "prompting.validators.tasks.Task.task_type"]], "check_uid_availability() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.check_uid_availability"]], "checkpoint() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.checkpoint"]], "init_wandb() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.init_wandb"]], "load_state() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.load_state"]], "prompting.validators.utils": [[80, "module-prompting.validators.utils"]], "reinit_wandb() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.reinit_wandb"]], "resync_linear_layer() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.resync_linear_layer"]], "resync_metagraph() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.resync_metagraph"]], "save_state() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.save_state"]], "should_checkpoint() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.should_checkpoint"]], "should_reinit_wandb() (in module prompting.validators.utils)": [[80, "prompting.validators.utils.should_reinit_wandb"]], "prompting.validators.weights": [[81, "module-prompting.validators.weights"]], "set_weights() (in module prompting.validators.weights)": [[81, "prompting.validators.weights.set_weights"]], "should_set_weights() (in module prompting.validators.weights)": [[81, "prompting.validators.weights.should_set_weights"]]}})