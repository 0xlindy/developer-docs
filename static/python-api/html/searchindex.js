Search.setIndex({"docnames": ["autoapi/bittensor/axon/index", "autoapi/bittensor/btlogging/index", "autoapi/bittensor/chain_data/index", "autoapi/bittensor/cli/index", "autoapi/bittensor/commands/delegates/index", "autoapi/bittensor/commands/identity/index", "autoapi/bittensor/commands/index", "autoapi/bittensor/commands/inspect/index", "autoapi/bittensor/commands/list/index", "autoapi/bittensor/commands/metagraph/index", "autoapi/bittensor/commands/misc/index", "autoapi/bittensor/commands/network/index", "autoapi/bittensor/commands/overview/index", "autoapi/bittensor/commands/register/index", "autoapi/bittensor/commands/root/index", "autoapi/bittensor/commands/senate/index", "autoapi/bittensor/commands/stake/index", "autoapi/bittensor/commands/transfer/index", "autoapi/bittensor/commands/unstake/index", "autoapi/bittensor/commands/utils/index", "autoapi/bittensor/commands/wallets/index", "autoapi/bittensor/config/index", "autoapi/bittensor/dendrite/index", "autoapi/bittensor/errors/index", "autoapi/bittensor/extrinsics/delegation/index", "autoapi/bittensor/extrinsics/index", "autoapi/bittensor/extrinsics/log_utilities/index", "autoapi/bittensor/extrinsics/network/index", "autoapi/bittensor/extrinsics/prometheus/index", "autoapi/bittensor/extrinsics/registration/index", "autoapi/bittensor/extrinsics/root/index", "autoapi/bittensor/extrinsics/senate/index", "autoapi/bittensor/extrinsics/serving/index", "autoapi/bittensor/extrinsics/set_weights/index", "autoapi/bittensor/extrinsics/staking/index", "autoapi/bittensor/extrinsics/transfer/index", "autoapi/bittensor/extrinsics/unstaking/index", "autoapi/bittensor/index", "autoapi/bittensor/keyfile/index", "autoapi/bittensor/metagraph/index", "autoapi/bittensor/stream/index", "autoapi/bittensor/subtensor/index", "autoapi/bittensor/synapse/index", "autoapi/bittensor/tensor/index", "autoapi/bittensor/threadpool/index", "autoapi/bittensor/types/index", "autoapi/bittensor/utils/_register_cuda/index", "autoapi/bittensor/utils/balance/index", "autoapi/bittensor/utils/formatting/index", "autoapi/bittensor/utils/index", "autoapi/bittensor/utils/networking/index", "autoapi/bittensor/utils/registration/index", "autoapi/bittensor/utils/stats/index", "autoapi/bittensor/utils/test_utils/index", "autoapi/bittensor/utils/wallet_utils/index", "autoapi/bittensor/utils/weight_utils/index", "autoapi/bittensor/wallet/index", "autoapi/index", "autoapi/miner/index", "autoapi/neurons/index", "autoapi/neurons/validators/index", "autoapi/neurons/validators/validator/index", "autoapi/prompting/baseminer/blacklist/index", "autoapi/prompting/baseminer/config/index", "autoapi/prompting/baseminer/index", "autoapi/prompting/baseminer/miner/index", "autoapi/prompting/baseminer/priority/index", "autoapi/prompting/baseminer/run/index", "autoapi/prompting/baseminer/set_weights/index", "autoapi/prompting/index", "autoapi/prompting/protocol/index", "autoapi/prompting/validators/config/index", "autoapi/prompting/validators/criteria/index", "autoapi/prompting/validators/dataset/index", "autoapi/prompting/validators/event/index", "autoapi/prompting/validators/forward/index", "autoapi/prompting/validators/gating/index", "autoapi/prompting/validators/index", "autoapi/prompting/validators/misc/index", "autoapi/prompting/validators/penalty/content_match/index", "autoapi/prompting/validators/penalty/index", "autoapi/prompting/validators/penalty/keyword_match/index", "autoapi/prompting/validators/penalty/penalty/index", "autoapi/prompting/validators/penalty/task_validation/index", "autoapi/prompting/validators/prompts/index", "autoapi/prompting/validators/reward/blacklist/index", "autoapi/prompting/validators/reward/config/index", "autoapi/prompting/validators/reward/dahoas/index", "autoapi/prompting/validators/reward/diversity/index", "autoapi/prompting/validators/reward/dpo/index", "autoapi/prompting/validators/reward/index", "autoapi/prompting/validators/reward/nsfw/index", "autoapi/prompting/validators/reward/open_assistant/index", "autoapi/prompting/validators/reward/prompt/index", "autoapi/prompting/validators/reward/reciprocate/index", "autoapi/prompting/validators/reward/relevance/index", "autoapi/prompting/validators/reward/reward/index", "autoapi/prompting/validators/tasks/index", "autoapi/prompting/validators/utils/index", "autoapi/prompting/validators/weights/index", "index", "testing"], "filenames": ["autoapi/bittensor/axon/index.rst", "autoapi/bittensor/btlogging/index.rst", "autoapi/bittensor/chain_data/index.rst", "autoapi/bittensor/cli/index.rst", "autoapi/bittensor/commands/delegates/index.rst", "autoapi/bittensor/commands/identity/index.rst", "autoapi/bittensor/commands/index.rst", "autoapi/bittensor/commands/inspect/index.rst", "autoapi/bittensor/commands/list/index.rst", "autoapi/bittensor/commands/metagraph/index.rst", "autoapi/bittensor/commands/misc/index.rst", "autoapi/bittensor/commands/network/index.rst", "autoapi/bittensor/commands/overview/index.rst", "autoapi/bittensor/commands/register/index.rst", "autoapi/bittensor/commands/root/index.rst", "autoapi/bittensor/commands/senate/index.rst", "autoapi/bittensor/commands/stake/index.rst", "autoapi/bittensor/commands/transfer/index.rst", "autoapi/bittensor/commands/unstake/index.rst", "autoapi/bittensor/commands/utils/index.rst", "autoapi/bittensor/commands/wallets/index.rst", "autoapi/bittensor/config/index.rst", "autoapi/bittensor/dendrite/index.rst", "autoapi/bittensor/errors/index.rst", "autoapi/bittensor/extrinsics/delegation/index.rst", "autoapi/bittensor/extrinsics/index.rst", "autoapi/bittensor/extrinsics/log_utilities/index.rst", "autoapi/bittensor/extrinsics/network/index.rst", "autoapi/bittensor/extrinsics/prometheus/index.rst", "autoapi/bittensor/extrinsics/registration/index.rst", "autoapi/bittensor/extrinsics/root/index.rst", "autoapi/bittensor/extrinsics/senate/index.rst", "autoapi/bittensor/extrinsics/serving/index.rst", "autoapi/bittensor/extrinsics/set_weights/index.rst", "autoapi/bittensor/extrinsics/staking/index.rst", "autoapi/bittensor/extrinsics/transfer/index.rst", "autoapi/bittensor/extrinsics/unstaking/index.rst", "autoapi/bittensor/index.rst", "autoapi/bittensor/keyfile/index.rst", "autoapi/bittensor/metagraph/index.rst", "autoapi/bittensor/stream/index.rst", "autoapi/bittensor/subtensor/index.rst", "autoapi/bittensor/synapse/index.rst", "autoapi/bittensor/tensor/index.rst", "autoapi/bittensor/threadpool/index.rst", "autoapi/bittensor/types/index.rst", "autoapi/bittensor/utils/_register_cuda/index.rst", "autoapi/bittensor/utils/balance/index.rst", "autoapi/bittensor/utils/formatting/index.rst", "autoapi/bittensor/utils/index.rst", "autoapi/bittensor/utils/networking/index.rst", "autoapi/bittensor/utils/registration/index.rst", "autoapi/bittensor/utils/stats/index.rst", "autoapi/bittensor/utils/test_utils/index.rst", "autoapi/bittensor/utils/wallet_utils/index.rst", "autoapi/bittensor/utils/weight_utils/index.rst", "autoapi/bittensor/wallet/index.rst", "autoapi/index.rst", "autoapi/miner/index.rst", "autoapi/neurons/index.rst", "autoapi/neurons/validators/index.rst", "autoapi/neurons/validators/validator/index.rst", "autoapi/prompting/baseminer/blacklist/index.rst", "autoapi/prompting/baseminer/config/index.rst", "autoapi/prompting/baseminer/index.rst", "autoapi/prompting/baseminer/miner/index.rst", "autoapi/prompting/baseminer/priority/index.rst", "autoapi/prompting/baseminer/run/index.rst", "autoapi/prompting/baseminer/set_weights/index.rst", "autoapi/prompting/index.rst", "autoapi/prompting/protocol/index.rst", "autoapi/prompting/validators/config/index.rst", "autoapi/prompting/validators/criteria/index.rst", "autoapi/prompting/validators/dataset/index.rst", "autoapi/prompting/validators/event/index.rst", "autoapi/prompting/validators/forward/index.rst", "autoapi/prompting/validators/gating/index.rst", "autoapi/prompting/validators/index.rst", "autoapi/prompting/validators/misc/index.rst", "autoapi/prompting/validators/penalty/content_match/index.rst", "autoapi/prompting/validators/penalty/index.rst", "autoapi/prompting/validators/penalty/keyword_match/index.rst", "autoapi/prompting/validators/penalty/penalty/index.rst", "autoapi/prompting/validators/penalty/task_validation/index.rst", "autoapi/prompting/validators/prompts/index.rst", "autoapi/prompting/validators/reward/blacklist/index.rst", "autoapi/prompting/validators/reward/config/index.rst", "autoapi/prompting/validators/reward/dahoas/index.rst", "autoapi/prompting/validators/reward/diversity/index.rst", "autoapi/prompting/validators/reward/dpo/index.rst", "autoapi/prompting/validators/reward/index.rst", "autoapi/prompting/validators/reward/nsfw/index.rst", "autoapi/prompting/validators/reward/open_assistant/index.rst", "autoapi/prompting/validators/reward/prompt/index.rst", "autoapi/prompting/validators/reward/reciprocate/index.rst", "autoapi/prompting/validators/reward/relevance/index.rst", "autoapi/prompting/validators/reward/reward/index.rst", "autoapi/prompting/validators/tasks/index.rst", "autoapi/prompting/validators/utils/index.rst", "autoapi/prompting/validators/weights/index.rst", "index.rst", "testing.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.axon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.btlogging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.chain_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.delegates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.identity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.inspect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.list</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.metagraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.network</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.overview</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.register</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.root</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.senate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.stake</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.transfer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.unstake</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.wallets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.dendrite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.errors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.delegation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.log_utilities</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.network</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.prometheus</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.registration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.root</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.senate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.serving</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.staking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.transfer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.unstaking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.keyfile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.metagraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.stream</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.subtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.synapse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.threadpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils._register_cuda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.balance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.formatting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.networking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.registration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.stats</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.test_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.wallet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.utils.weight_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.wallet</span></code>", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators.validator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.priority</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.run</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.protocol</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.event</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.forward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.gating</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.content_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.keyword_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.task_validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.prompts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dahoas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.diversity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.nsfw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.open_assistant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.prompt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reciprocate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.relevance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.tasks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.weights</span></code>", "Welcome to Bittensor API Documentation", "Documentation Updates"], "terms": {"creat": [0, 2, 3, 5, 6, 11, 20, 21, 37, 38, 39, 40, 41, 42, 49, 51, 54, 56, 57, 63, 70, 72, 76, 79, 80, 82, 83, 86, 88, 90, 95, 97], "init": 0, "whcih": 0, "servic": [0, 37, 41], "forward": [0, 6, 10, 22, 37, 57, 67, 69, 76, 77, 87, 88, 90, 95], "backward": [0, 76], "request": [0, 6, 15, 22, 26, 37, 40, 41, 42, 58, 65, 67], "from": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 51, 55, 56, 58, 63, 65, 70, 73, 75, 84, 85, 89, 90, 98], "other": [0, 2, 5, 6, 9, 11, 14, 15, 17, 22, 37, 39, 41, 44, 47, 56, 65, 67, 68, 84], "neuron": [0, 2, 6, 7, 9, 11, 12, 13, 14, 16, 18, 20, 22, 23, 26, 33, 37, 39, 41, 55, 57, 98, 100], "fastapithreadedserv": 0, "config": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 37, 39, 40, 41, 42, 43, 44, 56, 57, 58, 61, 64, 65, 69, 70, 76, 77, 90], "base": [0, 2, 4, 6, 11, 13, 14, 19, 20, 21, 22, 23, 29, 37, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 58, 65, 70, 72, 73, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98], "uvicorn": 0, "server": [0, 22, 26, 37, 40], "fastapi": [0, 22, 37], "run": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 29, 37, 41, 44, 49, 51, 56, 57, 61, 63, 64, 65, 69, 76, 88, 90, 95, 98], "thread": [0, 6, 13, 29, 37, 44, 46, 49, 51, 65], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 62, 63, 65, 66, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "should_exit": [0, 67], "bool": [0, 1, 2, 6, 13, 16, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 47, 49, 51, 54, 56, 62, 65, 68, 72, 74, 78, 84, 85, 90, 98, 99], "fals": [0, 1, 2, 6, 7, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 49, 51, 54, 56, 68, 72, 78, 84, 87, 90, 98], "is_run": 0, "install_signal_handl": 0, "run_in_thread": 0, "_wrapper_run": 0, "start": [0, 6, 13, 20, 26, 37, 41, 46, 51, 58, 65, 67, 72, 98], "stop": [0, 37, 51, 65, 67], "wallet": [0, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 47, 49, 51, 57, 61, 63, 65, 68], "none": [0, 1, 3, 4, 6, 14, 19, 20, 21, 22, 24, 26, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 54, 55, 56, 58, 65, 68, 74, 75, 76, 87, 90], "port": [0, 2, 6, 12, 28, 32, 37, 41, 42, 45, 50], "ip": [0, 2, 6, 12, 22, 28, 32, 37, 39, 41, 42, 45, 50], "external_ip": [0, 22, 26, 37, 50], "external_port": [0, 37], "max_work": [0, 37, 44], "The": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 26, 29, 32, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 54, 56, 58, 63, 65, 67, 68, 70, 76, 84, 85, 88, 90, 95, 96, 98, 101], "i": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 54, 55, 56, 58, 65, 67, 68, 70, 75, 76, 84, 85, 88, 89, 90, 95, 98, 101], "an": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 17, 20, 22, 23, 28, 32, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 56, 58, 65, 67, 68, 70, 74, 76, 79, 80, 82, 83, 84, 85, 90, 97], "object": [0, 1, 2, 3, 4, 11, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 51, 56, 58, 63, 65, 68, 70, 71, 74, 76, 84, 98], "form": [0, 6, 17, 21, 37, 39, 41, 50, 58], "core": [0, 37, 39, 49, 50, 51], "part": [0, 4, 5, 6, 7, 9, 14, 20, 37, 39, 40, 41, 84], "": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 26, 29, 34, 37, 38, 39, 40, 41, 42, 49, 51, 56, 58, 65, 67, 68, 70, 84, 85, 88, 89, 90, 95, 96], "serv": [0, 2, 6, 13, 25, 28, 37, 39, 41, 45, 57, 67, 98], "synaps": [0, 22, 26, 37, 40, 57, 58, 62, 65, 66, 70, 80, 82, 90, 96], "reli": [0, 4, 22, 37, 84], "heavili": [0, 37], "underli": [0, 37, 39, 41], "router": [0, 37, 50], "which": [0, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 20, 21, 30, 33, 37, 39, 40, 41, 42, 56, 58, 65, 67, 70, 84, 89, 90], "util": [0, 2, 6, 20, 24, 34, 35, 36, 37, 39, 41, 57, 58, 69, 77], "endpoint": [0, 2, 6, 9, 22, 26, 28, 32, 37, 41, 50], "differ": [0, 1, 3, 5, 6, 11, 12, 14, 16, 17, 18, 20, 21, 37, 39, 41, 42, 47, 49, 51, 70, 84, 85, 88, 90, 95, 96], "messag": [0, 1, 6, 13, 22, 37, 41, 56, 58, 63, 65, 70, 76, 88, 90, 95], "type": [0, 1, 2, 3, 4, 6, 7, 12, 15, 16, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 65, 66, 68, 70, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "method": [0, 2, 6, 11, 13, 22, 37, 39, 40, 41, 42, 44, 47, 51, 58, 63, 65, 68, 70, 72, 76, 80, 82, 85, 86, 88, 90, 95, 96], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 26, 35, 37, 38, 39, 40, 41, 42, 44, 47, 51, 56, 57, 58, 63, 65, 67, 68, 70, 76, 84, 85, 88, 90, 95, 96, 100, 101], "ar": [0, 4, 6, 8, 10, 11, 13, 14, 15, 20, 21, 22, 23, 37, 38, 39, 41, 42, 43, 44, 49, 56, 58, 63, 65, 67, 70, 76, 84, 85, 88, 90, 95, 96, 101], "equip": [0, 37], "deal": [0, 37, 70], "incom": [0, 37, 41, 58, 65, 67, 70], "scenario": [0, 22, 37, 38, 70], "network": [0, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 25, 26, 28, 30, 32, 37, 39, 40, 41, 49, 51, 55, 57, 65, 67, 68, 70, 76, 98], "face": [0, 37, 41, 50], "It": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 37, 38, 39, 40, 41, 44, 47, 63, 65, 70, 76, 84, 85, 88, 90, 95, 96], "accept": [0, 1, 37, 44, 56], "multipl": [0, 4, 6, 12, 13, 20, 22, 37, 41, 49, 51, 65, 76, 88, 95], "argument": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 20, 21, 37, 41, 44, 56, 58, 63, 65, 76], "like": [0, 3, 11, 19, 37, 39, 41, 65, 84], "configur": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 16, 20, 21, 37, 39, 41, 58, 63, 65, 67, 70, 76, 86, 90], "address": [0, 4, 5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 20, 22, 24, 34, 35, 36, 37, 39, 41, 49, 54, 56, 84], "bind": [0, 37], "extern": [0, 22, 37, 50, 67], "max": [0, 37, 55, 58], "worker": [0, 37, 44, 51], "kei": [0, 2, 3, 5, 6, 8, 9, 11, 15, 17, 20, 30, 33, 35, 37, 38, 39, 41, 49, 54, 56], "involv": [0, 6, 10, 11, 15, 37, 41, 70], "manag": [0, 3, 6, 12, 18, 20, 21, 22, 37, 39, 40, 41, 56, 67, 68, 70], "oper": [0, 3, 4, 6, 10, 11, 13, 14, 16, 18, 20, 22, 37, 38, 39, 41, 47, 55, 56, 58, 65, 67, 68], "applic": [0, 4, 5, 6, 37, 39, 40], "includ": [0, 4, 5, 6, 7, 9, 11, 12, 13, 15, 20, 22, 26, 27, 31, 34, 36, 37, 39, 40, 41, 65, 70, 72, 84, 101], "attach": [0, 37, 67], "offer": [0, 6, 12, 14, 37, 41, 70], "flexibl": [0, 6, 13, 18, 37, 41], "specifi": [0, 4, 6, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 22, 24, 34, 36, 37, 39, 41, 49, 54, 70], "custom": [0, 6, 12, 13, 37, 39, 41, 42, 58, 63, 65, 70, 76], "rule": [0, 37, 41], "blacklist": [0, 37, 42, 57, 64, 65, 67, 69, 77, 86, 90], "priorit": [0, 37, 65], "verifi": [0, 4, 6, 13, 17, 37, 38, 41], "against": [0, 6, 13, 26, 37, 38, 51, 70], "function": [0, 5, 6, 9, 11, 14, 22, 26, 40, 41, 65, 70, 76, 85, 90, 96], "also": [0, 4, 5, 6, 9, 11, 13, 20, 22, 37, 40, 41, 51, 56, 63, 65, 70], "encapsul": [0, 22, 37, 39, 40, 65, 70, 76], "add": [0, 3, 6, 13, 16, 21, 34, 37, 41, 42, 58, 65, 76, 85, 86, 90], "command": [0, 3, 21, 37, 57, 58, 63, 65, 76], "line": [0, 3, 4, 5, 6, 21, 37, 41, 49, 51, 58, 63, 65, 76], "user": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 56, 58, 70], "friendli": [0, 11, 37], "interact": [0, 4, 5, 6, 11, 37, 39, 41, 47, 58, 70], "program": [0, 37], "support": [0, 4, 6, 13, 20, 37, 38, 41, 85, 90], "handl": [0, 3, 4, 5, 6, 22, 26, 37, 39, 40, 41, 50, 58, 65, 67, 70], "defin": [0, 11, 37, 38, 41, 65, 67, 70, 72, 76], "behavior": [0, 6, 11, 15, 37, 39, 41, 42, 65, 70], "intern": [0, 22, 37, 39, 40, 41, 65, 70], "mechan": [0, 6, 13, 14, 37, 39, 41], "pool": [0, 37, 76, 88, 95], "concurr": [0, 22, 37, 44], "us": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 26, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 49, 51, 56, 58, 65, 68, 70, 76, 79, 80, 82, 83, 84, 85, 88, 89, 90, 95, 96, 97], "prioriti": [0, 37, 44, 56, 57, 64, 65, 67, 69], "level": [0, 5, 6, 11, 15, 37, 39, 41, 68], "exampl": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 37, 39, 41, 65, 70, 72, 80, 82, 84, 86, 90, 101], "usag": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 37, 39, 41], "python": [0, 4, 37, 42, 70, 100], "import": [0, 6, 10, 13, 14, 18, 20, 37, 39, 41, 65], "mysyanps": [0, 37], "input": [0, 2, 4, 5, 6, 22, 37, 38, 41, 42, 56, 76, 84], "int": [0, 1, 2, 4, 6, 12, 13, 16, 20, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 68, 72, 74, 75, 76, 78, 84, 85, 90, 97, 98], "1": [0, 2, 4, 5, 6, 9, 10, 11, 13, 14, 21, 26, 37, 39, 41, 44, 46, 49, 52, 55, 57, 67, 68, 69, 72, 77, 78, 80, 82, 85, 86, 88, 90, 95, 96, 101], "output": [0, 4, 6, 8, 12, 13, 14, 37, 39, 51, 70, 76, 88, 95], "def": [0, 37, 65], "appli": [0, 37, 39, 41, 76, 88, 90, 95, 96], "logic": [0, 37, 40, 42, 65, 70], "return": [0, 1, 2, 3, 4, 6, 7, 11, 12, 15, 16, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 58, 62, 63, 65, 66, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "2": [0, 2, 6, 10, 11, 14, 21, 37, 41, 67, 68, 72, 77, 80, 82, 86, 90, 101], "verif": [0, 4, 6, 13, 37, 42], "verify_my_synaps": [0, 37], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 34, 36, 37, 38, 39, 41, 42, 43, 49, 51, 54, 56, 58, 67, 68, 85, 90], "rais": [0, 22, 23, 24, 34, 36, 37, 38, 41, 43, 44, 49, 50, 51, 54, 56, 63, 65, 67, 68, 73], "except": [0, 1, 5, 6, 11, 21, 22, 23, 29, 37, 38, 43, 44, 50, 51, 63, 65, 67, 68], "fucntion": [0, 37], "blacklist_my_synaps": [0, 37], "non": [0, 23, 29, 37, 38, 42, 56, 65], "true": [0, 1, 2, 6, 7, 10, 11, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 54, 56, 67, 70, 84, 85, 89, 90, 98], "prioritize_my_synap": [0, 37], "float": [0, 2, 4, 6, 16, 17, 18, 22, 24, 26, 30, 33, 34, 35, 36, 37, 41, 42, 47, 49, 51, 52, 55, 65, 66, 72, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 95, 96], "0": [0, 2, 4, 6, 9, 11, 14, 22, 29, 30, 32, 33, 37, 41, 46, 49, 50, 51, 52, 55, 68, 69, 72, 76, 84, 85, 86, 88, 90, 95, 96, 101], "initi": [0, 2, 4, 6, 11, 13, 14, 22, 37, 39, 40, 41, 44, 58, 63, 67, 70, 85, 90], "my_axon": [0, 37], "my_config": [0, 37], "my_wallet": [0, 4, 6, 16, 37], "9090": [0, 37], "192": [0, 28, 32, 37], "203": [0, 37], "113": [0, 37], "7070": [0, 37], "forward_fn": [0, 37], "forward_my_synaps": [0, 37], "verify_fn": [0, 37], "blacklist_fn": [0, 37], "priority_fn": [0, 37], "forward_my_synapse_2": [0, 37], "verify_my_synapse_2": [0, 37], "blacklist_my_synapse_2": [0, 37], "prioritize_my_synape_2": [0, 37], "netuid": [0, 2, 6, 7, 9, 11, 12, 13, 14, 26, 27, 28, 29, 30, 32, 33, 37, 39, 41, 45, 49, 51, 55, 68], "subtensor": [0, 4, 5, 6, 9, 11, 13, 14, 19, 20, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 49, 51, 55, 57, 61, 63, 65, 68], "str": [0, 1, 2, 3, 4, 6, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 51, 54, 56, 58, 62, 70, 72, 74, 76, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "info": [0, 1, 2, 5, 6, 26, 37, 49, 54], "associ": [0, 2, 4, 5, 6, 7, 8, 12, 15, 16, 18, 37, 39, 41, 44, 72], "axoninfo": [0, 2, 22, 37, 41], "regist": [0, 4, 6, 11, 12, 14, 15, 19, 23, 24, 27, 29, 30, 31, 34, 36, 37, 41, 49, 51, 57, 65], "api": [0, 37, 41], "name": [0, 2, 4, 5, 6, 7, 9, 11, 14, 15, 16, 18, 19, 20, 26, 27, 37, 38, 39, 41, 42, 49, 56, 58, 70, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "first": [0, 6, 10, 11, 20, 34, 37, 39, 42, 65, 76, 84, 85, 88, 90, 95, 96], "callabl": [0, 37, 40, 44, 49, 51, 62, 66], "call": [0, 4, 5, 6, 9, 11, 15, 22, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 65, 90, 96], "when": [0, 6, 10, 13, 15, 16, 18, 19, 20, 22, 23, 37, 39, 42, 44, 49, 50, 51, 54, 58, 65, 70, 73, 84, 85, 90], "access": [0, 2, 6, 11, 20, 22, 37, 39, 41, 42, 56, 70, 72, 80, 82, 86, 90], "should": [0, 4, 5, 6, 10, 11, 13, 15, 17, 20, 22, 29, 37, 39, 40, 42, 49, 51, 56, 58, 65, 70, 72, 84, 86, 90, 98], "have": [0, 2, 4, 5, 6, 11, 13, 14, 16, 37, 39, 41, 42, 44, 72, 80, 82, 85, 86, 90], "least": [0, 37], "one": [0, 2, 5, 6, 16, 17, 18, 20, 21, 22, 37, 39, 41, 44, 51, 63], "filter": [0, 1, 6, 12, 37], "out": [0, 1, 6, 10, 37], "undesir": [0, 37], "take": [0, 2, 4, 6, 21, 24, 37, 40, 41, 49], "same": [0, 26, 37, 38, 39, 49, 51, 56, 84], "boolean": [0, 21, 37, 39, 49], "valu": [0, 2, 4, 5, 6, 11, 13, 19, 20, 21, 27, 30, 33, 37, 39, 41, 42, 43, 47, 49, 50, 51, 52, 55, 65, 68, 70, 72, 76, 80, 82, 84, 85, 86, 88, 90, 95, 96], "default": [0, 4, 5, 6, 8, 9, 13, 21, 22, 34, 36, 37, 38, 39, 41, 42, 46, 49, 51, 56, 63, 65, 68, 76, 85, 86, 90], "mean": [0, 37, 42, 49, 51, 65, 70, 76, 84, 85, 88, 90, 95, 96], "rank": [0, 2, 5, 6, 9, 12, 37, 39, 41, 84], "numer": [0, 4, 37, 39, 84], "repres": [0, 6, 9, 22, 37, 38, 39, 41, 42, 43, 44, 47, 70, 84], "sort": [0, 4, 6, 12, 26, 37, 49, 85, 90], "If": [0, 4, 5, 6, 7, 9, 10, 11, 13, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 49, 51, 54, 58, 65, 67, 68, 75, 84], "self": [0, 2, 4, 6, 21, 22, 26, 37, 38, 39, 41, 42, 47, 52, 62, 65, 66, 67, 75, 78, 80, 82, 84, 90, 96, 98, 99], "default_verifi": [0, 37], "note": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 37, 39, 41, 50, 51, 56, 70, 75, 76, 84, 85, 86, 88, 90, 95, 96, 101], "design": [0, 4, 5, 6, 11, 22, 37, 38, 40, 41, 65, 70], "receiv": [0, 6, 9, 12, 22, 37, 39, 40, 41, 65, 84], "assertionerror": [0, 37], "doe": [0, 4, 5, 6, 7, 8, 11, 12, 13, 37, 38, 42, 49, 51, 84], "signatur": [0, 19, 37, 40, 42], "yoursynaps": [0, 37], "instanc": [0, 22, 37, 39, 41, 42, 44, 65, 70], "axonserv": [0, 37], "potenti": [0, 4, 6, 11, 20, 37, 41, 70], "chain": [0, 4, 5, 6, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 45, 55, 68], "classmethod": [0, 1, 2, 6, 11, 15, 16, 18, 19, 21, 37, 41, 42, 44, 56, 58, 61, 65, 76], "pars": [0, 21, 22, 37, 40, 42], "set": [0, 1, 3, 4, 5, 6, 7, 10, 11, 13, 14, 16, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 51, 53, 56, 58, 63, 65, 67, 68, 70, 75, 85, 90], "help": [0, 1, 4, 6, 15, 20, 37, 41, 56, 63, 70], "print": [0, 1, 4, 6, 8, 9, 12, 21, 22, 26, 37, 38, 39, 41, 49, 51, 56, 63, 70], "text": [0, 1, 19, 26, 37, 72, 76, 84, 85, 88, 90, 95, 100], "list": [0, 2, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 26, 29, 30, 33, 34, 36, 37, 39, 41, 42, 43, 49, 51, 55, 56, 57, 58, 70, 72, 74, 75, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "descript": [0, 4, 6, 19, 37, 39], "stdout": [0, 1, 37, 41, 56], "add_arg": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 37, 41, 44, 56, 58, 61, 65, 71, 76], "parser": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 37, 41, 44, 56, 58, 61, 65, 71, 76], "prefix": [0, 1, 37, 41, 42, 44, 56], "specif": [0, 1, 4, 6, 11, 12, 13, 15, 20, 26, 27, 37, 39, 40, 41, 42, 44, 56, 58, 65, 70, 72, 84], "argpars": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 37, 41, 44, 56, 58, 65, 76], "argumentpars": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 37, 41, 44, 56, 58, 65, 76], "ad": [0, 2, 6, 11, 16, 37, 42, 58, 65, 72, 76, 80, 82, 86, 90, 101], "environ": [0, 4, 6, 13, 37, 38, 39, 41, 46, 51, 85, 88, 90, 95, 96], "variabl": [0, 37, 38, 42], "async": [0, 22, 37, 40, 62, 70, 75], "verify_body_integr": [0, 37], "asynchron": [0, 22, 37, 40, 70], "integr": [0, 37, 39, 41, 84], "bodi": [0, 6, 14, 15, 37, 40, 41, 42], "compar": [0, 26, 37, 85, 88, 90, 95, 96], "hash": [0, 6, 15, 37, 41, 42, 46, 49, 51, 70], "requir": [0, 4, 6, 11, 13, 14, 17, 20, 23, 26, 37, 38, 39, 40, 41, 49, 50, 51, 56, 65, 70], "field": [0, 5, 6, 37, 42, 58, 65, 70], "correspond": [0, 5, 6, 14, 30, 33, 37, 39, 41, 46, 58], "provid": [0, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 20, 22, 24, 37, 38, 39, 40, 41, 42, 47, 58, 65, 70, 79, 80, 82, 83, 84, 97, 100], "header": [0, 22, 37, 40, 42, 65, 70], "critic": [0, 6, 11, 13, 16, 20, 37, 39, 41, 84], "ensur": [0, 4, 6, 10, 11, 13, 17, 20, 22, 37, 39, 40, 41, 58, 63, 67, 70, 84, 85, 88, 90, 95, 96], "payload": [0, 37], "ha": [0, 2, 4, 5, 6, 7, 11, 12, 21, 22, 37, 39, 40, 41, 51, 65, 70, 85, 90, 98], "been": [0, 21, 22, 37, 40, 41, 42, 44, 65, 70, 85, 90], "alter": [0, 11, 37], "tamper": [0, 37], "dure": [0, 6, 11, 13, 20, 22, 37, 39, 41, 51, 67, 70], "transmiss": [0, 37], "establish": [0, 6, 20, 22, 37, 41], "trust": [0, 2, 5, 6, 9, 12, 37, 39, 41, 67, 68], "secur": [0, 6, 11, 13, 16, 20, 37, 39, 41], "between": [0, 4, 6, 17, 29, 37, 39, 41, 47, 55, 76, 84], "sender": [0, 37], "contain": [0, 6, 9, 20, 22, 37, 39, 40, 41, 51, 56, 57, 58, 65, 70, 72, 76, 84, 85, 88, 90, 95], "both": [0, 4, 6, 7, 11, 12, 16, 20, 37, 41, 58, 70], "dictionari": [0, 2, 26, 37, 39, 41, 42, 49, 54, 70, 74, 85, 90], "all": [0, 4, 6, 7, 8, 9, 11, 12, 15, 16, 18, 20, 21, 22, 26, 29, 34, 36, 37, 39, 41, 44, 50, 51, 63, 68, 84, 85, 86, 88, 90, 95], "comparison": [0, 37, 47], "match": [0, 37, 51, 76, 84, 88, 95], "indic": [0, 4, 6, 8, 9, 11, 12, 21, 22, 37, 38, 39, 41, 42, 49, 65, 76, 84, 88, 95], "intact": [0, 37], "dict": [0, 2, 19, 21, 22, 26, 37, 39, 40, 41, 42, 49, 51, 54, 56, 70, 74, 85, 90, 96], "jsonrespons": [0, 37], "400": [0, 37], "statu": [0, 4, 6, 9, 12, 15, 20, 26, 37, 39, 41, 42, 51], "code": [0, 4, 6, 7, 9, 37, 42, 56], "ani": [0, 2, 4, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 23, 27, 34, 36, 37, 39, 40, 41, 42, 43, 46, 49, 51, 65, 72, 84], "fail": [0, 11, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 44, 50], "issu": [0, 11, 37, 41, 70], "respons": [0, 6, 13, 14, 15, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 58, 65, 70, 72, 80, 82, 84, 90, 96], "detail": [0, 2, 4, 5, 6, 7, 9, 11, 12, 13, 15, 16, 20, 37, 39, 41, 42, 58, 63, 65, 70, 72, 80, 82, 86, 90], "error": [0, 1, 6, 11, 13, 17, 22, 34, 36, 37, 41, 43, 46, 49, 51, 56, 57, 67, 68, 76, 85, 88, 90, 95, 96], "mismatch": [0, 37], "assum": [0, 37, 39, 41], "depend": [0, 37, 65], "rout": [0, 37], "app": [0, 37], "post": [0, 37], "some_endpoint": [0, 37], "body_dict": [0, 37], "avail": [0, 4, 6, 8, 11, 16, 19, 37, 39, 41, 63, 65, 75, 98], "onli": [0, 5, 6, 7, 8, 10, 11, 12, 37, 39, 42, 56, 70, 84, 85, 90], "execut": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 34, 36, 37, 39, 41, 44, 51], "success": [0, 1, 4, 5, 6, 13, 15, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42], "check_config": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 37, 61, 63, 71, 76], "check": [0, 1, 3, 4, 6, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 37, 38, 41, 42, 49, 50, 51, 54, 56, 63, 65, 67, 70, 71, 84, 98], "hold": [0, 6, 14, 15, 20, 37, 39, 41, 56, 63, 68], "rang": [0, 4, 6, 37, 41, 50, 84, 85, 88, 90, 95, 96], "1024": [0, 37], "65535": [0, 2, 37, 49, 55], "to_str": [0, 2, 21, 37], "human": [0, 6, 12, 37, 39, 42, 70], "readabl": [0, 6, 11, 12, 23, 37, 38, 39, 42], "represent": [0, 2, 6, 12, 22, 32, 37, 38, 39, 42, 50, 55, 56, 76, 88, 95], "__str__": [0, 2, 21, 22, 37, 38, 39, 41, 42, 47, 56, 80, 82, 90, 96], "__repr__": [0, 2, 21, 22, 37, 38, 39, 41, 42, 47, 56, 80, 82, 90, 96], "machin": [0, 37, 39, 41], "unambigu": [0, 37, 39], "made": [0, 37, 41], "ident": [0, 6, 23, 37, 41, 49, 54, 57], "case": [0, 11, 22, 37, 41, 70], "__del__": [0, 22, 37], "magic": [0, 37], "about": [0, 6, 9, 11, 12, 22, 37, 39, 40, 41, 70, 84], "destroi": [0, 22, 37], "shut": [0, 37], "down": [0, 6, 15, 37], "properli": [0, 37, 39, 58], "grpc": [0, 37, 41], "mark": [0, 4, 6, 37], "pass": [0, 11, 21, 24, 30, 33, 34, 37, 38, 40, 41, 50, 55, 56, 76, 88, 90, 95], "connect": [0, 5, 6, 11, 22, 23, 37, 39, 41, 51, 68], "subnet": [0, 2, 4, 5, 6, 7, 11, 13, 14, 29, 34, 36, 37, 41, 49, 51, 55, 68, 100], "uid": [0, 2, 6, 9, 12, 14, 16, 26, 27, 28, 30, 32, 33, 34, 36, 37, 39, 41, 55, 68, 74, 75, 76, 98], "authent": [0, 11, 37, 39], "digit": [0, 37, 39, 41], "wa": [0, 19, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 65, 84], "sent": [0, 4, 6, 37, 40, 65], "expect": [0, 22, 37, 39, 40, 70, 84], "receiver_hotkei": [0, 37], "doesn": [0, 37, 84], "t": [0, 21, 37, 38, 39, 49, 84], "nonc": [0, 6, 13, 29, 37, 42, 46, 49, 51], "larger": [0, 37, 75, 84], "than": [0, 37, 55, 75, 84, 98], "previou": [0, 4, 6, 37, 39, 76, 98], "after": [0, 22, 37, 39, 40, 44, 51, 55, 76, 88, 95], "given": [0, 26, 30, 33, 37, 39, 41, 42, 43, 44, 47, 49, 51, 54, 63, 70, 84, 85, 88, 89, 90, 95, 96], "updat": [0, 5, 6, 9, 10, 11, 12, 13, 20, 22, 29, 37, 38, 39, 41, 46, 51, 52, 65, 67, 68, 70, 76, 85, 88, 90, 95, 96, 98], "process": [0, 4, 6, 11, 13, 14, 15, 16, 18, 20, 22, 29, 37, 39, 40, 41, 43, 49, 51, 58, 65, 67, 70, 84, 98], "asymmetr": [0, 37], "encrypt": [0, 6, 8, 20, 37, 38, 56], "algorithm": [0, 37, 39, 41, 85, 88, 90, 95, 96], "where": [0, 4, 6, 7, 11, 13, 22, 37, 38, 39, 41, 47, 51, 63, 76, 84, 88, 95], "sign": [0, 22, 37, 39, 41], "privat": [0, 37], "public": [0, 6, 8, 9, 17, 20, 35, 37, 39, 41, 56], "axonmiddlewar": 0, "starlett": [0, 37, 40, 70], "middlewar": 0, "basehttpmiddlewar": 0, "entir": [0, 4, 6, 9, 22, 37, 84], "fill": [0, 22, 37, 58, 65], "necessari": [0, 6, 11, 13, 37, 39, 41, 63], "inform": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 22, 29, 37, 39, 40, 41, 46, 51, 68, 70, 84], "log": [0, 1, 6, 13, 22, 26, 29, 37, 39, 46, 51, 63, 65, 67, 68, 89, 90], "dispatch": 0, "call_next": 0, "requestresponseendpoint": 0, "preprocess": [0, 22, 37, 85, 90], "perform": [0, 4, 5, 6, 7, 10, 11, 13, 20, 37, 39, 40, 41, 47, 65, 67, 68, 70], "gener": [0, 6, 20, 22, 37, 40, 41, 56, 57, 58, 70, 76, 88, 95], "state": [0, 4, 5, 6, 7, 8, 9, 11, 12, 22, 37, 39, 41, 67, 70, 76, 84, 98], "A": [0, 4, 6, 13, 14, 20, 21, 22, 37, 39, 40, 41, 42, 44, 47, 49, 51, 52, 54, 58, 63, 65, 70, 84, 85, 90], "determin": [0, 4, 6, 11, 13, 22, 37, 39, 41, 65, 68, 84], "urgenc": 0, "param": [0, 11, 21, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 47, 49, 50, 51, 55, 56, 75, 76, 88, 90, 95, 98], "time": [0, 6, 9, 12, 20, 26, 37, 39, 41, 44, 51, 52, 84], "starlet": 0, "postprocess": 0, "start_tim": [0, 26, 44], "standard": [1, 6, 20, 37, 39, 41, 79, 80, 82, 83, 85, 88, 90, 95, 96, 97], "logger": [1, 24, 26, 30, 33, 41], "_remove_loguru_ansi_direct": 1, "__has_been_inited__": [1, 37], "__debug_on__": [1, 37], "__trace_on__": [1, 37], "__std_sink__": [1, 37], "__file_sink__": [1, 37], "get": [1, 6, 11, 14, 20, 21, 22, 29, 37, 39, 42, 44, 49, 51, 52, 56, 85, 90], "fro": [1, 37], "set_debug": [1, 37], "debug_on": [1, 37], "debug": [1, 37, 39, 70], "cl": [1, 37, 63, 71], "set_trac": [1, 37], "trace_on": [1, 37], "trace": [1, 37, 65], "back": [1, 4, 6, 10, 11, 18, 22, 37, 40, 65], "get_level": [1, 37], "log_filt": [1, 37], "record": [1, 37, 39], "log_save_filt": [1, 37], "log_formatt": [1, 37], "format": [1, 4, 5, 6, 8, 11, 12, 14, 20, 22, 26, 37, 39, 40, 41, 47, 49, 50, 54, 57, 70, 72, 84], "accord": [1, 6, 13, 37, 39, 40], "extra": [1, 37, 84], "log_save_formatt": [1, 37], "_format": [1, 37], "sufix": [1, 37], "warn": [1, 37, 56], "traceback": [1, 22, 37, 65], "custom_rpc_type_registri": [2, 37], "properti": [2, 22, 37, 38, 39, 41, 42, 44, 47, 56, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "is_serv": [2, 37], "version": [2, 6, 10, 30, 33, 37, 38, 39, 41, 42, 45, 50, 76], "ip_typ": [2, 37, 45, 50], "hotkei": [2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 20, 23, 24, 30, 33, 34, 36, 37, 39, 41, 42, 46, 51, 56, 65, 76, 98], "coldkei": [2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 18, 20, 34, 36, 37, 39, 41, 56], "protocol": [2, 3, 6, 15, 20, 32, 37, 41, 57, 62, 66, 69], "4": [2, 4, 6, 10, 11, 13, 14, 26, 28, 32, 37, 50, 67, 68, 77, 86, 90], "placeholder1": [2, 32, 37, 41], "placeholder2": [2, 32, 37, 41], "ip_str": [2, 37, 50], "whole": [2, 37], "string": [2, 5, 6, 20, 21, 22, 26, 37, 38, 39, 41, 42, 43, 47, 49, 50, 54, 56, 70, 84, 85, 90], "__eq__": [2, 37, 47], "repr": [2, 21, 37, 38, 39, 41, 47, 80, 82, 90, 96], "convert": [2, 5, 6, 37, 39, 42, 47, 49, 54, 55, 70, 74], "json": [2, 6, 19, 20, 22, 37, 40, 56, 70], "from_str": [2, 37], "its": [2, 4, 6, 10, 11, 22, 37, 39, 41, 42, 58, 65, 67, 68, 70, 76, 84, 88, 95], "from_neuron_info": [2, 37], "neuron_info": [2, 37], "axon_info": [2, 37], "to_parameter_dict": [2, 37], "torch": [2, 22, 26, 30, 33, 37, 39, 41, 43, 49, 55, 72, 75, 76, 79, 80, 81, 82, 83, 85, 88, 90, 91, 95, 96, 98], "tensor": [2, 26, 37, 39, 42, 49, 55, 57, 72, 76, 88, 95], "nn": [2, 22, 26, 37, 39, 76, 98], "parameterdict": [2, 37], "from_parameter_dict": [2, 37], "parameter_dict": [2, 37], "chaindatatyp": [2, 37], "arg": [2, 3, 21, 22, 26, 37, 44, 49, 50, 51, 54, 58, 72, 76, 80, 82, 84, 85, 86, 88, 90, 95, 96], "kwd": [2, 37, 72, 80, 82, 86, 90], "enum": [2, 37, 72, 80, 82, 86, 90], "collect": [2, 21, 37, 39, 41, 72, 73, 80, 82, 86, 90], "pair": [2, 6, 7, 37, 41, 72, 80, 82, 86, 90], "enumer": [2, 6, 8, 37, 72, 80, 82, 86, 90], "color": [2, 37, 72, 80, 82, 86, 90], "red": [2, 4, 6, 37, 72, 80, 82, 84, 86, 90], "blue": [2, 37, 72, 80, 82, 86, 90], "green": [2, 4, 6, 37, 72, 80, 82, 84, 86, 90], "3": [2, 6, 10, 11, 14, 26, 29, 37, 41, 50, 51, 67, 68, 72, 80, 82, 85, 86, 90, 101], "them": [2, 6, 13, 15, 18, 22, 37, 40, 41, 56, 70, 72, 80, 82, 86, 90], "lookup": [2, 37, 72, 80, 82, 86, 90], "can": [2, 4, 6, 7, 12, 13, 16, 17, 18, 20, 22, 37, 39, 40, 41, 44, 51, 56, 58, 63, 65, 70, 72, 80, 82, 84, 86, 90], "iter": [2, 22, 37, 39, 41, 72, 73, 80, 82, 86, 90], "over": [2, 4, 6, 11, 22, 37, 39, 72, 80, 82, 86, 90, 98], "know": [2, 37, 41, 72, 80, 82, 86, 90], "how": [2, 6, 14, 26, 37, 39, 41, 65, 67, 70, 72, 80, 82, 84, 86, 90], "mani": [2, 26, 37, 72, 80, 82, 84, 86, 90], "member": [2, 6, 14, 15, 37, 41, 72, 80, 82, 86, 90], "thei": [2, 6, 11, 14, 15, 37, 38, 39, 41, 58, 65, 70, 72, 80, 82, 85, 86, 88, 90, 95, 96], "len": [2, 37, 72, 80, 82, 86, 90], "own": [2, 4, 6, 37, 39, 42, 65, 72, 80, 82, 84, 86, 90], "see": [2, 6, 11, 15, 37, 41, 42, 72, 80, 82, 86, 90], "document": [2, 37, 41, 57, 72, 80, 82, 86, 90], "neuroninfo": [2, 37, 41], "subnetinfo": [2, 37, 41], "delegateinfo": [2, 4, 15, 37, 41], "neuroninfolit": [2, 6, 12, 37, 41], "delegatedinfo": [2, 37], "5": [2, 6, 11, 14, 21, 37, 67, 85, 90], "stakeinfo": [2, 37, 41], "6": [2, 6, 14, 37, 50, 67, 84, 85, 86, 90], "ipinfo": [2, 37, 41], "7": [2, 6, 14, 37, 84], "subnethyperparamet": [2, 37, 41], "8": [2, 6, 11, 14, 37, 49, 51, 70, 84], "raopertao": [2, 37, 49], "1000000000": [2, 11, 37, 49], "u16_max": [2, 37, 49, 55], "u64_max": [2, 37, 49], "18446744073709551615": [2, 37, 49], "from_scale_encod": [2, 37], "type_nam": [2, 37], "is_vec": [2, 37], "is_opt": [2, 37], "union": [2, 22, 24, 26, 29, 30, 33, 34, 35, 36, 37, 41, 43, 47, 49, 51, 54, 56, 62, 90, 96], "byte": [2, 5, 6, 37, 38, 41, 46, 49, 51, 54, 56], "scalecodec": [2, 37], "scalebyt": [2, 37], "from_scale_encoding_using_type_str": [2, 37], "type_str": [2, 37], "dataclass": [2, 37], "metadata": [2, 37, 39, 70], "activ": [2, 4, 6, 7, 9, 12, 13, 15, 16, 37, 39, 41, 67], "stake": [2, 4, 5, 6, 7, 9, 12, 14, 18, 20, 23, 24, 25, 35, 36, 37, 39, 41, 56, 57, 65, 98], "balanc": [2, 4, 6, 7, 12, 13, 16, 17, 20, 24, 34, 35, 36, 37, 41, 49, 56, 57], "stake_dict": [2, 37], "total_stak": [2, 37, 39, 41], "emiss": [2, 6, 7, 9, 11, 12, 37, 39, 41], "incent": [2, 6, 9, 12, 37, 39, 41], "consensu": [2, 6, 9, 12, 15, 37, 39, 41], "validator_trust": [2, 37, 39], "dividend": [2, 6, 9, 12, 37, 39], "last_upd": [2, 26, 37, 39], "validator_permit": [2, 37, 39], "weight": [2, 6, 14, 26, 30, 33, 37, 39, 41, 51, 55, 56, 57, 67, 68, 69, 77, 86, 90], "bond": [2, 37, 39, 41, 55], "prometheus_info": [2, 37], "prometheusinfo": [2, 37], "pruning_scor": [2, 37], "is_nul": [2, 37], "fix_decoded_valu": [2, 37], "neuron_info_decod": [2, 37], "fix": [2, 37, 41], "from_vec_u8": [2, 37], "vec_u8": [2, 37], "list_from_vec_u8": [2, 37], "static": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 37, 39, 41, 43, 47, 51, 74, 84, 87, 90, 96], "_null_neuron": [2, 37, 41], "from_weights_bonds_and_neuron_lit": [2, 37], "neuron_lit": [2, 37], "weights_as_dict": [2, 37], "bonds_as_dict": [2, 37], "tupl": [2, 6, 12, 37, 41, 46, 51, 56, 62, 85, 90], "_neuron_dict_to_namespac": [2, 37], "neuron_dict": [2, 37], "without": [2, 6, 13, 22, 37, 38, 41, 65, 84], "prometheu": [2, 25, 26, 37, 41, 45, 57], "block": [2, 6, 9, 13, 15, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 46, 49, 51, 65, 67, 74], "prometheus_info_decod": [2, 37], "deleg": [2, 5, 6, 7, 11, 15, 16, 23, 25, 34, 37, 39, 40, 41, 57], "hotkey_ss58": [2, 6, 12, 34, 36, 37, 41], "nomin": [2, 4, 6, 23, 37, 41], "owner_ss58": [2, 37], "registr": [2, 6, 11, 13, 16, 23, 25, 37, 41, 49, 57, 67], "return_per_1000": [2, 37], "total_daily_return": [2, 37], "decod": [2, 37, 41, 70], "delegated_list_from_vec_u8": [2, 37], "amount": [2, 4, 6, 7, 11, 12, 13, 16, 17, 18, 24, 34, 35, 36, 37, 39, 41, 47, 52, 84], "coldkey_ss58": [2, 37, 41], "list_of_tuple_from_vec_u8": [2, 37], "rho": [2, 6, 9, 11, 12, 37, 41], "kappa": [2, 11, 37, 41], "difficulti": [2, 6, 9, 11, 37, 41, 46, 51], "immunity_period": [2, 11, 37, 41], "max_allowed_valid": [2, 37, 41], "min_allowed_weight": [2, 11, 26, 37, 41], "max_weight_limit": [2, 11, 26, 37, 41], "scaling_law_pow": [2, 37, 41], "subnetwork_n": [2, 37, 41], "max_n": [2, 11, 37, 41], "blocks_since_epoch": [2, 37, 41], "tempo": [2, 11, 37, 41], "modal": [2, 37], "connection_requir": [2, 37], "emission_valu": [2, 37], "burn": [2, 6, 11, 13, 37, 41], "hyperparamet": [2, 11, 27, 37, 41], "min_difficulti": [2, 11, 37], "max_difficulti": [2, 11, 37], "weights_vers": [2, 11, 37], "weights_rate_limit": [2, 11, 37], "adjustment_interv": [2, 11, 37], "activity_cutoff": [2, 11, 37], "registration_allow": [2, 11, 37], "target_regs_per_interv": [2, 11, 37], "min_burn": [2, 11, 37], "max_burn": [2, 11, 37], "bonds_moving_avg": [2, 11, 37], "max_regs_per_block": [2, 11, 37], "encod": [2, 37, 41, 42, 49, 54, 65, 70, 76, 88, 90, 95], "proposalvotedata": [2, 15, 37, 41], "typeddict": [2, 37, 41, 45], "new": [2, 5, 6, 11, 13, 20, 22, 27, 37, 39, 41, 42, 49, 51, 56, 58, 67, 98], "empti": [2, 37, 38, 41, 49], "map": [2, 37, 41, 49, 50], "via": [2, 37, 41, 65], "d": [2, 21, 22, 37, 39, 41], "k": [2, 37, 41, 49, 75], "v": [2, 37, 41], "kwarg": [2, 21, 22, 37, 40, 41, 44, 58], "keyword": [2, 37, 41], "For": [2, 6, 13, 22, 37, 39, 41, 42, 67, 70], "two": [2, 11, 21, 37, 41, 47, 51], "index": [2, 4, 6, 37, 41, 49, 85, 90, 97], "threshold": [2, 6, 15, 37, 41], "ay": [2, 6, 15, 37], "nai": [2, 6, 15, 37], "end": [2, 6, 15, 26, 37, 72], "proposalcalldata": [2, 15, 37, 41], "inherit": [22, 37, 42, 70, 79, 80, 82, 83, 97], "pytorch": [22, 37, 39, 76], "abstract": [21, 22, 37, 39, 40, 51, 58, 65, 72, 76, 80, 82, 90, 96, 97], "implement": [3, 11, 21, 22, 37, 40, 41, 42, 44, 56, 58, 65, 70], "client": [22, 37, 40], "In": [11, 21, 22, 26, 37, 39, 42, 50, 70], "brain": [22, 37], "analogi": [22, 37], "signal": [22, 37], "axon": [6, 9, 12, 22, 32, 37, 39, 41, 42, 45, 57, 63, 65, 67, 70], "here": [22, 37, 39, 41, 58, 70], "send": [4, 6, 11, 17, 22, 37, 39, 40, 41], "those": [6, 20, 22, 37, 84], "reciev": [22, 35, 37, 65], "keypair": [22, 37, 38, 56], "make": [4, 5, 6, 11, 12, 14, 15, 22, 35, 37, 39, 41, 42, 51, 58, 67, 84], "http": [22, 37, 41, 42, 85, 90], "local": [3, 4, 6, 10, 22, 37, 39, 41, 50], "system": [6, 13, 22, 37, 38, 39, 41, 58, 70, 84], "synapse_histori": [22, 37], "histor": [22, 37, 39, 88], "act": [22, 37, 39, 41, 65], "fallback": [22, 37], "queri": [5, 6, 9, 11, 22, 23, 26, 37, 39, 41, 68], "synchron": [22, 37, 39, 41], "target": [6, 13, 22, 37, 41, 90, 91], "streamingsynaps": [22, 37, 40, 70], "timeout": [22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 49, 70, 75], "12": [6, 14, 22, 37, 56], "deseri": [22, 37, 38, 40, 42, 43, 65, 70], "run_async": [22, 37], "stream": [22, 37, 57, 70], "collat": [22, 37], "asyncgener": [22, 37], "bittenst": [22, 37], "target_axon": [22, 37], "call_stream": [22, 37], "yield": [22, 37], "chunk": [22, 37, 40, 70], "befor": [4, 6, 10, 13, 15, 16, 17, 18, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 46, 49, 51, 65, 76, 98], "final": [22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 51, 70], "element": [22, 37, 39, 43, 76, 88, 95], "preprocess_synapse_for_request": [22, 37], "target_axon_info": [22, 37], "build": [22, 37], "process_server_respons": [22, 37], "server_respons": [22, 37], "json_respons": [22, 37], "local_synaps": [22, 37], "merg": [21, 22, 37], "close_sess": [22, 37], "close": [22, 37], "aiohttp": [22, 37], "session": [22, 37, 39], "aclose_sess": [22, 37], "work": [6, 11, 13, 22, 37, 44, 49, 51, 70], "recommend": [6, 10, 20, 22, 37], "context": [11, 22, 37, 38, 39, 41, 42, 58, 65, 70, 84], "aysnc": [22, 37], "ping": [22, 37], "howev": [22, 37, 39, 70], "you": [22, 23, 24, 37, 39, 70, 84], "abl": [22, 37], "safe": [22, 37, 44, 56], "clientsess": [22, 37], "alreadi": [4, 6, 15, 22, 37, 49, 51], "instanti": [22, 37, 40], "manner": [11, 22, 37, 39], "resourc": [6, 11, 13, 22, 37, 39, 41, 44, 65], "ti": [22, 37], "releas": [22, 37, 39, 101], "longer": [6, 15, 22, 37], "need": [6, 11, 13, 14, 15, 20, 22, 37, 38, 39, 41, 70], "typic": [4, 6, 13, 16, 22, 37, 39, 40, 41, 42, 63, 65, 70], "cleanup": [22, 37], "phase": [22, 37], "dendrite_inst": [22, 37], "similar": [6, 11, 20, 22, 37, 39], "within": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 49, 51, 54, 70, 84], "relat": [6, 14, 22, 23, 37, 41, 58, 70, 84], "await": [22, 37, 40], "_get_endpoint_url": [22, 37], "request_nam": [22, 37], "_handle_request_error": [22, 37], "_log_outgoing_request": [22, 37], "_log_incoming_respons": [22, 37], "automat": [22, 37, 39], "upon": [4, 5, 6, 8, 10, 11, 14, 22, 37, 39, 41, 65], "complet": [6, 20, 22, 37, 39, 44, 58, 65, 70, 72, 74, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "durat": [22, 37, 41], "second": [21, 22, 37, 52, 78, 84], "singl": [4, 6, 7, 22, 37, 41, 51, 70, 84], "bridg": [22, 37], "sequenti": [22, 37], "off": [22, 37, 49], "unifi": [22, 37], "data": [4, 6, 7, 10, 11, 12, 14, 15, 20, 22, 26, 37, 38, 39, 40, 41, 42, 43, 51, 65, 70], "each": [4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 21, 22, 26, 34, 36, 37, 39, 41, 51, 56, 58, 67, 70, 72, 76, 90, 96], "individu": [22, 37, 41, 70], "dendrt": [22, 37], "maximum": [4, 5, 6, 11, 16, 18, 22, 26, 29, 37, 41], "wait": [22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 44, 67], "otherwis": [19, 22, 37, 41, 42, 44, 49, 51, 54, 85, 90, 98], "through": [22, 37, 41, 56, 76, 84, 88, 90, 95], "larg": [22, 37, 90, 92], "piec": [11, 22, 37], "transmit": [22, 37], "arbitrari": [22, 37], "exhaust": [22, 37, 73], "attribut": [5, 22, 39, 70, 72, 80, 82, 86, 90], "silent": [22, 37], "ignor": [22, 37, 38, 65], "user_wallet_address": [22, 37], "__aenter__": [22, 37], "entri": [4, 6, 22, 37, 41], "enabl": [6, 13, 17, 20, 22, 37, 39, 41, 68], "statement": [22, 37, 65, 84], "enter": [4, 5, 6, 11, 19, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 56, 65], "current": [4, 6, 10, 11, 13, 14, 15, 17, 21, 22, 26, 37, 38, 39, 41, 42, 51, 68, 70], "some_async_method": [22, 37], "__aexit__": [22, 37], "exc_typ": [22, 37, 65], "exc_valu": [22, 37, 65], "exit": [6, 13, 22, 29, 37, 65], "proper": [22, 37, 39, 58], "baseexcept": [22, 23, 37], "tracebacktyp": [22, 37], "stack": [22, 37, 65], "point": [22, 37, 39, 41, 72], "destructor": [22, 37], "invok": [22, 37, 39, 65, 70], "fulli": [22, 37, 84], "remain": [6, 18, 22, 37, 39, 42, 67], "unpredict": [22, 37], "explicitli": [6, 10, 22, 37, 39, 84], "some": [6, 13, 22, 37, 84], "del": [22, 37], "implicitli": [22, 37], "chainerror": [23, 37], "chainconnectionerror": [23, 37], "chaintransactionerror": [23, 37], "transact": [4, 5, 6, 7, 13, 17, 20, 23, 24, 37, 39, 41], "chainqueryerror": [23, 37], "stakeerror": [23, 34, 36, 37, 41], "unstakeerror": [23, 37], "unstak": [6, 23, 24, 25, 37, 41, 56, 57], "identityerror": [23, 37], "nominationerror": [23, 37], "transfererror": [23, 37], "transfer": [3, 6, 18, 23, 25, 37, 41, 56, 57], "registrationerror": [23, 37], "notregisterederror": [23, 24, 34, 36, 37], "notdelegateerror": [23, 24, 34, 37], "try": [23, 37, 51, 84], "keyfileerror": [23, 37, 38, 56], "thrown": [23, 37], "keyfil": [23, 37, 56, 57], "corrupt": [6, 20, 23, 37, 38, 56], "writabl": [23, 37, 38], "password": [6, 19, 20, 23, 37, 38, 56], "decrypt": [6, 20, 23, 37, 38, 56], "invalid": [23, 37, 43], "_register_cuda": [37, 49, 57], "stat": [26, 37, 49, 51, 57], "test_util": [37, 49, 57], "wallet_util": [37, 49, 57], "weight_util": [37, 49, 57], "btlog": [37, 57], "chain_data": [37, 41, 57], "dendrit": [37, 42, 57, 70], "metagraph": [6, 26, 37, 41, 55, 56, 57, 61, 65, 67, 75, 76, 98], "threadpool": [37, 57], "__version__": [37, 69, 77], "version_split": [37, 69, 77], "__version_as_int__": [37, 41], "__new_signature_version__": 37, "360": 37, "__console__": 37, "__use_console__": 37, "turn_console_off": 37, "turn_console_on": 37, "__blocktime__": 37, "__pipaddress__": 37, "pypi": 37, "org": 37, "__delegates_details_url__": 37, "raw": [37, 39, 42, 43], "githubusercont": 37, "com": [37, 44], "opentensor": 37, "main": [37, 41, 51, 61, 67, 84], "__ss58_format__": 37, "42": [21, 37, 65, 70], "__ss58_address_length__": 37, "48": 37, "__networks__": 37, "finnei": [4, 6, 11, 37, 39, 41], "test": [4, 6, 9, 13, 29, 37, 38, 39, 41], "archiv": [37, 39], "__finney_entrypoint__": 37, "wss": [37, 50], "entrypoint": 37, "ai": [37, 39, 41], "443": 37, "__finney_test_entrypoint__": 37, "__archive_entrypoint__": 37, "__bellagene_entrypoint__": 37, "parachain": 37, "__local_entrypoint__": 37, "w": [37, 39, 41, 50, 85, 90], "127": 37, "9944": 37, "__tao_symbol__": 37, "__rao_symbol__": 37, "__network_explorer_map__": 37, "__type_registry__": 37, "nacl_salt": [37, 38], "b": [21, 37, 38, 39, 41], "x13q": [37, 38], "x83": [37, 38], "xdf": [37, 38], "xf1z": [37, 38], "xbc": [37, 38], "x9c": [37, 38], "x90": [37, 38], "xb5q": [37, 38], "x879": [37, 38], "xe9": [37, 38], "xb1": [37, 38], "serialized_keypair_to_keyfile_data": [37, 38], "serial": [37, 38, 42, 43], "deserialize_keypair_from_keyfile_data": [37, 38], "keyfile_data": [37, 38], "load": [37, 38, 39, 41, 56, 98], "cannot": [37, 38, 50], "construct": [11, 26, 37, 38, 39, 41, 42, 85, 90], "validate_password": [37, 38], "valid": [4, 5, 6, 9, 12, 13, 19, 26, 30, 33, 37, 38, 39, 40, 41, 49, 50, 51, 54, 57, 59, 63, 69, 70], "polici": [37, 38], "meet": [6, 13, 37, 38], "ask_password_to_encrypt": [37, 38], "prompt": [4, 5, 6, 10, 11, 13, 16, 17, 18, 19, 20, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 57, 58, 100], "rtype": [37, 38, 41, 50, 56], "keyfile_data_is_encrypted_nacl": [37, 38], "nacl": [37, 38], "ansibl": [37, 38], "is_nacl": [37, 38], "keyfile_data_is_encrypted_ans": [37, 38], "is_ans": [37, 38], "keyfile_data_is_encrypted_legaci": [37, 38], "legaci": [6, 10, 20, 37, 38], "is_legaci": [37, 38], "keyfile_data_is_encrypt": [37, 38], "is_encrypt": [37, 38], "keyfile_data_encryption_method": [37, 38], "encryption_method": [37, 38], "legacy_encrypt_keyfile_data": [37, 38], "encrypt_keyfile_data": [37, 38], "vault": [37, 38], "ask": [37, 38, 84], "encrypted_data": [37, 38], "get_coldkey_password_from_environ": [37, 38], "coldkey_nam": [37, 38], "retriev": [4, 5, 6, 9, 11, 14, 15, 37, 38, 39, 40, 41, 42, 51, 63], "cold": [6, 7, 20, 37, 38], "found": [37, 38, 41, 46, 51, 65], "decrypt_keyfile_data": [37, 38], "decrypted_data": [37, 38], "file": [6, 20, 37, 38, 39, 56, 85, 90], "incorrect": [37, 38, 56, 84], "path": [4, 6, 7, 8, 16, 19, 20, 37, 38, 39, 41, 56, 87, 90], "interfac": [3, 4, 37, 38, 39, 40, 41, 67, 76], "substrat": [37, 38, 41, 51], "store": [37, 38, 39, 47, 49, 51, 54, 70], "devic": [6, 8, 13, 19, 29, 37, 38, 46, 49, 51, 56, 87, 88, 89, 90, 91, 92, 93, 94, 95], "under": [3, 6, 20, 26, 37, 38, 41, 49, 54, 56], "exist": [3, 5, 6, 8, 13, 20, 37, 38, 41, 49, 51, 56, 63], "set_keypair": [37, 38], "overwrit": [6, 20, 37, 38, 56], "write": [37, 38], "forc": [37, 38, 51, 85, 90], "get_keypair": [37, 38], "make_dir": [37, 38], "directori": [6, 8, 10, 12, 16, 20, 37, 38, 39, 63], "do": [37, 38, 51], "exists_on_devic": [37, 38], "on_devic": [37, 38], "is_read": [37, 38], "is_writ": [37, 38], "_may_overwrit": [37, 38], "okai": [37, 38], "allow": [4, 5, 6, 11, 13, 14, 15, 16, 18, 20, 26, 37, 38, 39, 40, 41, 70], "may_overwrit": [37, 38], "check_and_update_encrypt": [37, 38], "print_result": [37, 38], "no_prompt": [6, 10, 11, 13, 20, 37, 38], "result": [4, 6, 7, 37, 38, 41, 42, 47, 70, 76, 88, 95], "skip": [37, 38], "most": [37, 38, 39, 41, 85, 90], "els": [37, 38, 49], "_read_keyfile_data_from_fil": [37, 38], "read": [6, 8, 11, 12, 37, 38, 42, 63, 70], "_write_keyfile_data_to_fil": [37, 38], "permiss": [37, 38], "respond": [37, 38, 65, 84], "No": [6, 14, 37, 38], "mockkeyfil": [37, 38], "mock": [37, 38, 84], "simul": [37, 38, 41], "actual": [37, 38, 40, 41, 58, 65, 70], "filesystem": [6, 8, 37, 38, 98], "treat": [37, 38], "noth": [37, 38], "sinc": [6, 9, 12, 37, 38, 52], "although": [37, 38], "alwai": [37, 38, 84], "written": [37, 38, 84], "valueerror": [37, 38, 49, 51, 54, 65], "anyth": [37, 38, 49], "is_valid_bittensor_address_or_public_kei": [37, 49, 54], "destin": [6, 17, 33, 35, 37, 41, 49, 54, 55], "display_mnemonic_msg": [37, 56], "key_typ": [37, 56], "displai": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 37, 39, 49, 54, 56], "mnemon": [6, 20, 37, 56], "keep": [6, 20, 35, 37, 51, 56], "mainten": [37, 41, 56], "primari": [37, 56, 67], "wai": [37, 41, 47, 56, 79, 80, 82, 83, 97], "tao": [4, 5, 6, 12, 13, 16, 17, 18, 24, 29, 34, 35, 36, 37, 41, 47, 56, 98], "token": [3, 4, 6, 13, 16, 17, 18, 37, 40, 41, 56, 58, 70, 76, 88, 89, 90, 95], "your": [4, 6, 37, 50, 56, 70, 72, 84], "must": [4, 5, 6, 9, 11, 30, 33, 37, 39, 40, 41, 49, 50, 54, 56, 58, 65, 72], "fund": [6, 7, 13, 17, 35, 37, 41, 56], "node": [6, 8, 9, 37, 39, 41, 51, 56, 67, 68], "hand": [37, 56], "subscrib": [28, 32, 37, 56], "link": [6, 16, 37, 41, 56], "hotkey_fil": [37, 56], "coldkey_fil": [37, 56], "coldkeypub_fil": [37, 56], "coldkeypub": [6, 20, 37, 56], "cryptokeyerror": [37, 56], "incorrec": [37, 56], "colkei": [6, 12, 37, 56], "txt": [37, 56], "colkeypub": [37, 56], "regen_coldkeypub": [6, 20, 37, 56], "regen_coldkei": [6, 20, 37, 56], "regen_hotkei": [6, 20, 37, 56], "create_if_non_exist": [37, 56], "coldkey_use_password": [37, 56], "hotkey_use_password": [37, 56], "whether": [6, 8, 13, 14, 16, 18, 21, 37, 39, 41, 56, 65, 84], "recreat": [6, 20, 37, 56], "set_hotkei": [37, 56], "set_coldkeypub": [37, 56], "set_coldkei": [37, 56], "get_coldkei": [37, 56], "get_hotkei": [37, 56], "get_coldkeypub": [37, 56], "create_coldkey_from_uri": [37, 56], "uri": [37, 56], "use_password": [6, 20, 37, 56], "suppress": [37, 56], "suri": [37, 56], "e": [11, 28, 32, 37, 39, 41, 56, 58, 65], "alic": [37, 56], "bob": [37, 56], "protect": [6, 20, 37, 39, 41, 56], "Will": [37, 56], "newli": [37, 56], "create_hotkey_from_uri": [37, 56], "new_coldkei": [6, 20, 37, 56], "n_word": [6, 20, 37, 56, 72], "save": [37, 39, 56, 98], "disk": [37, 39, 56], "number": [4, 6, 9, 11, 13, 15, 20, 26, 28, 29, 32, 37, 39, 41, 46, 49, 51, 52, 55, 56, 68, 72, 75, 76, 85, 90], "word": [6, 20, 37, 56, 72], "create_new_coldkei": [37, 56], "new_hotkei": [6, 20, 37, 56], "create_new_hotkei": [37, 56], "regenerate_coldkeypub": [37, 56], "ss58_address": [4, 6, 20, 35, 37, 41, 49, 54, 56], "public_kei": [37, 49, 54, 56], "regener": [6, 20, 37, 56], "either": [6, 16, 18, 20, 37, 41, 50, 51, 56], "ss58": [4, 5, 6, 8, 11, 12, 16, 17, 18, 20, 24, 34, 36, 37, 41, 49, 54, 56], "hex": [5, 6, 20, 37, 41, 56], "re": [37, 56, 85, 88, 90, 95, 96], "regenerate_coldkei": [37, 56], "seed": [6, 20, 37, 56, 84], "space": [37, 56, 84], "separ": [6, 14, 20, 37, 56, 65], "restor": [37, 39, 56], "backup": [6, 20, 37, 56], "json_data": [37, 56], "passphras": [37, 56], "order": [4, 6, 37, 51, 56, 72], "regenerate_hotkei": [37, 56], "create_pow": [37, 49, 51], "output_in_plac": [29, 37, 41, 49, 51], "cuda": [6, 13, 19, 29, 37, 41, 46, 49, 51], "dev_id": [6, 13, 29, 37, 41, 46, 49, 51], "tpb": [6, 13, 29, 37, 41, 46, 49, 51], "256": [29, 37, 41, 42, 49, 51], "num_process": [6, 13, 29, 37, 41, 49, 51], "update_interv": [6, 13, 29, 37, 41, 46, 49, 51], "log_verbos": [29, 37, 41, 49, 51], "proof": [6, 11, 13, 37, 49, 51], "progress": [37, 49, 51, 70], "consol": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 37, 49, 51], "place": [6, 13, 21, 37, 39, 41, 49, 51], "solv": [6, 13, 29, 37, 46, 49, 51], "id": [6, 13, 29, 37, 42, 46, 49, 51], "per": [4, 6, 7, 13, 16, 26, 29, 37, 39, 46, 49, 51, 52], "32": [37, 49, 51], "equal": [37, 49, 51], "cpu": [6, 13, 37, 49, 51], "more": [6, 9, 16, 18, 29, 37, 39, 41, 42, 49, 51, 65, 84], "verbos": [6, 13, 37, 49, 51], "solut": [37, 46, 49, 51], "ss58_to_vec_u8": [37, 49], "unbiased_topk": [37, 49], "dim": [37, 49], "largest": [37, 49], "select": [6, 13, 37, 41, 49], "topk": [37, 49], "bia": [37, 49], "lower": [37, 49, 65], "longtensor": [30, 33, 37, 41, 49, 55, 75], "version_check": [37, 49], "15": [6, 14, 20, 37, 49], "strtobool_with_default": [37, 49], "strtobool": [37, 49], "liter": [37, 49], "supress": [37, 49], "val": [6, 9, 37, 41, 49], "truth": [37, 49], "y": [6, 10, 37, 49, 55], "ye": [6, 14, 37, 49], "n": [11, 37, 39, 48, 49, 55, 76, 85, 90], "f": [37, 49, 84], "get_explorer_root_url_by_network_from_map": [37, 49], "network_map": [37, 49], "explor": [37, 49, 84], "root": [4, 5, 6, 8, 9, 15, 25, 37, 39, 41, 49, 55, 57], "url": [4, 5, 6, 19, 37, 41, 49, 50], "Or": [37, 49], "get_explorer_url_for_network": [37, 49], "block_hash": [37, 41, 49, 51], "known": [4, 6, 15, 37, 41, 49, 84], "ss58_address_to_byt": [37, 49], "u16_normalized_float": [37, 49], "x": [37, 49, 55], "u64_normalized_float": [37, 49], "u8_key_to_ss58": [37, 49], "u8_kei": [37, 49], "u8": [37, 49], "account": [6, 12, 16, 17, 30, 33, 34, 35, 37, 41, 49], "utf": [37, 49, 70], "get_ss58_format": [37, 49, 54], "is_valid_ss58_address": [37, 49, 54], "is_valid_ed25519_pubkei": [37, 49, 54], "ed25519": [35, 37, 49, 54], "create_identity_dict": [37, 49, 54], "legal": [5, 6, 37, 49, 54], "web": [5, 6, 37, 49, 54], "riot": [5, 6, 37, 49, 54], "email": [5, 6, 37, 49, 54], "pgp_fingerprint": [5, 6, 37, 49, 54], "imag": [5, 6, 37, 49, 54], "twitter": [5, 6, 37, 49, 54], "structur": [5, 6, 8, 10, 11, 13, 14, 15, 37, 39, 40, 41, 49, 54, 65, 70], "extrins": [37, 41, 49, 54, 57], "fit": [37, 49, 54], "64": [5, 6, 37, 46, 49, 51, 54], "bit": [37, 49, 51, 54], "convers": [37, 49, 54, 55, 58, 70], "exactli": [37, 49, 54], "20": [5, 6, 14, 37, 49, 54], "long": [21, 37, 41, 49, 54], "decode_hex_identity_dict": [37, 49, 54], "info_dictionari": [37, 49, 54], "rao": [37, 41, 47], "unit": [37, 41, 47, 72, 84], "well": [37, 39, 47, 84], "arithmet": [37, 47], "symbol": [37, 47], "rao_unit": [37, 47], "integ": [4, 6, 19, 37, 42, 47, 50, 51, 55], "give": [37, 47, 70, 84], "__int__": [37, 47], "__float__": [37, 47], "symbolvalu": [37, 47], "__rich__": [37, 47], "__str_rao__": [37, 47], "__rich_rao__": [37, 47], "__ne__": [37, 47], "__gt__": [37, 47], "__lt__": [37, 47], "__le__": [37, 47], "__ge__": [37, 47], "__add__": [37, 47], "__radd__": [37, 47], "__sub__": [37, 47], "__rsub__": [37, 47], "__mul__": [37, 47], "__rmul__": [37, 47], "__truediv__": [37, 47], "__rtruediv__": [37, 47], "__floordiv__": [37, 47], "__rfloordiv__": [37, 47], "__nonzero__": [37, 47], "__neg__": [37, 47], "__pos__": [37, 47], "__abs__": [37, 47], "from_float": [37, 47], "pow": [6, 11, 13, 29, 37, 41, 46, 47, 51], "10": [6, 11, 14, 37, 47, 51, 53, 84, 85, 90], "9": [6, 14, 21, 37, 47, 76, 88, 95], "from_tao": [37, 47], "from_rao": [37, 47], "_mock": [37, 41], "factori": [], "By": [37, 41, 42, 85, 90], "get_proposal_vote_data": [37, 41], "determine_chain_endpoint_and_network": [37, 41], "chain_endpoint": [37, 41], "flag": [4, 6, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 68], "choic": [6, 19, 20, 37, 41], "overrid": [37, 41, 42, 58, 70], "setup_config": [37, 41], "wait_for_fin": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41], "wait_for_inclus": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41], "becom": [4, 6, 24, 37, 41], "delegate_ss58": [24, 37, 41], "undeleg": [4, 6, 37, 41], "remov": [6, 15, 18, 31, 36, 37, 41, 85, 90], "set_weight": [25, 37, 41, 57, 64, 69, 74, 99], "version_kei": [30, 33, 37, 41], "floattensor": [30, 33, 37, 39, 41, 55, 72, 76, 79, 80, 81, 82, 83, 85, 88, 90, 91, 95, 96], "_do_set_weight": [37, 41], "max_allowed_attempt": [29, 37, 41], "run_faucet": [37, 41], "burned_regist": [37, 41], "recycl": [6, 11, 13, 29, 37, 41], "_do_pow_regist": [37, 41], "pow_result": [37, 41], "powsolut": [37, 41, 51], "inclus": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41], "_do_burned_regist": [37, 41], "dest": [6, 17, 35, 37, 41], "get_transfer_fe": [37, 41], "_do_transf": [37, 41], "transfer_bal": [37, 41], "On": [6, 13, 37, 41], "wait_for_": [37, 41], "get_existential_deposit": [37, 41], "existenti": [35, 37, 41], "deposit": [35, 37, 41], "register_subnetwork": [11, 37, 41], "set_hyperparamet": [37, 41], "serve_axon": [37, 41], "_do_serve_axon": [37, 41], "call_param": [37, 41], "axonservecallparam": [37, 41, 45], "serve_prometheu": [37, 41], "_do_serve_prometheu": [37, 41], "prometheusservecallparam": [37, 41, 45], "_do_associate_ip": [37, 41], "ip_info_list": [37, 41], "add_stak": [37, 41], "add_stake_multipl": [37, 41], "common": [29, 34, 36, 85, 90], "_do_stak": [37, 41], "unstake_multipl": [37, 41], "_do_unstak": [37, 41], "register_sen": [37, 41], "leave_sen": [37, 41], "vote_sen": [37, 41], "proposal_hash": [6, 15, 31, 37, 41], "proposal_idx": [31, 37, 41], "vote": [6, 15, 31, 37, 41], "is_senate_memb": [37, 41], "get_vote_data": [37, 41], "get_senate_memb": [37, 41], "get_proposal_call_data": [37, 41], "get_proposal_hash": [37, 41], "get_propos": [37, 41], "root_regist": [37, 41], "_do_root_regist": [37, 41], "root_set_weight": [37, 41], "query_ident": [37, 41], "update_ident": [37, 41], "identifi": [6, 7, 9, 11, 12, 14, 16, 26, 37, 39, 41, 42, 68, 84], "query_subtensor": [37, 41], "query_map_subtensor": [37, 41], "substrateinterfac": [], "querymapresult": [37, 41], "query_const": [37, 41], "module_nam": [37, 41], "constant_nam": [37, 41], "query_modul": [37, 41], "modul": [37, 100], "query_map": [37, 41], "state_cal": [37, 41], "query_runtime_api": [37, 41], "runtime_api": [37, 41], "scale": [4, 6, 37, 41, 84, 85, 88, 90, 95, 96], "paramwithtyp": [37, 41], "_encode_param": [37, 41], "call_definit": [37, 41], "validator_batch_s": [37, 41], "validator_prune_len": [37, 41], "validator_logits_diverg": [37, 41], "validator_sequence_length": [37, 41], "validator_epochs_per_reset": [37, 41], "validator_epoch_length": [37, 41], "validator_exclude_quantil": [37, 41], "synergy_scaling_law_pow": [37, 41], "get_total_stake_for_hotkei": [37, 41], "get_total_stake_for_coldkei": [37, 41], "get_stake_for_coldkey_and_hotkei": [37, 41], "get_stak": [37, 41], "does_hotkey_exist": [37, 41], "get_hotkey_own": [37, 41], "get_axon_info": [37, 41], "get_prometheus_info": [37, 41], "total_issu": [37, 41], "serving_rate_limit": [37, 41], "tx_rate_limit": [37, 41], "subnet_exist": [37, 41], "get_all_subnet_netuid": [37, 41], "get_total_subnet": [37, 41], "get_subnet_mod": [37, 41], "get_subnet_connection_requir": [37, 41], "netuid_0": [37, 41], "netuid_1": [37, 41], "get_emission_value_by_subnet": [37, 41], "get_subnet": [37, 41], "get_all_subnets_info": [37, 41], "get_subnet_info": [37, 41], "get_subnet_hyperparamet": [37, 41], "get_subnet_own": [37, 41], "is_hotkey_deleg": [37, 41], "get_delegate_tak": [37, 41], "get_nominators_for_hotkei": [37, 41], "get_delegate_by_hotkei": [37, 41], "get_deleg": [37, 41], "get_stake_info_for_coldkei": [37, 41], "coldkey_ss58_list": [37, 41], "is_hotkey_registered_ani": [37, 41], "is_hotkey_registered_on_subnet": [37, 41], "is_hotkey_regist": [37, 41], "get_uid_for_hotkey_on_subnet": [37, 41], "get_all_uids_for_hotkei": [37, 41], "get_netuids_for_hotkei": [37, 41], "get_neuron_for_pubkey_and_subnet": [37, 41], "get_all_neurons_for_pubkei": [37, 41], "neuron_has_validator_permit": [37, 41], "neuron_for_wallet": [37, 41], "neuron_for_uid": [37, 41], "particular": [6, 11, 15, 37, 41], "pull": [6, 10], "sync": [37, 39, 41], "neuron_for_uid_lit": [37, 41], "lite": [37, 39, 41], "neurons_lit": [37, 41], "latest": [6, 10, 20, 37, 39, 41, 67, 76, 98], "i_map": [], "associated_validator_ip_info": [37, 41], "g": [11, 37, 41, 58], "validator_ip_info": [], "get_subnet_burn_cost": [11, 37, 41], "_do_deleg": [37, 41], "_do_undeleg": [37, 41], "_do_nomin": [37, 41], "get_bal": [37, 41], "get_current_block": [37, 41], "blocknumb": [], "block_numb": 51, "get_block_hash": [37, 41], "block_id": [37, 41], "neural": [37, 39], "graph": [37, 39, 65], "total": [4, 6, 9, 11, 26, 37, 39, 41, 42, 51, 68], "last": [4, 6, 9, 12, 21, 37, 39, 52], "permit": [4, 6, 12, 37, 39, 41, 98], "r": [37, 39], "c": [21, 37, 39], "tv": [37, 39], "_initialize_subtensor": [37, 39], "_assign_neuron": [37, 39], "assign": [6, 9, 14, 37, 39, 41, 42, 67, 68, 70], "decid": [], "_set_metagraph_attribut": [37, 39], "_create_tensor": [37, 39], "dtype": [37, 39, 43], "datatyp": [], "_set_weights_and_bond": [37, 39], "comput": [6, 13, 37, 39, 41, 42], "_process_weights_or_bond": [37, 39], "_process_root_weight": [37, 39], "load_from_path": [37, 39], "dir_path": [37, 39], "prioritythreadpoolexecutor": [37, 44], "maxsiz": [37, 44, 78], "thread_name_prefix": [37, 44], "initarg": [37, 44], "futur": [6, 15, 32, 37, 39, 41, 44], "_base": [37, 44], "executor": [3, 37, 44], "queue": [37, 44, 51, 85, 90], "is_empti": [37, 44], "_counter": [37, 44], "submit": [37, 41, 44, 51], "fn": [37, 44], "schedul": [37, 44], "_adjust_thread_count": [37, 44], "_initializer_fail": [37, 44], "shutdown": [37, 44, 67], "clean": [37, 44], "up": [4, 6, 10, 20, 26, 37, 39, 41, 44, 63, 67, 86, 90], "sever": [4, 6, 11, 37, 44], "until": [37, 41, 44, 67], "finish": [37, 44, 51], "reclaim": [37, 44], "cancel_futur": [37, 44], "cancel": [37, 44], "pend": [37, 44], "get_siz": [37, 42], "obj": [37, 42, 76, 98], "seen": [37, 42], "recurs": [21, 37, 42], "find": [37, 42, 84], "size": [5, 6, 26, 37, 39, 42, 76, 88, 95], "travers": [37, 42], "everi": [37, 42], "item": [5, 6, 21, 37, 42, 44, 73], "sum": [4, 6, 37, 41, 42, 55, 76, 88, 95], "calcul": [4, 6, 11, 13, 26, 37, 39, 41, 42, 51, 76, 85, 88, 89, 90, 95], "cast_int": [37, 42], "attempt": [4, 6, 13, 29, 37, 39, 42, 50, 84], "simpli": [37, 39, 42, 70], "cast_float": [37, 42], "terminalinfo": [37, 42], "pydant": [37, 40, 42, 43, 70], "basemodel": [37, 40, 42, 43], "mixin": [37, 42], "__pretty__": [37, 42], "884": [37, 42], "devtool": [37, 42], "helpmanu": [37, 42], "io": [37, 42], "validate_assign": [37, 40, 42, 43, 70], "status_cod": [37, 42], "_extract_status_cod": [37, 42], "status_messag": [37, 42], "process_tim": [37, 42], "_extract_process_tim": [37, 42], "_extract_port": [37, 42], "_extract_vers": [37, 42], "_extract_nonc": [37, 42], "uuid": [37, 42], "is_success": [37, 42], "200": [37, 42], "is_failur": [37, 42], "failur": [4, 6, 37, 42], "would": [19, 37, 42], "is_timeout": [37, 42], "408": [37, 42], "is_blacklist": [37, 42], "403": [37, 42], "forbidden": [37, 42], "failed_verif": [37, 42], "401": [37, 42], "unauthor": [37, 42], "body_hash": [37, 42], "sha3": [37, 42], "compris": [37, 42], "required_fields_hash": [37, 42], "concaten": [37, 42, 70], "hexadecim": [6, 20, 37, 42], "_extract_timeout": [37, 42], "total_s": [37, 42, 70], "_extract_total_s": [37, 42], "header_s": [37, 42, 70], "_extract_header_s": [37, 42], "computed_body_hash": [37, 42], "required_hash_field": [37, 42, 70], "intend": [4, 6, 7, 8, 9, 10, 11, 15, 37, 39, 40, 41, 42, 70], "overridden": [37, 42, 51, 65, 70], "subclass": [37, 40, 42, 65, 70], "superclass": [37, 42], "itself": [37, 40, 42, 70, 84], "desir": [4, 6, 15, 37, 41, 42, 70], "set_name_typ": [37, 42], "__setattr__": [37, 42], "get_total_s": [37, 42], "to_head": [37, 42], "directli": [4, 6, 10, 14, 37, 40, 41, 42, 65, 70, 84], "taken": [37, 42], "further": [6, 13, 37, 42, 70], "parse_headers_to_input": [37, 42], "input_obj": [37, 42], "extract": [37, 40, 42, 70, 84, 85, 90], "transform": [37, 39, 42, 76, 88, 90, 95], "appropri": [6, 13, 37, 39, 40, 42, 70], "from_head": [37, 42], "btstreamingresponsemodel": [37, 40], "model": [37, 39, 40, 41, 58, 70, 76, 85, 88, 89, 90, 92, 95, 96, 98], "streamer": [37, 40], "btstreamingrespons": [37, 40], "conform": [37, 40], "clear": [6, 11, 16, 37, 39, 40], "token_stream": [37, 40], "asgi": [37, 40], "abc": [37, 40, 65, 72, 73, 76, 79, 80, 82, 83, 97], "streamingrespons": [37, 40, 70], "special": [37, 39, 40, 41, 70, 84], "modifi": [4, 6, 8, 11, 12, 37, 40, 41, 51], "develop": [37, 40, 58, 70], "instead": [6, 16, 37, 40, 65], "create_streaming_respons": [37, 40], "stream_respons": [37, 40], "event": [37, 40, 51, 52, 57, 69, 77], "__call__": [37, 40], "scope": [37, 40], "process_streaming_respons": [37, 40, 70], "accumul": [37, 39, 40, 41, 70], "being": [4, 6, 15, 32, 37, 40, 41, 51, 84], "extract_response_json": [37, 40, 70], "readi": [37, 39, 40], "torch_dtyp": [37, 43], "cast_dtyp": [37, 43], "cast": [4, 6, 15, 37, 43], "cast_shap": [37, 43], "shape": [6, 15, 37, 41, 43, 76], "buffer": [37, 43], "_extract_dtyp": [37, 43], "_extract_shap": [37, 43], "tolist": [37, 43], "numpi": [37, 43, 46], "ndarrai": [37, 43], "encount": [11, 37, 43], "get_save_dir": 39, "latest_block_path": 39, "threadpoolexecutor": 44, "__author__": 44, "brian": 44, "quinlan": 44, "sweetapp": 44, "_threads_queu": 44, "_shutdown": 44, "_workitem": 44, "null_entri": 44, "_worker": 44, "executor_refer": 44, "work_queu": 44, "brokenthreadpool": 44, "brokenexecutor": 44, "solve_cuda": 46, "nonce_start": [46, 51], "block_and_hotkey_hash_byt": [46, 51], "limit": [37, 41, 46, 51, 55, 98], "problem": [11, 46, 51], "int64": [37, 39, 46], "keccak": [46, 51], "int256": 46, "upper": 46, "seal": [46, 51], "reset_cuda": 46, "reset": [46, 85, 90], "log_cuda_error": 46, "get_human_read": 48, "num": 48, "suffix": 48, "h": 48, "millifi": 48, "int_to_ip": 50, "int_val": 50, "uniqu": [4, 6, 7, 9, 11, 12, 14, 16, 37, 39, 41, 50, 68], "4028237e": 50, "38": 50, "int128": 50, "Of": 50, "ipv4": 50, "ipv6": 50, "str_val": 50, "tyep": 50, "netaddr": 50, "addrformaterror": 50, "ip_to_int": 50, "ip_vers": 50, "ip__str__": 50, "externalipnotfound": 50, "we": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 50, 51], "attain": 50, "curl": 50, "urllib": 50, "ipifi": 50, "aw": 50, "get_external_ip": 50, "get_formatted_ws_endpoint_url": 50, "endpoint_url": 50, "websocket": 50, "lack": 50, "thereof": 50, "left": 50, "unchang": 50, "formatted_endpoint_url": 50, "cudaexcept": 51, "occur": [51, 67, 70], "_hex_bytes_to_u8_list": 51, "hex_byt": 51, "_create_seal_hash": 51, "_seal_meets_difficulti": 51, "is_stal": 51, "stale": 51, "_solverbas": 51, "proc_num": 51, "num_proc": 51, "finished_queu": 51, "solution_queu": 51, "stopev": 51, "curr_block": 51, "curr_block_num": 51, "curr_diff": 51, "check_block": 51, "multiprocess": 51, "put": 51, "averag": [51, 52, 89, 90, 98], "across": [4, 6, 11, 14, 16, 18, 37, 39, 41, 51, 85, 88, 90, 95, 96], "newblockev": 51, "solver": 51, "arrai": 51, "lock": [11, 37, 41, 51], "prevent": [4, 6, 37, 41, 51], "while": [37, 39, 41, 51, 58, 68, 70, 84], "hotkey_byt": 51, "sub": 51, "create_shared_memori": 51, "share": [37, 39, 41, 51], "memori": 51, "_solver": 51, "_cudasolv": 51, "_solve_for_nonce_block_cuda": 51, "tri": [4, 6, 51, 84], "_solve_for_nonce_block": 51, "nonce_end": 51, "_registration_diff_unpack": 51, "packed_diff": 51, "unpack": 51, "pack": 51, "littl": 51, "endian": 51, "_registration_diff_pack": 51, "diff": [26, 51], "_hash_block_with_hotkei": 51, "block_byt": 51, "_update_curr_block": 51, "get_cpu_count": 51, "registrationstatist": 51, "statist": [4, 6, 9, 13, 26, 51, 85, 88, 90, 95, 96], "time_spent_tot": 51, "rounds_tot": 51, "time_averag": 51, "time_sp": 51, "hash_rate_perpetu": 51, "hash_rat": 51, "registrationstatisticslogg": 51, "rich": [4, 19, 51], "get_status_messag": 51, "_solve_for_difficulty_fast": 51, "n_sampl": 51, "alpha_": 51, "sampl": [51, 75], "ewma": 51, "alpha": [51, 52], "metric": [37, 39, 41, 51], "rate": [4, 6, 11, 16, 37, 39, 41, 51, 76], "exponenti": [37, 41, 51, 52], "move": [37, 41, 51, 52, 85, 88, 90, 95, 96, 98], "measur": [37, 39, 41, 51], "robust": [6, 13, 51], "interv": 51, "smaller": [51, 85, 90], "still": [21, 37, 51], "increas": [4, 6, 13, 37, 41, 51], "transpar": [6, 14, 15, 17, 51], "speed": [51, 84], "_get_block_with_retri": 51, "_usingspawnstartmethod": 51, "__enter__": [51, 65], "__exit__": [51, 65], "_check_for_newest_block_and_upd": 51, "old_block_numb": 51, "update_curr_block": 51, "curr_stat": 51, "old": [51, 85, 90], "pubkei": 51, "mp": 51, "_solve_for_difficulty_fast_cuda": 51, "50000": 51, "512": 51, "fast": [6, 10, 51], "grab": 51, "gpu": [6, 13, 51], "capabl": [6, 13, 37, 41, 51], "_terminate_workers_and_wait_for_exit": 51, "timed_rolling_avg": 52, "initial_valu": 52, "new_valu": 52, "amountpersecondrollingaverag": 52, "count": [4, 6, 20, 52, 85, 90], "quantiti": 52, "eventspersecondrollingaverag": 52, "max_tri": 53, "get_random_unused_port": 53, "allocated_port": 53, "u32_max": 55, "4294967295": 55, "normalize_max_weight": 55, "normal": [37, 41, 55, 76, 85, 88, 90, 95, 96], "so": [21, 37, 55, 84], "greater": [37, 39, 55], "max_valu": 55, "convert_weight_uids_and_vals_to_tensor": 55, "invers": 55, "convert_weights_and_uids_for_emit": 55, "row": [37, 39, 55], "row_weight": 55, "convert_root_weight_uids_and_vals_to_tensor": 55, "convert_bond_uids_and_vals_to_tensor": 55, "row_bond": 55, "u32": 55, "max_int_weight": 55, "weight_val": 55, "weight_uid": 55, "process_weights_for_netuid": 55, "exclude_quantil": 55, "page": 57, "auto": 57, "bittensor": [57, 58, 61, 65, 67, 68, 70, 71, 76, 80, 82, 90, 96, 98], "sphinx": 57, "autoapi": 57, "section": [84, 100], "bittensorss": [], "miner": [6, 20, 37, 39, 57, 63, 64, 67, 68, 69, 100], "refer": [37, 39, 41, 63, 84, 85, 89, 90, 100], "subpackag": 100, "submodul": 100, "packag": [10, 100], "content": 100, "follow": [4, 5, 6, 9, 10, 11, 12, 67, 68, 72, 101], "site": 101, "gemv": 101, "sdk": 101, "crucial": [6, 11, 14, 15, 17, 20, 37, 39, 41, 70], "blockchain": [4, 5, 6, 37, 39, 41, 68], "facilit": [4, 6, 10, 11, 20, 37, 39, 41, 65], "essenti": [3, 6, 11, 14, 15, 16, 20, 37, 39, 41, 58, 65, 84], "decentr": [6, 13, 37, 39, 41], "learn": [37, 39, 41, 76], "particip": [6, 7, 9, 13, 14, 15, 16, 17, 20, 37, 39, 41], "engag": [6, 14, 15, 37, 41], "inter": [37, 39, 41], "ledger": [37, 39, 41], "peer": [37, 39, 41, 68], "These": [4, 6, 11, 13, 37, 39, 41, 70], "themselv": [37, 41], "plai": [6, 15, 37, 39, 41], "role": [6, 11, 15, 20, 37, 39, 41, 58, 65, 70], "higher": [6, 13, 37, 39, 41, 65], "contribut": [6, 11, 12, 13, 15, 37, 39, 41], "variou": [4, 5, 6, 11, 12, 14, 15, 16, 37, 39, 41, 63, 65, 84], "gatewai": [37, 41], "layer": [6, 14, 37, 39, 41, 65, 76, 98], "leverag": [6, 13, 37, 39, 41, 67], "fair": [37, 41], "distribut": [6, 11, 12, 14, 16, 37, 39, 41, 85, 88, 90, 95, 96], "primarili": [4, 5, 6, 10, 14, 37, 39, 41, 70], "alloc": [4, 6, 14, 16, 37, 39, 41], "major": [37, 39, 41], "8203": [37, 41], "oaicit": [37, 41], "addition": [37, 41, 58, 63, 70, 84], "introduc": [37, 41, 58, 65], "specul": [37, 39, 41], "reward": [4, 6, 7, 13, 14, 24, 37, 39, 41, 57, 69, 74, 76, 77], "align": [6, 9, 37, 39, 41], "market": [37, 41], "incentiv": [37, 39, 41], "judici": [37, 41], "decis": [4, 6, 11, 14, 15, 37, 39, 41, 84], "invest": [11, 37, 39, 41], "direct": [6, 13, 26, 37, 39, 41, 89, 90], "commun": [6, 15, 37, 39, 41], "finney_subtensor": [37, 41], "collabor": [37, 39, 41], "promis": [37, 41], "other_neuron_ss58": [37, 41], "bond_amount": [37, 41], "instrument": [37, 39, 41], "maintain": [6, 20, 37, 39, 41, 58, 84], "intellig": [37, 39, 41], "dynam": [6, 13, 14, 37, 39, 41], "envis": [37, 41], "foundat": [6, 14, 20, 37, 41], "principl": [37, 39, 41, 84], "describ": [37, 41, 58], "neurip": [37, 39, 41], "paper": [37, 39, 41], "govern": [6, 14, 15, 37, 39, 41], "action": [4, 5, 6, 11, 37, 41], "reduc": [37, 39, 41], "anoth": [6, 17, 21, 37, 39, 41], "effect": [4, 5, 6, 15, 20, 37, 41, 84, 85, 90], "withdraw": [4, 6, 18, 37, 41], "confirm": [4, 6, 10, 13, 16, 17, 18, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41], "proceed": [4, 6, 13, 16, 17, 18, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41], "reflect": [37, 39, 41], "natur": [4, 6, 37, 39, 41, 84], "adjust": [37, 41, 58], "chang": [4, 5, 6, 7, 10, 11, 37, 41], "percept": [37, 41], "set_delegate_tak": [4, 6, 37, 41], "percentag": [4, 6, 37, 41], "100": [6, 11, 14, 16, 17, 18, 37, 39, 41, 72, 85, 90], "influenc": [6, 14, 16, 37, 39, 41, 84], "fundament": [37, 39, 41], "aspect": [6, 14, 37, 39, 41], "architectur": [37, 39, 41], "compat": [6, 13, 37, 39, 41], "toward": [6, 15, 37, 39, 41], "81": [37, 41], "sourc": [37, 41], "retri": [37, 41], "vital": [6, 15, 37, 39, 41], "observ": [37, 41], "step": [6, 11, 14, 15, 20, 26, 37, 39, 41, 68, 85, 90], "growth": [37, 41], "scalabl": [37, 41], "ecosystem": [11, 37, 39, 41], "faucet": [6, 13, 29, 37, 41], "particularli": [6, 11, 13, 14, 15, 20, 37, 39, 41, 84], "newcom": [37, 41], "small": [37, 41], "onboard": [37, 41], "begin": [37, 41], "journei": [37, 41], "deflationari": [37, 41], "altern": [6, 13, 37, 41], "circul": [37, 41], "conserv": [37, 41], "fluid": [37, 41], "movement": [37, 41], "econom": [37, 41], "fee": [4, 5, 6, 37, 41], "estim": [37, 41], "cost": [5, 6, 11, 13, 37, 41], "condit": [4, 6, 37, 41], "complex": [37, 39, 41], "plan": [11, 37, 41], "suffici": [6, 13, 16, 17, 18, 37, 41], "cover": [6, 13, 37, 39, 41], "tool": [4, 6, 14, 37, 41], "financi": [6, 20, 37, 41], "minimum": [26, 37, 41, 76, 88, 95], "below": [37, 41, 65], "reap": [37, 41], "effici": [6, 13, 37, 39, 41], "storag": [37, 41], "prolifer": [37, 41], "dust": [37, 41], "subnetwork": [11, 27, 37, 41], "creation": [5, 6, 11, 20, 37, 41], "segment": [37, 41], "overal": [6, 12, 37, 41], "expans": [37, 41], "diversif": [37, 41], "adapt": [37, 39, 41], "characterist": [37, 41], "fine": [37, 41], "tune": [37, 41], "announc": [37, 41], "placehold": [32, 37, 41], "extens": [37, 41, 70], "presenc": [6, 12, 20, 37, 41], "compon": [37, 39, 41], "task": [26, 37, 41, 57, 67, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 84], "infrastructur": [11, 37, 39, 41], "enhanc": [6, 16, 20, 37, 39, 41], "earn": [4, 6, 7, 9, 12, 37, 39, 41], "bulk": [37, 41], "batch": [26, 37, 41, 85, 88, 90], "withdrawn": [37, 41], "strateg": [6, 16, 37, 41], "realloc": [6, 18, 37, 41], "accrual": [37, 41], "senat": [6, 14, 25, 37, 41, 57], "overse": [37, 41], "approv": [37, 41], "propos": [6, 15, 37, 41], "membership": [6, 15, 37, 41], "understand": [6, 11, 13, 14, 15, 37, 39, 41, 70], "power": [6, 14, 37, 41], "track": [6, 20, 37, 39, 41], "composit": [6, 14, 37, 41], "grasp": [37, 41], "author": [37, 39, 41, 84], "purpos": [4, 5, 6, 11, 20, 37, 39, 41, 70], "analyz": [37, 39, 41, 84], "present": [4, 6, 8, 12, 37, 41], "review": [37, 41], "insight": [4, 6, 14, 15, 37, 41, 70, 84], "along": [6, 8, 11, 15, 37, 41], "comprehens": [4, 6, 7, 11, 12, 14, 16, 20, 37, 41, 84], "view": [6, 11, 12, 15, 16, 20, 37, 41, 70], "thorough": [37, 41], "recept": [37, 41], "holist": [37, 41], "impact": [6, 11, 13, 14, 37, 39, 41], "highest": [6, 20, 37, 41], "influenti": [37, 41], "signifi": [37, 39, 41], "high": [5, 6, 20, 37, 41, 84], "commit": [37, 41], "pivot": [37, 39, 41], "cli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 37, 41, 57], "whose": [11, 37, 41], "accuraci": [6, 17, 37, 41], "currenc": [37, 41], "valuabl": [37, 39, 41], "wide": [6, 9, 37, 39, 41], "relationship": [37, 39, 41, 84], "constant": [37, 41, 84], "inflat": [37, 41], "deeper": [37, 41], "divers": [37, 41, 57, 69, 77, 86, 90], "versatil": [37, 41], "analysi": [6, 9, 37, 39, 41], "advanc": [6, 11, 14, 37, 41], "insuffici": [6, 13, 37, 41], "runtim": [37, 39, 41], "who": [4, 6, 11, 13, 15, 16, 18, 20, 37, 41, 84], "global": [37, 41, 67], "mathemat": [37, 41], "p": [6, 8, 9, 12, 37, 41], "cryptocurr": [11, 37, 39, 41], "economi": [37, 41], "formula": [37, 41, 84], "staking_target": [37, 41], "staking_actu": [37, 41], "inflation_target": [37, 41], "predefin": [37, 41], "goal": [37, 41], "affect": [4, 6, 10, 13, 37, 41], "control": [37, 41], "among": [5, 6, 14, 16, 37, 39, 41], "\u03ba": [37, 41], "deriv": [37, 41], "softmax": [37, 41], "\u03ba_i": [37, 41], "exp": [37, 41], "w_i": [37, 41], "\u03c3": [37, 41], "w_j": [37, 41], "denomin": [37, 41], "probabilist": [37, 41], "rel": [37, 41, 84], "signific": [6, 14, 15, 37, 39, 41, 85, 90], "challeng": [37, 41], "effort": [6, 13, 37, 41], "suppli": [37, 39, 41], "nativ": [6, 13, 37, 41], "immunityperiod": [37, 41], "certain": [37, 41, 70, 84], "penalti": [37, 41, 57, 69, 72, 77], "restrict": [37, 41], "grace": [37, 41, 67], "period": [6, 11, 20, 37, 41, 65, 85, 90], "immedi": [37, 41], "punit": [37, 41], "validatorbatchs": [37, 41], "hyper": [37, 41], "validatorprunelen": [37, 41], "validatorlogitsdiverg": [37, 41], "validatorsequencelength": [37, 41], "validatorepochsperreset": [37, 41], "validatorepochlen": [37, 41], "maxallowedvalid": [37, 41], "minallowedweight": [37, 41], "maxweightslimit": [37, 41], "scalinglawpow": [37, 41], "synergyscalinglawpow": [37, 41], "subnetworkn": [37, 41], "maxalloweduid": [37, 41], "blockssincelaststep": [37, 41], "held": [4, 6, 7, 37, 39, 41], "owner": [4, 6, 11, 13, 37, 41], "issuanc": [6, 9, 37, 41], "mine": [37, 41], "health": [6, 20, 37, 41], "inflationari": [37, 41], "trend": [37, 41], "cumul": [4, 6, 37, 39, 41, 85, 88, 90, 95, 96], "factor": [37, 41], "frame": [37, 41], "overus": [37, 41], "stabil": [37, 39, 41], "congest": [37, 41], "therebi": [37, 41], "assess": [37, 39, 41, 84], "extent": [37, 41], "emit": [37, 41], "criteria": [6, 12, 37, 41, 57, 69, 77, 97], "met": [4, 6, 13, 37, 41], "look": [37, 41], "complianc": [37, 41], "overview": [4, 6, 7, 8, 11, 14, 16, 37, 41, 57], "gain": [37, 41, 70], "assist": [37, 41, 70], "featur": [37, 41, 58], "stakehold": [37, 41], "interest": [6, 14, 15, 37, 41], "broader": [37, 41], "comprehend": [37, 41], "entiti": [37, 39, 41, 65, 70], "Being": [37, 41], "claim": [37, 41, 84], "popul": [37, 41, 63], "holder": [37, 41], "aggreg": [4, 6, 37, 41], "pattern": [37, 41, 84], "simultan": [37, 41], "perspect": [37, 41], "strategi": [37, 41], "area": [37, 41], "aid": [37, 41], "elig": [37, 41], "illustr": [37, 41], "regard": [37, 41, 84], "snapshot": [4, 6, 9, 37, 39, 41], "lightweight": [37, 41], "focus": [6, 20, 37, 41, 70], "simplifi": [37, 39, 41, 84], "quick": [6, 8, 12, 37, 41], "analys": [37, 39, 41], "streamlin": [37, 41], "topologi": [37, 41], "interconnect": [37, 41], "motiv": [37, 41], "driver": [37, 41], "perceiv": [37, 41], "approach": [37, 41], "recogn": [37, 41], "nich": [37, 41], "identif": [37, 39, 41], "reliabl": [37, 39, 41, 84], "term": [37, 41], "viabil": [37, 41], "_do_set_delegate_tak": [37, 41], "monitor": [6, 12, 15, 16, 20, 37, 41, 68], "capac": [11, 37, 41], "recent": [37, 41, 65], "real": [6, 13, 37, 41], "sensit": [37, 39, 41], "landscap": [37, 41], "cryptograph": [37, 39, 41, 68], "immut": [37, 41, 70], "technologi": [37, 41], "consist": [37, 39, 41, 70], "trustworthi": [37, 39, 41], "backbon": [37, 39], "captur": [37, 39, 70, 84], "interconnected": [37, 39], "just": [6, 16, 37, 39, 70, 84], "live": [37, 39], "constantli": [37, 39], "akin": [37, 39], "yuma": [37, 39], "outlin": [37, 39, 84], "distinguish": [37, 39], "score": [6, 9, 12, 37, 39, 76, 84, 85, 90, 91, 98], "mainli": [37, 39], "timestamp": [37, 39], "everyth": [37, 39], "propag": [37, 39], "embodi": [37, 39], "bt": [37, 39, 63, 65, 68, 76, 98], "neuron_rank": [37, 39], "neuron_incent": [37, 39], "copi": [11, 21, 37, 39], "deepcopi": [37, 39], "concept": [37, 39, 84], "abil": [37, 39], "benefit": [37, 39], "respect": [4, 6, 8, 15, 20, 37, 39], "emploi": [37, 39], "accru": [37, 39], "denot": [6, 8, 37, 39], "often": [37, 39, 84], "central": [37, 39], "much": [37, 39, 67, 84], "agre": [37, 39], "judgment": [37, 39], "agreement": [37, 39], "achiev": [37, 39], "reput": [37, 39], "past": [4, 6, 37, 39], "matrix": [26, 37, 39], "infer": [37, 39], "suggest": [37, 39], "stronger": [37, 39], "encourag": [37, 39], "benefici": [37, 39], "belief": [37, 39], "correct": [4, 6, 37, 39, 70, 84], "addit": [6, 11, 13, 20, 37, 39], "proport": [37, 39], "wij": [37, 39], "ith": [37, 39], "impli": [37, 39], "j": [37, 39, 87, 90], "mai": [4, 6, 11, 13, 37, 39, 65, 84], "offlin": [37, 39], "asset": [6, 20, 37, 39], "practic": [6, 20, 37, 39], "exchang": [37, 39], "basic": [11, 37, 39, 70], "easier": [37, 39, 70], "quickli": [37, 39], "simpl": [21, 37, 39, 65], "succinctli": [37, 39], "concis": [37, 39, 84], "500": [37, 39], "formal": [6, 14, 37, 39], "metagraph_repr": [37, 39], "mirror": [37, 39], "softwar": [6, 13, 37, 39], "evolut": [6, 15, 37, 39], "examin": [37, 39, 84], "quicker": [37, 39], "full": [37, 39], "overhead": [37, 39], "12345": [37, 39], "beyond": [37, 39, 70], "300": [37, 39], "light": [37, 39, 84], "fetch": [6, 7, 11, 14, 20, 37, 39], "relev": [6, 15, 37, 39, 57, 69, 70, 77, 84, 86, 90], "could": [37, 39, 70, 84], "etc": [37, 39], "float32": [37, 39], "neuron_stak": [37, 39], "obtain": [6, 13, 37, 39, 76, 88, 95], "suitabl": [6, 13, 37, 39], "unstructur": [37, 39], "come": [37, 39], "raw_weights_data": [37, 39], "tailor": [37, 39, 58, 70], "root_weight": [37, 39], "raw_root_weights_data": [37, 39], "persist": [37, 39], "later": [37, 39, 65], "reload": [37, 39], "locat": [6, 7, 37, 39], "continu": [6, 20, 29, 37, 39, 67, 70], "restart": [37, 39], "exact": [37, 39], "correctli": [37, 39, 63, 84], "accur": [37, 39, 84], "reconstitut": [37, 39], "now": [37, 39], "alias_to_command": 3, "__create_parser__": [3, 37], "create_config": [3, 37], "_get_coldkey_wallets_for_path": [4, 7, 16, 20], "show_deleg": 4, "prev_deleg": 4, "width": 4, "tabl": [4, 5, 6, 7, 9, 11, 14, 16, 26], "descend": [4, 6, 12], "helper": [4, 79, 80, 82, 83, 97], "list_deleg": [4, 6], "my_deleg": [4, 6], "unless": 4, "expand": [4, 11, 76, 88, 95], "column": [4, 6, 7, 9, 11, 12, 13, 26], "truncat": [4, 6], "\u03c4": [4, 6, 9, 12, 14], "4h": [4, 6], "hour": [4, 6], "vpermit": [4, 6, 12], "24h": [4, 6], "k\u03c4": [4, 6], "1000": [4, 6], "24": [4, 6, 20], "desc": [4, 6], "brief": [4, 6, 84], "show": [4, 6, 14, 15, 16, 20, 26, 84], "consid": [4, 6, 11, 15, 58], "current_deleg": 4, "previous_deleg": 4, "80": 4, "librari": 4, "render": 4, "delegatestakecommand": [4, 6], "delegate_ss58kei": [4, 6], "chosen": [4, 6], "btcli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "incur": [4, 5, 6], "delegateunstakecommand": [4, 6], "revers": [4, 6], "free": [4, 6, 20], "care": [4, 6, 13], "listdelegatescommand": [4, 6], "four": [4, 6], "done": [4, 6], "highlight": [4, 6], "decreas": [4, 6], "na": [4, 6], "hyperlink": [4, 6], "nominatecommand": [4, 6], "unlock": [4, 6], "redund": [4, 6], "report": [4, 6, 7], "To": [4, 6], "my_hotkei": [4, 6, 16], "outcom": [4, 6], "programmat": [4, 5, 6], "due": [4, 6, 20, 26, 84], "side": [4, 5, 6], "mydelegatescommand": [4, 6], "nom": [4, 6], "suit": [4, 6, 13], "setdelegatetakecommand": [4, 6], "commiss": [4, 6], "fraction": [4, 6], "abov": [4, 6, 35, 85, 90], "ratio": [4, 6, 24], "standalon": [4, 6, 7, 9], "setidentitycommand": [5, 6], "set_ident": [5, 6], "pgp": [5, 6], "fingerprint": [5, 6], "contact": [5, 6], "consent": [5, 6], "willing": [5, 6], "script": [5, 6], "getidentitycommand": [5, 6], "get_ident": [5, 6], "btli": [5, 6], "s58_address": [5, 6], "termin": [5, 6, 13], "inspect": [6, 37, 57], "misc": [6, 37, 57, 69, 77], "munch": [6, 21, 37], "stakecommand": [6, 16], "posit": [6, 16], "max_stak": [6, 16, 18], "all_hotkei": [6, 16, 18], "exclud": [6, 16, 18, 75], "wish": [6, 11, 13, 14, 15, 16, 18, 20], "stakeshow": [6, 16], "compil": [6, 7, 11, 12, 16], "shown": [6, 16, 26, 84], "dai": [6, 11, 16], "unstakecommand": [6, 18], "previous": [6, 18], "hotkey_ss58address": [6, 18], "hk1": [6, 18], "hk2": [6, 18], "command_pars": [6, 18], "overviewcommand": [6, 12], "especi": [6, 12, 13, 70], "seek": [6, 11, 12, 14, 15], "summari": [6, 12, 26, 84], "choos": [6, 12], "tabular": [6, 12], "vtrust": [6, 9, 12], "sort_bi": [6, 12], "sort_ord": [6, 12], "ideal": [6, 12, 20], "_get_neurons_for_netuid": [6, 12], "args_tupl": [6, 12], "_get_de_registered_stake_for_coldkey_wallet": [6, 12], "powregistercommand": [6, 13], "pow_regist": [6, 13], "puzzl": [6, 13], "mandatori": [6, 13, 70], "processor": [6, 13], "next": [6, 13, 73], "frequenc": [6, 13], "no_output_in_plac": [6, 13], "disabl": [6, 13, 20], "cleaner": [6, 13], "use_cuda": [6, 13], "acceler": [6, 13], "no_cuda": [6, 13], "adequ": [6, 13], "sound": [6, 13], "hardwar": [6, 13], "opt": [6, 13], "perman": [6, 13], "registercommand": [6, 13], "precondit": [6, 13], "proce": [6, 10, 13], "consider": [6, 13], "runfaucetcommand": [6, 13], "testnet": [6, 13], "chanc": [6, 13], "visibl": [6, 13, 14], "multi": [6, 13], "setup": [6, 13, 20], "prefer": [6, 13, 65, 89, 90], "meant": [6, 13, 65], "experi": [6, 13], "newcoldkeycommand": [6, 20], "phrase": [6, 20, 26], "overwrite_coldkei": [6, 20], "newhotkeycommand": [6, 20], "overwrite_hotkei": [6, 20], "hotk": [6, 20], "regencoldkeycommand": [6, 20], "json_password": [6, 20], "word1": [6, 20], "word2": [6, 20], "word12": [6, 20], "possibli": [6, 20], "recoveri": [6, 20], "reason": [6, 20], "caution": [6, 10, 20], "avoid": [6, 17, 20, 65, 84], "unintention": [6, 20], "regencoldkeypubcommand": [6, 20], "public_key_hex": [6, 20], "overwrite_coldkeypub": [6, 20], "5dkq4": [6, 20], "perhap": [6, 20], "loss": [6, 17, 20, 26, 76], "regenhotkeycommand": [6, 20], "0x1234": [6, 20], "upgrad": [6, 20], "cautious": [6, 20], "accident": [6, 20], "updatewalletcommand": [6, 20], "modern": [6, 20], "date": [6, 20, 67], "walletcreatecommand": [6, 20], "21": [6, 14, 20], "renew": [6, 20], "fresh": [6, 20], "walletbalancecommand": [6, 20], "transfercommand": [6, 17], "ed2519": [6, 17], "5dp8": [6, 17], "inspectcommand": [6, 7], "gather": [6, 7, 26], "hot": [6, 7], "metagraphcommand": [6, 9], "tau": [6, 9], "partial": [6, 9, 84], "diagnost": [6, 9], "listcommand": [6, 8], "organ": [6, 8], "tree": [6, 8], "hierarch": [6, 8], "child": [6, 8], "invoc": [6, 8, 10, 11], "scan": [6, 8], "unavail": [6, 8], "updatecommand": [6, 10], "seri": [6, 10], "instal": [6, 10], "master": [6, 10], "branch": [6, 10], "github": [6, 10], "repositori": [6, 10], "reinstal": [6, 10], "pip": [6, 10], "ff": [6, 10], "easi": [6, 10], "senatecommand": [6, 15], "proposalscommand": [6, 15], "ongo": [6, 15], "showvotescommand": [6, 15], "proposal_vot": [6, 15], "breakdown": [6, 15], "disagr": [6, 15], "deprec": [6, 15], "pleas": [6, 15, 84], "senateregistercommand": [6, 15], "senate_regist": [6, 15], "senateleavecommand": [6, 15], "senate_leav": [6, 15], "discard": [6, 15], "voluntarili": [6, 15], "leav": [6, 15, 84], "votecommand": [6, 15], "senate_vot": [6, 15], "want": [6, 11, 15], "exercis": [6, 15], "right": [6, 15], "rootregistercommand": [6, 14], "acknowledg": [6, 14], "deepli": [6, 14], "straightforward": [6, 14], "rootlist": [6, 14], "constitut": [6, 14], "5cacupsssdkwcmjbmdmjdnwva15fjquz5hssggvdzffphaua": [6, 14], "27086": [6, 14], "37070": [6, 14], "raok9": [6, 14], "5gmaak7frpxnaxjbqvxcoezmgzfkrdee76egmkob3wxubur": [6, 14], "520": [6, 14], "24199": [6, 14], "open\u03c4ensor": [6, 14], "founda\u03c4ion": [6, 14], "5f4tqywrhfgvcnhoqeinsr6kjd4wmz2kfhlj4ohyuyhbzac3": [6, 14], "1275437": [6, 14], "45895": [6, 14], "roundtable21": [6, 14], "5ffapas75bv5pjhfap2fvlbj9zaxufdjeypsabnc1wcfe52v": [6, 14], "84718": [6, 14], "42095": [6, 14], "5hk5tp6t2s59dywmhrwpbvjej86t61kjuryqeooqj8srepen": [6, 14], "168897": [6, 14], "40859": [6, 14], "rizzo": [6, 14], "5cxrfp2ekfhe62r7q3vpprajjmghti7vwvb2yr79jvez282w": [6, 14], "53383": [6, 14], "34400": [6, 14], "\u03c4aos\u03c4a\u03c4": [6, 14], "bitapai": [6, 14], "5hddm3ibfd2glt5ik7lznt3xjunrnn8poecfggqgawuvknm8": [6, 14], "646944": [6, 14], "73569": [6, 14], "rootsetweightscommand": [6, 14], "comma": [6, 14], "rootgetweightscommand": [6, 14], "get_weight": [6, 14], "11": [6, 14], "13": [6, 14], "18": [6, 14], "19": [6, 14], "00": [6, 14], "40": [6, 14], "25": [6, 14], "30": [6, 14], "60": [6, 14], "49": [6, 14], "35": [6, 14], "59": [6, 14], "14": [6, 14, 85, 90], "53": [6, 14], "06": [6, 14], "03": [6, 14], "_get_hotkey_wallets_for_wallet": [7, 16], "registersubnetworkcommand": 11, "credenti": 11, "successfulli": 11, "prepar": [11, 84], "awar": 11, "implic": 11, "subnetlockcostcommand": 11, "lock_cost": 11, "anyon": 11, "anneal": 11, "unapp": 11, "reach": 11, "amenbl": 11, "catch": 11, "subnetlistcommand": 11, "sudo": 11, "footer": 11, "summar": [11, 84], "ownership": 11, "hyperparam": 11, "subnetsudocommand": 11, "theirs": 11, "familiar": 11, "subnethyperparamscommand": 11, "32767": 11, "7200": 11, "455": 11, "99": 11, "1000000000000000000": 11, "2013": 11, "112": 11, "5000": 11, "100000000000": 11, "900000": 11, "subnetgethyperparamscommand": 11, "format_call_data": 15, "call_data": 15, "display_vot": 15, "vote_data": 15, "delegate_info": 15, "intlistprompt": 19, "show_default": 19, "show_choic": 19, "promptbas": 19, "texttyp": 19, "check_choic": 19, "check_netuid_set": 19, "allow_non": 19, "check_for_cuda_reg_config": 19, "get_hotkey_wallets_for_wallet": 19, "get_coldkey_wallets_for_path": 19, "get_all_wallets_for_path": 19, "delegatesdetail": 19, "from_json": 19, "_get_delegates_details_from_github": 19, "requests_get": 19, "get_delegates_detail": 19, "_get_coldkey_ss58_addresses_for_path": 20, "invalidconfigfil": [21, 37], "yamlerror": [21, 37], "strict": [21, 37], "defaultmunch": [21, 37], "__is_set": [21, 37], "translat": [21, 37], "nest": [21, 37], "strictli": [21, 37], "undefin": [21, 37], "__split_params__": [21, 37], "_config": [21, 37], "namespac": [21, 37, 71], "__parse_args__": [21, 37], "__deepcopy__": [21, 37], "memo": [21, 37], "invert": [21, 37], "foo": [21, 37], "lol": [21, 37], "hello": [21, 37, 70], "poni": [21, 37], "pretti": [21, 37], "eval": [21, 37], "with_spac": [21, 37], "_remove_private_kei": [21, 37], "shallow": [21, 37], "update_with_kwarg": [21, 37], "_merg": [21, 37], "conflict": [21, 37], "preced": [21, 37, 84], "merge_al": [21, 37], "is_set": [21, 37], "param_nam": [21, 37], "defaultconfig": [21, 37], "nominate_extrins": 24, "set_delegate_take_extrins": 24, "u16": 24, "ll": 24, "delegate_extrins": 24, "interpret": [24, 34, 35, 36], "unclud": [24, 28, 29, 30, 32, 33, 34, 35, 36], "did": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "undelegate_extrins": 24, "un": 24, "log_util": [25, 37, 57], "validatorlogg": 26, "style": [26, 89, 90], "print_response_t": 26, "batch_predict": 26, "sort_col": 26, "task_repeat": 26, "tasks_per_serv": 26, "top": 26, "predict": 26, "probabl": [26, 89, 90], "prob": 26, "length": 26, "neuron_stats_column": 26, "print_synergy_t": 26, "syn_loss_diff": 26, "synergi": 26, "pairwis": 26, "reduct": 26, "origin": [26, 58], "diagon": 26, "print_stats_t": 26, "titl": 26, "caption": 26, "mark_uid": 26, "print_synapse_t": 26, "evalu": [26, 72, 84], "shaplei": 26, "print_weights_t": 26, "neuron_stat": 26, "metagraph_n": 26, "sample_uid": 26, "sample_weight": 26, "include_uid": 26, "num_row": 26, "inculd": 26, "print_console_validator_identifi": 26, "print_console_metagraph_statu": 26, "current_block": 26, "start_block": 26, "print_console_query_summari": 26, "blocks_per_epoch": 26, "epoch_step": 26, "epoch": [26, 67], "responsive_uid": 26, "queried_uid": 26, "step_tim": 26, "epoch_responsive_uid": 26, "epoch_queried_uid": 26, "print_console_subtensor_weight": 26, "epoch_start_tim": 26, "validatorprometheu": 26, "promethei": 26, "log_run_info": 26, "log_epoch_start": 26, "batch_siz": 26, "sequence_length": 26, "validation_len": 26, "epochs_until_reset": 26, "log_step": 26, "log_epoch_end": 26, "register_subnetwork_extrins": 27, "set_hyperparameter_extrins": 27, "prometheus_extrins": 28, "substensor": [28, 32], "host": [28, 32], "122": [28, 32], "31": [28, 32], "9221": [28, 32], "register_extrins": 29, "burned_register_extrins": 29, "maxsuccessexcept": 29, "class": [29, 63], "maxattemptsexcept": 29, "run_faucet_extrins": 29, "net": 29, "root_register_extrins": 30, "set_root_weights_extrins": 30, "subent": [30, 33], "register_senate_extrins": 31, "leave_senate_extrins": 31, "vote_senate_extrins": 31, "serve_extrins": 32, "serve_axon_extrins": 32, "set_weights_extrins": 33, "uint64": 33, "add_stake_extrins": 34, "add_stake_multiple_extrins": 34, "__do_add_stake_singl": 34, "transfer_extrins": 35, "keep_al": 35, "aliv": 35, "__do_remove_stake_singl": 36, "unstake_extrins": 36, "unstake_multiple_extrins": 36, "all_command": 37, "basemin": [57, 58, 69], "content_match": [57, 69, 77, 80], "keyword_match": [57, 69, 77, 80, 86, 90], "task_valid": [57, 69, 77, 80, 86, 90], "dahoa": [57, 69, 77, 86, 90], "dpo": [57, 69, 77, 86, 90], "nsfw": [57, 69, 77, 86, 90], "open_assist": [57, 69, 77, 90], "reciproc": [57, 69, 77, 86, 90], "dataset": [57, 69, 77], "gate": [57, 69, 77, 98], "openaimin": 58, "api_kei": 58, "openai": 58, "pertain": [58, 70, 84], "gpt": [58, 76, 87, 90, 94], "temperatur": 58, "extend": [58, 70], "easili": 58, "optim": [58, 76, 89, 90], "combin": 58, "max_token": 58, "openai_api_kei": 58, "is_prompt_in_cach": 62, "default_blacklist": 62, "func": [62, 66], "get_config": 63, "dictat": 65, "might": [65, 70, 84], "_prompt": 65, "wrapper": 65, "around": 65, "intermediari": 65, "pre": [65, 76], "cach": 65, "reprocess": 65, "repli": 65, "subsequ": 65, "custommin": 65, "life": [65, 70], "contruct": 65, "wast": 65, "onc": 65, "listen": 65, "knowledg": [65, 67], "run_in_background_thread": 65, "background": 65, "stop_run_thread": 65, "caus": [65, 84], "record_request_timestamp": 66, "default_prior": 66, "loop": 67, "regularli": 67, "keyboard": 67, "interrupt": 67, "unforeseen": 67, "outgo": 67, "keyboardinterrupt": 67, "manual": 67, "diagnosi": [67, 68], "wandb_on": 68, "vector": 68, "bias": 68, "wandb": [68, 98], "__spec_version__": [69, 77], "three": 70, "mutabl": 70, "inner": 70, "enforc": 70, "hi": [70, 84], "model_prompt": 70, "llm": 70, "what": [70, 84], "demonstr": 70, "streamprompt": 70, "sequenc": 70, "As": 70, "seamlessli": 70, "agent": 70, "throughout": 70, "lifetim": 70, "product": 70, "thu": 70, "heart": 70, "consum": 70, "split": 70, "newlin": 70, "charact": [70, 72, 84], "coher": 70, "pertin": 70, "consumpt": 70, "ultim": 70, "glean": 70, "taskcriterion": [72, 97], "criterion": 72, "compose_text": 72, "textlengthunitenum": 72, "sentenc": [72, 76, 88, 90, 95], "paragraph": 72, "matchlengthcriteria": 72, "target_length": 72, "_count_sent": 72, "_get_completion_length": 72, "contentmatchtypeenum": 72, "starts_with": 72, "ends_with": 72, "matchcontentcriteria": 72, "default_text": 72, "match_typ": 72, "words_arrai": 72, "contentmatchtyp": 72, "sampled_word": 72, "negate_match": 72, "__post_init__": 72, "_get_regex_pattern": 72, "simpleresponselayoutcriteria": 72, "bullet": 72, "layoutmatchtypeenum": 72, "unordered_list": 72, "unord": 72, "numbered_list": 72, "matchlayoutcriteria": 72, "layout_typ": 72, "__next__": 73, "stopiter": 73, "mockdataset": 73, "eventschema": 74, "completion_tim": 74, "completion_status_messag": 74, "completion_status_cod": 74, "task_typ": [74, 97], "gating_loss": 74, "step_length": 74, "best": [74, 84], "dahoas_reward_model": [74, 86, 90], "blacklist_filt": [74, 86, 90], "blacklist_filter_matched_ngram": 74, "blacklist_filter_significance_scor": 74, "nsfw_filter": [74, 86, 90], "reciprocate_reward_model": [74, 86, 90], "diversity_reward_model": [74, 86, 90], "diversity_reward_model_histor": 74, "diversity_reward_model_batch": 74, "dpo_reward_model": [74, 86, 90], "rlhf_reward_model": [74, 86, 90], "prompt_reward_model": [74, 86, 90], "relevance_filt": [74, 86, 90], "dahoas_reward_model_norm": 74, "nsfw_filter_norm": 74, "nsfw_filter_scor": 74, "reciprocate_reward_model_norm": 74, "diversity_reward_model_norm": 74, "dpo_reward_model_norm": 74, "rlhf_reward_model_norm": 74, "prompt_reward_model_norm": 74, "relevance_filter_norm": 74, "relevance_filter_bert_scor": 74, "relevance_filter_mpnet_scor": 74, "task_validation_penalty_raw": 74, "task_validation_penalty_adjust": 74, "task_validation_penalty_appli": 74, "keyword_match_penalty_raw": 74, "keyword_match_penalty_adjust": 74, "keyword_match_penalty_appli": 74, "sentence_match_penalty_raw": 74, "sentence_match_penalty_adjust": 74, "sentence_match_penalty_appli": 74, "from_dict": 74, "event_dict": 74, "disable_log_reward": 74, "get_random_uid": 75, "random": 75, "randomli": 75, "run_step": 75, "basegatingmodel": 76, "model_nam": [76, 87, 90], "train": [76, 98], "languag": 76, "eleutherai": [76, 87, 90], "neo": 76, "125m": 76, "num_uid": 76, "4096": 76, "learning_r": 76, "01": [76, 85, 90], "momentum": 76, "resync": [76, 98], "previous_metagraph": [76, 98], "gatingmodel": 76, "squar": 76, "network_s": 76, "sentenceembedgatingmodel": 76, "mean_pool": [76, 88, 95], "model_output": [76, 88, 95], "attention_mask": [76, 87, 88, 90, 95], "embed": [76, 88, 90, 95], "attent": [76, 84, 88, 95], "mask": [76, 88, 95], "input_mask_expand": [76, 88, 95], "wise": [76, 88, 95], "divid": [76, 88, 95], "clamp": [76, 88, 95], "1e": [76, 88, 95], "ttl_cach": 78, "128": 78, "ttl": 78, "_ttl_hash_gen": 78, "ttl_get_block": 78, "contentmatchpenaltymodel": [79, 80], "max_penalti": [79, 80, 82, 83], "basepenaltymodel": [79, 80, 81, 82, 83], "calculate_penalti": [79, 80, 81, 82, 83], "apply_penalti": [80, 82], "penaltymodeltyp": [80, 82], "task_validation_penalti": [80, 82], "keyword_match_penalti": [80, 82, 86, 90], "sentence_match_penalti": [80, 82], "taskvalidationpenaltymodel": [80, 83], "keywordmatchpenaltymodel": [80, 81], "check_exploits_keyword": [80, 81], "baseprompt": 84, "sanit": 84, "templat": 84, "search": 84, "regex": 84, "matches_templ": 84, "input_text": 84, "unformat": 84, "scoringprompt": 84, "extract_scor": 84, "mock_respons": 84, "followup": 84, "mockdendritepool": 84, "augmentprompt": 84, "followupprompt": 84, "question": 84, "answerprompt": 84, "answer": 84, "firewallprompt": 84, "detect": 84, "jailbreak": 84, "inject": 84, "firewal": 84, "find_unique_tag": 84, "substr": 84, "followup_request_templ": 84, "augment_scoring_templ": 84, "multilin": 84, "succinct": 84, "qualiti": 84, "tag": 84, "irrelev": 84, "perfectli": 84, "good": 84, "explan": 84, "sole": 84, "manipul": 84, "disregard": 84, "few": 84, "shot": 84, "thought": 84, "coffe": 84, "brew": 84, "drink": 84, "roast": 84, "bean": 84, "berri": 84, "coffea": 84, "speci": 84, "tea": 84, "beverag": 84, "steep": 84, "boil": 84, "water": 84, "gordon": 84, "ramsai": 84, "british": 84, "chef": 84, "restaurateur": 84, "writer": 84, "televis": 84, "person": 84, "he": 84, "blunt": 84, "fieri": 84, "temper": 84, "expertis": 84, "french": 84, "italian": 84, "cuisin": 84, "skill": 84, "culinari": 84, "tradit": 84, "highli": 84, "mention": 84, "mar": 84, "fourth": 84, "planet": 84, "sun": 84, "smallest": 84, "solar": 84, "mercuri": 84, "becaus": 84, "reddish": 84, "appear": 84, "colour": 84, "variat": 84, "appl": 84, "chlorophyl": 84, "great": 84, "gatsbi": 84, "1925": 84, "novel": 84, "american": 84, "scott": 84, "fitzgerald": 84, "theme": 84, "wealth": 84, "love": 84, "dream": 84, "narr": 84, "followup_scoring_templ": 84, "deserv": 84, "low": 84, "moreov": 84, "focu": 84, "why": 84, "portrai": 84, "answer_scoring_templ": 84, "wrap": 84, "extran": 84, "intermedi": 84, "incomplet": 84, "unnecessari": 84, "ambigu": 84, "Be": 84, "presid": 84, "georg": 84, "washington": 84, "capit": 84, "franc": 84, "rome": 84, "pari": 84, "There": 84, "50": 84, "But": 84, "don": 84, "forget": 84, "territori": 84, "too": 84, "slightli": 84, "less": [84, 98], "explain": 84, "einstein": 84, "theori": 84, "matter": 84, "overli": 84, "equival": 84, "energi": 84, "mass": 84, "graviti": 84, "chemic": 84, "discourag": 84, "firewall_templ": 84, "Such": 84, "assert": 84, "swai": 84, "ve": 84, "briefli": 84, "justifi": 84, "subtl": 84, "overtli": 84, "malici": 84, "harm": 84, "regardless": 84, "subtleti": 84, "overt": 84, "pai": 84, "delimit": 84, "upcom": 84, "followup_prompt": 84, "base_text": [84, 97], "answer_prompt": 84, "augment_request_templ": 84, "augment_prompt": 84, "blacklistrewardev": [85, 90], "baserewardev": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "matched_ngram": 85, "significance_scor": 85, "boundari": [85, 90], "n_min": [85, 90], "n_max": [85, 90], "word_limit": [85, 90], "2000": [85, 90], "partial_ratio_boundari": [85, 90], "95": [85, 90], "half_lif": [85, 90], "20000": [85, 90], "001": [85, 90], "memory_lim": [85, 90], "1000000": [85, 90], "frequency_multipli": [85, 90], "baserewardmodel": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "gram": [85, 90], "counter": [85, 90], "extract_ngram": [85, 90], "_add_ngram": [85, 90], "ngram": [85, 90], "prune": [85, 90], "lossi": [85, 90], "ifi": [85, 90], "uzh": [85, 90], "ch": [85, 90], "dbtg": [85, 90], "sdbs13": [85, 90], "t01": [85, 90], "pdf": [85, 90], "bucket": [85, 90], "calculate_signific": [85, 90], "get_signific": [85, 90], "recalcul": [85, 90], "most_common": [85, 90], "most_signific": [85, 90], "force_upd": [85, 90], "set_counter_to_half": [85, 90], "half": [85, 90], "roll": [85, 90, 98], "window": [85, 90], "get_reward": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "normalize_reward": [85, 88, 90, 91, 95, 96], "varianc": [85, 88, 90, 95, 96], "cdf": [85, 88, 90, 95, 96], "welford": [85, 88, 90, 95, 96], "onlin": [85, 88, 90, 95, 96], "erf": [85, 88, 90, 95, 96], "rewardmodeltyp": [86, 90], "rlhf": [86, 90], "relevance_bert": [86, 90], "relevance_mpnet": [86, 90], "task_validator_filt": [86, 90], "defaultrewardframeworkconfig": [86, 90], "framework": [86, 90], "dpo_model_weight": [86, 90], "rlhf_model_weight": [86, 90], "reciprocate_model_weight": [86, 90], "dahoas_model_weight": [86, 90], "prompt_model_weight": [86, 90], "dahoasrewardmodel": [87, 90], "6b": [87, 90], "load_weight": [87, 90], "input_id": [87, 90], "past_key_valu": [87, 90], "token_type_id": [87, 90], "position_id": [87, 90], "head_mask": [87, 90], "inputs_emb": [87, 90], "mc_token_id": [87, 90], "label": [87, 90], "return_dict": [87, 90], "output_attent": [87, 90], "output_hidden_st": [87, 90], "diversityrewardev": [88, 90], "diversityrewardmodel": [88, 90], "diversity_model_path": [88, 90, 95], "mpnet": [88, 90, 95], "v2": [88, 90, 92, 95], "get_embed": [88, 90, 95], "update_historic_embed": [88, 90], "get_historic_reward": [88, 90], "get_batch_reward": [88, 90], "raw_reward": [88, 90], "directpreferencerewardmodel": [89, 90], "reward_model_nam": [89, 90, 92, 93], "cerebra": [89, 90], "btlm": [89, 90], "3b": [89, 90], "8k": [89, 90], "reward_singl": [89, 90, 92], "with_penalti": [89, 90], "guidanc": [89, 90], "eric": [89, 90], "mitchel": [89, 90], "nsfwrewardmodel": [90, 91], "nsfw_filter_model_path": [90, 91], "facebook": [90, 91], "roberta": [90, 91], "hate": [90, 91], "speech": [90, 91], "dynabench": [90, 91], "r4": [90, 91], "nsfwrewardev": [90, 91], "openassistantrewardmodel": [90, 92], "openassist": [90, 92], "deberta": [90, 92], "v3": [90, 92], "reciprocaterewardmodel": [90, 94], "reward_model_path": [90, 94], "j_rm_format": [90, 94], "oa": [90, 94], "revis": [90, 94], "501f895": [90, 94], "relevancerewardmodel": [90, 95], "relevancerewardev": [90, 95], "unsuccess": [90, 96], "zero": [90, 96], "promptrewardmodel": [90, 93], "vmware": [90, 93], "open": [90, 93], "llama": [90, 93], "7b": [90, 93], "instruct": [90, 93], "bert_scor": 95, "mpnet_scor": 95, "bertrelevancerewardmodel": 95, "relevance_model_path": 95, "bert": 95, "uncas": 95, "mpnetrelevencemodel": 95, "normalized_reward": 96, "parse_reward_ev": 96, "reward_ev": 96, "task_nam": 97, "compose_prompt": 97, "summarytask": 97, "questiongenerationtask": 97, "questionanswertask": 97, "create_summarization_task": 97, "create_qg_task": 97, "create_qa_task": 97, "should_reinit_wandb": 98, "init_wandb": 98, "reinit": 98, "reinit_wandb": 98, "reiniti": 98, "should_checkpoint": 98, "checkpoint": 98, "resync_metagraph": 98, "resync_linear_lay": 98, "linear_lay": 98, "linear": 98, "check_uid_avail": 98, "vpermit_tao_limit": 98, "save_st": 98, "load_stat": 98, "should_set_weight": 99}, "objects": {"": [[37, 0, 0, "-", "bittensor"], [58, 0, 0, "-", "miner"], [59, 0, 0, "-", "neurons"], [69, 0, 0, "-", "prompting"]], "bittensor": [[37, 1, 1, "", "ALL_COMMANDS"], [37, 2, 1, "", "AxonInfo"], [37, 2, 1, "", "BTStreamingResponseModel"], [37, 2, 1, "id11", "Balance"], [37, 6, 1, "", "ChainConnectionError"], [37, 2, 1, "", "ChainDataType"], [37, 6, 1, "", "ChainError"], [37, 6, 1, "", "ChainQueryError"], [37, 6, 1, "", "ChainTransactionError"], [37, 2, 1, "", "DefaultConfig"], [37, 2, 1, "", "DelegateInfo"], [37, 2, 1, "", "IPInfo"], [37, 6, 1, "", "IdentityError"], [37, 6, 1, "", "InvalidConfigFile"], [37, 6, 1, "id0", "KeyFileError"], [37, 2, 1, "", "Mockkeyfile"], [37, 1, 1, "", "NACL_SALT"], [37, 2, 1, "", "NeuronInfo"], [37, 2, 1, "", "NeuronInfoLite"], [37, 6, 1, "", "NominationError"], [37, 6, 1, "", "NotDelegateError"], [37, 6, 1, "", "NotRegisteredError"], [37, 2, 1, "", "PriorityThreadPoolExecutor"], [37, 2, 1, "", "PrometheusInfo"], [37, 1, 1, "", "ProposalCallData"], [37, 2, 1, "", "ProposalVoteData"], [37, 1, 1, "id53", "RAOPERTAO"], [37, 6, 1, "", "RegistrationError"], [37, 6, 1, "", "StakeError"], [37, 2, 1, "", "StakeInfo"], [37, 2, 1, "", "StreamingSynapse"], [37, 2, 1, "", "SubnetHyperparameters"], [37, 2, 1, "", "SubnetInfo"], [37, 2, 1, "", "Synapse"], [37, 1, 1, "", "T"], [37, 1, 1, "", "TORCH_DTYPES"], [37, 2, 1, "", "Tensor"], [37, 2, 1, "", "TerminalInfo"], [37, 6, 1, "", "TransferError"], [37, 1, 1, "id9", "U16_MAX"], [37, 7, 1, "id10", "U16_NORMALIZED_FLOAT"], [37, 1, 1, "id54", "U64_MAX"], [37, 7, 1, "", "U64_NORMALIZED_FLOAT"], [37, 6, 1, "", "UnstakeError"], [37, 1, 1, "", "__archive_entrypoint__"], [37, 1, 1, "", "__bellagene_entrypoint__"], [37, 1, 1, "", "__blocktime__"], [37, 1, 1, "", "__console__"], [37, 1, 1, "", "__delegates_details_url__"], [37, 1, 1, "", "__finney_entrypoint__"], [37, 1, 1, "", "__finney_test_entrypoint__"], [37, 1, 1, "", "__local_entrypoint__"], [37, 1, 1, "", "__network_explorer_map__"], [37, 1, 1, "", "__networks__"], [37, 1, 1, "", "__new_signature_version__"], [37, 1, 1, "", "__pipaddress__"], [37, 1, 1, "", "__rao_symbol__"], [37, 1, 1, "", "__ss58_address_length__"], [37, 1, 1, "", "__ss58_format__"], [37, 1, 1, "", "__tao_symbol__"], [37, 1, 1, "", "__type_registry__"], [37, 1, 1, "", "__use_console__"], [37, 1, 1, "", "__version__"], [37, 1, 1, "", "__version_as_int__"], [37, 7, 1, "", "ask_password_to_encrypt"], [37, 2, 1, "", "axon"], [0, 0, 0, "-", "axon"], [1, 0, 0, "-", "btlogging"], [37, 7, 1, "", "cast_dtype"], [37, 7, 1, "", "cast_float"], [37, 7, 1, "", "cast_int"], [37, 7, 1, "", "cast_shape"], [2, 0, 0, "-", "chain_data"], [37, 2, 1, "", "cli"], [3, 0, 0, "-", "cli"], [6, 0, 0, "-", "commands"], [37, 2, 1, "", "config"], [21, 0, 0, "-", "config"], [37, 1, 1, "", "configs"], [37, 7, 1, "", "create_identity_dict"], [37, 7, 1, "", "create_pow"], [37, 1, 1, "", "custom_rpc_type_registry"], [37, 7, 1, "", "debug"], [37, 7, 1, "", "decode_hex_identity_dict"], [37, 7, 1, "", "decrypt_keyfile_data"], [37, 1, 1, "", "defaults"], [37, 2, 1, "", "dendrite"], [22, 0, 0, "-", "dendrite"], [37, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [37, 7, 1, "", "display_mnemonic_msg"], [37, 7, 1, "", "encrypt_keyfile_data"], [23, 0, 0, "-", "errors"], [25, 0, 0, "-", "extrinsics"], [37, 7, 1, "", "from_scale_encoding"], [37, 7, 1, "", "from_scale_encoding_using_type_string"], [37, 7, 1, "", "get_coldkey_password_from_environment"], [37, 7, 1, "", "get_explorer_root_url_by_network_from_map"], [37, 7, 1, "", "get_explorer_url_for_network"], [37, 7, 1, "", "get_size"], [37, 7, 1, "", "get_ss58_format"], [37, 7, 1, "", "hash"], [37, 7, 1, "id1", "is_valid_bittensor_address_or_public_key"], [37, 7, 1, "", "is_valid_ed25519_pubkey"], [37, 7, 1, "", "is_valid_ss58_address"], [38, 0, 0, "-", "keyfile"], [37, 7, 1, "", "keyfile_data_encryption_method"], [37, 7, 1, "", "keyfile_data_is_encrypted"], [37, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [37, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [37, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [37, 7, 1, "", "legacy_encrypt_keyfile_data"], [37, 2, 1, "", "logging"], [39, 0, 0, "-", "metagraph"], [37, 7, 1, "", "serialized_keypair_to_keyfile_data"], [37, 7, 1, "", "ss58_address_to_bytes"], [37, 7, 1, "", "ss58_to_vec_u8"], [40, 0, 0, "-", "stream"], [37, 7, 1, "", "strtobool"], [37, 7, 1, "", "strtobool_with_default"], [41, 0, 0, "-", "subtensor"], [42, 0, 0, "-", "synapse"], [43, 0, 0, "-", "tensor"], [44, 0, 0, "-", "threadpool"], [37, 7, 1, "", "trace"], [37, 7, 1, "", "turn_console_off"], [37, 7, 1, "", "turn_console_on"], [45, 0, 0, "-", "types"], [37, 7, 1, "", "u8_key_to_ss58"], [37, 7, 1, "", "unbiased_topk"], [49, 0, 0, "-", "utils"], [37, 7, 1, "", "validate_password"], [37, 7, 1, "", "version_checking"], [37, 1, 1, "", "version_split"], [56, 0, 0, "-", "wallet"]], "bittensor.AxonInfo": [[37, 3, 1, "", "__eq__"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 4, 1, "", "coldkey"], [37, 3, 1, "", "from_neuron_info"], [37, 3, 1, "", "from_parameter_dict"], [37, 3, 1, "", "from_string"], [37, 4, 1, "", "hotkey"], [37, 4, 1, "", "ip"], [37, 3, 1, "", "ip_str"], [37, 4, 1, "", "ip_type"], [37, 5, 1, "", "is_serving"], [37, 4, 1, "", "placeholder1"], [37, 4, 1, "", "placeholder2"], [37, 4, 1, "", "port"], [37, 4, 1, "", "protocol"], [37, 3, 1, "", "to_parameter_dict"], [37, 3, 1, "", "to_string"], [37, 4, 1, "", "version"]], "bittensor.BTStreamingResponseModel": [[37, 4, 1, "id61", "token_streamer"]], "bittensor.Balance": [[37, 3, 1, "id49", "__abs__"], [37, 3, 1, "id34", "__add__"], [37, 3, 1, "id28", "__eq__"], [37, 3, 1, "id45", "__float__"], [37, 3, 1, "id42", "__floordiv__"], [37, 3, 1, "id33", "__ge__"], [37, 3, 1, "id30", "__gt__"], [37, 3, 1, "id44", "__int__"], [37, 3, 1, "id32", "__le__"], [37, 3, 1, "id31", "__lt__"], [37, 3, 1, "id38", "__mul__"], [37, 3, 1, "id29", "__ne__"], [37, 3, 1, "id47", "__neg__"], [37, 3, 1, "id46", "__nonzero__"], [37, 3, 1, "id48", "__pos__"], [37, 3, 1, "id35", "__radd__"], [37, 3, 1, "id27", "__repr__"], [37, 3, 1, "id43", "__rfloordiv__"], [37, 3, 1, "id24", "__rich__"], [37, 3, 1, "id26", "__rich_rao__"], [37, 3, 1, "id39", "__rmul__"], [37, 3, 1, "id37", "__rsub__"], [37, 3, 1, "id41", "__rtruediv__"], [37, 3, 1, "id23", "__str__"], [37, 3, 1, "id25", "__str_rao__"], [37, 3, 1, "id36", "__sub__"], [37, 3, 1, "id40", "__truediv__"], [37, 3, 1, "id50", "from_float"], [37, 3, 1, "id52", "from_rao"], [37, 3, 1, "id51", "from_tao"], [37, 4, 1, "id19", "rao"], [37, 4, 1, "id18", "rao_unit"], [37, 4, 1, "id20", "tao"], [37, 4, 1, "id17", "unit"]], "bittensor.ChainDataType": [[37, 4, 1, "", "DelegateInfo"], [37, 4, 1, "", "DelegatedInfo"], [37, 4, 1, "", "IPInfo"], [37, 4, 1, "", "NeuronInfo"], [37, 4, 1, "", "NeuronInfoLite"], [37, 4, 1, "", "StakeInfo"], [37, 4, 1, "", "SubnetHyperparameters"], [37, 4, 1, "", "SubnetInfo"]], "bittensor.DefaultConfig": [[37, 3, 1, "", "default"]], "bittensor.DelegateInfo": [[37, 3, 1, "", "delegated_list_from_vec_u8"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "hotkey_ss58"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "nominators"], [37, 4, 1, "", "owner_ss58"], [37, 4, 1, "", "registrations"], [37, 4, 1, "", "return_per_1000"], [37, 4, 1, "", "take"], [37, 4, 1, "", "total_daily_return"], [37, 4, 1, "", "total_stake"], [37, 4, 1, "", "validator_permits"]], "bittensor.IPInfo": [[37, 3, 1, "", "encode"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_parameter_dict"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "ip"], [37, 4, 1, "", "ip_type"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "protocol"], [37, 3, 1, "", "to_parameter_dict"]], "bittensor.Mockkeyfile": [[37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "check_and_update_encryption"], [37, 5, 1, "", "data"], [37, 3, 1, "", "decrypt"], [37, 3, 1, "", "encrypt"], [37, 3, 1, "", "exists_on_device"], [37, 3, 1, "", "get_keypair"], [37, 3, 1, "", "is_encrypted"], [37, 3, 1, "", "is_readable"], [37, 3, 1, "", "is_writable"], [37, 5, 1, "", "keypair"], [37, 3, 1, "", "make_dirs"], [37, 3, 1, "", "set_keypair"]], "bittensor.NeuronInfo": [[37, 3, 1, "", "_neuron_dict_to_namespace"], [37, 3, 1, "", "_null_neuron"], [37, 4, 1, "", "active"], [37, 4, 1, "", "axon_info"], [37, 4, 1, "", "bonds"], [37, 4, 1, "", "coldkey"], [37, 4, 1, "", "consensus"], [37, 4, 1, "", "dividends"], [37, 4, 1, "", "emission"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_vec_u8"], [37, 3, 1, "", "from_weights_bonds_and_neuron_lite"], [37, 4, 1, "", "hotkey"], [37, 4, 1, "", "incentive"], [37, 4, 1, "", "is_null"], [37, 4, 1, "", "last_update"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "netuid"], [37, 4, 1, "", "prometheus_info"], [37, 4, 1, "", "pruning_score"], [37, 4, 1, "", "rank"], [37, 4, 1, "", "stake"], [37, 4, 1, "", "stake_dict"], [37, 4, 1, "", "total_stake"], [37, 4, 1, "", "trust"], [37, 4, 1, "", "uid"], [37, 4, 1, "", "validator_permit"], [37, 4, 1, "", "validator_trust"], [37, 4, 1, "", "weights"]], "bittensor.NeuronInfoLite": [[37, 3, 1, "", "_neuron_dict_to_namespace"], [37, 3, 1, "", "_null_neuron"], [37, 4, 1, "", "active"], [37, 4, 1, "", "axon_info"], [37, 4, 1, "", "coldkey"], [37, 4, 1, "", "consensus"], [37, 4, 1, "", "dividends"], [37, 4, 1, "", "emission"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "hotkey"], [37, 4, 1, "", "incentive"], [37, 4, 1, "", "is_null"], [37, 4, 1, "", "last_update"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "netuid"], [37, 4, 1, "", "prometheus_info"], [37, 4, 1, "", "pruning_score"], [37, 4, 1, "", "rank"], [37, 4, 1, "", "stake"], [37, 4, 1, "", "stake_dict"], [37, 4, 1, "", "total_stake"], [37, 4, 1, "", "trust"], [37, 4, 1, "", "uid"], [37, 4, 1, "", "validator_permit"], [37, 4, 1, "", "validator_trust"]], "bittensor.PriorityThreadPoolExecutor": [[37, 3, 1, "", "_adjust_thread_count"], [37, 4, 1, "", "_counter"], [37, 3, 1, "", "_initializer_failed"], [37, 3, 1, "", "add_args"], [37, 3, 1, "", "config"], [37, 5, 1, "", "is_empty"], [37, 3, 1, "", "shutdown"], [37, 3, 1, "", "submit"]], "bittensor.PrometheusInfo": [[37, 4, 1, "", "block"], [37, 3, 1, "", "fix_decoded_values"], [37, 4, 1, "", "ip"], [37, 4, 1, "", "ip_type"], [37, 4, 1, "", "port"], [37, 4, 1, "", "version"]], "bittensor.ProposalVoteData": [[37, 4, 1, "", "ayes"], [37, 4, 1, "", "end"], [37, 4, 1, "", "index"], [37, 4, 1, "", "nays"], [37, 4, 1, "", "threshold"]], "bittensor.StakeInfo": [[37, 4, 1, "", "coldkey_ss58"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "hotkey_ss58"], [37, 3, 1, "", "list_from_vec_u8"], [37, 3, 1, "", "list_of_tuple_from_vec_u8"], [37, 4, 1, "", "stake"]], "bittensor.StreamingSynapse": [[37, 2, 1, "", "BTStreamingResponse"], [37, 2, 1, "", "Config"], [37, 3, 1, "", "create_streaming_response"], [37, 3, 1, "", "extract_response_json"], [37, 3, 1, "", "process_streaming_response"]], "bittensor.StreamingSynapse.BTStreamingResponse": [[37, 3, 1, "", "__call__"], [37, 3, 1, "", "stream_response"]], "bittensor.StreamingSynapse.Config": [[37, 4, 1, "", "validate_assignment"]], "bittensor.SubnetHyperparameters": [[37, 4, 1, "", "activity_cutoff"], [37, 4, 1, "", "adjustment_interval"], [37, 4, 1, "", "bonds_moving_avg"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_parameter_dict"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "immunity_period"], [37, 4, 1, "", "kappa"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "max_burn"], [37, 4, 1, "", "max_difficulty"], [37, 4, 1, "", "max_regs_per_block"], [37, 4, 1, "", "max_weight_limit"], [37, 4, 1, "", "min_allowed_weights"], [37, 4, 1, "", "min_burn"], [37, 4, 1, "", "min_difficulty"], [37, 4, 1, "", "registration_allowed"], [37, 4, 1, "", "rho"], [37, 4, 1, "", "target_regs_per_interval"], [37, 4, 1, "", "tempo"], [37, 3, 1, "", "to_parameter_dict"], [37, 4, 1, "", "weights_rate_limit"], [37, 4, 1, "", "weights_version"]], "bittensor.SubnetInfo": [[37, 4, 1, "", "blocks_since_epoch"], [37, 4, 1, "", "burn"], [37, 4, 1, "", "connection_requirements"], [37, 4, 1, "", "difficulty"], [37, 4, 1, "", "emission_value"], [37, 3, 1, "", "fix_decoded_values"], [37, 3, 1, "", "from_parameter_dict"], [37, 3, 1, "", "from_vec_u8"], [37, 4, 1, "", "immunity_period"], [37, 4, 1, "", "kappa"], [37, 3, 1, "", "list_from_vec_u8"], [37, 4, 1, "", "max_allowed_validators"], [37, 4, 1, "", "max_n"], [37, 4, 1, "", "max_weight_limit"], [37, 4, 1, "", "min_allowed_weights"], [37, 4, 1, "", "modality"], [37, 4, 1, "", "netuid"], [37, 4, 1, "", "owner_ss58"], [37, 4, 1, "", "rho"], [37, 4, 1, "", "scaling_law_power"], [37, 4, 1, "", "subnetwork_n"], [37, 4, 1, "", "tempo"], [37, 3, 1, "", "to_parameter_dict"]], "bittensor.Synapse": [[37, 2, 1, "", "Config"], [37, 3, 1, "", "__setattr__"], [37, 4, 1, "", "_extract_header_size"], [37, 4, 1, "", "_extract_timeout"], [37, 4, 1, "", "_extract_total_size"], [37, 4, 1, "", "axon"], [37, 5, 1, "", "body_hash"], [37, 4, 1, "", "computed_body_hash"], [37, 4, 1, "", "dendrite"], [37, 3, 1, "", "deserialize"], [37, 5, 1, "", "failed_verification"], [37, 3, 1, "", "from_headers"], [37, 3, 1, "", "get_total_size"], [37, 4, 1, "", "header_size"], [37, 5, 1, "", "is_blacklist"], [37, 5, 1, "", "is_failure"], [37, 5, 1, "", "is_success"], [37, 5, 1, "", "is_timeout"], [37, 4, 1, "", "name"], [37, 3, 1, "", "parse_headers_to_inputs"], [37, 4, 1, "", "required_hash_fields"], [37, 3, 1, "", "set_name_type"], [37, 4, 1, "", "timeout"], [37, 3, 1, "", "to_headers"], [37, 4, 1, "", "total_size"]], "bittensor.Synapse.Config": [[37, 4, 1, "", "validate_assignment"]], "bittensor.Tensor": [[37, 2, 1, "", "Config"], [37, 4, 1, "", "_extract_dtype"], [37, 4, 1, "", "_extract_shape"], [37, 4, 1, "id62", "buffer"], [37, 3, 1, "", "deserialize"], [37, 4, 1, "id63", "dtype"], [37, 3, 1, "", "numpy"], [37, 3, 1, "", "serialize"], [37, 4, 1, "id64", "shape"], [37, 3, 1, "", "tensor"], [37, 3, 1, "", "tolist"]], "bittensor.Tensor.Config": [[37, 4, 1, "", "validate_assignment"]], "bittensor.TerminalInfo": [[37, 2, 1, "", "Config"], [37, 4, 1, "", "_extract_nonce"], [37, 4, 1, "", "_extract_port"], [37, 4, 1, "", "_extract_process_time"], [37, 4, 1, "", "_extract_status_code"], [37, 4, 1, "", "_extract_version"], [37, 4, 1, "", "hotkey"], [37, 4, 1, "", "ip"], [37, 4, 1, "", "nonce"], [37, 4, 1, "", "port"], [37, 4, 1, "", "process_time"], [37, 4, 1, "", "signature"], [37, 4, 1, "", "status_code"], [37, 4, 1, "", "status_message"], [37, 4, 1, "", "uuid"], [37, 4, 1, "", "version"]], "bittensor.TerminalInfo.Config": [[37, 4, 1, "", "validate_assignment"]], "bittensor.axon": [[0, 2, 1, "", "AxonMiddleware"], [0, 2, 1, "", "FastAPIThreadedServer"], [37, 3, 1, "", "__del__"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "add_args"], [37, 3, 1, "", "attach"], [0, 2, 1, "", "axon"], [37, 3, 1, "", "check_config"], [37, 3, 1, "", "config"], [37, 3, 1, "", "default_verify"], [37, 3, 1, "", "help"], [37, 3, 1, "", "info"], [37, 3, 1, "", "serve"], [37, 3, 1, "", "start"], [37, 3, 1, "", "stop"], [37, 3, 1, "", "to_string"], [37, 3, 1, "", "verify_body_integrity"]], "bittensor.axon.AxonMiddleware": [[0, 3, 1, "", "blacklist"], [0, 3, 1, "", "dispatch"], [0, 3, 1, "", "postprocess"], [0, 3, 1, "", "preprocess"], [0, 3, 1, "", "priority"], [0, 3, 1, "", "run"], [0, 3, 1, "", "verify"]], "bittensor.axon.FastAPIThreadedServer": [[0, 3, 1, "", "_wrapper_run"], [0, 3, 1, "", "install_signal_handlers"], [0, 4, 1, "", "is_running"], [0, 3, 1, "", "run_in_thread"], [0, 4, 1, "", "should_exit"], [0, 3, 1, "", "start"], [0, 3, 1, "", "stop"]], "bittensor.axon.axon": [[0, 3, 1, "", "__del__"], [0, 3, 1, "", "__repr__"], [0, 3, 1, "", "__str__"], [0, 3, 1, "", "add_args"], [0, 3, 1, "", "attach"], [0, 3, 1, "", "check_config"], [0, 3, 1, "", "config"], [0, 3, 1, "", "default_verify"], [0, 3, 1, "", "help"], [0, 3, 1, "", "info"], [0, 3, 1, "", "serve"], [0, 3, 1, "", "start"], [0, 3, 1, "", "stop"], [0, 3, 1, "", "to_string"], [0, 3, 1, "", "verify_body_integrity"]], "bittensor.btlogging": [[1, 7, 1, "", "_remove_loguru_ansi_directive"], [1, 1, 1, "", "logger"], [1, 2, 1, "", "logging"]], "bittensor.btlogging.logging": [[1, 4, 1, "", "__debug_on__"], [1, 4, 1, "", "__file_sink__"], [1, 4, 1, "", "__has_been_inited__"], [1, 4, 1, "", "__std_sink__"], [1, 4, 1, "", "__trace_on__"], [1, 3, 1, "", "_format"], [1, 3, 1, "", "add_args"], [1, 3, 1, "", "check_config"], [1, 3, 1, "", "config"], [1, 3, 1, "", "debug"], [1, 3, 1, "", "error"], [1, 3, 1, "", "exception"], [1, 3, 1, "", "get_level"], [1, 3, 1, "", "help"], [1, 3, 1, "", "info"], [1, 3, 1, "", "log_filter"], [1, 3, 1, "", "log_formatter"], [1, 3, 1, "", "log_save_filter"], [1, 3, 1, "", "log_save_formatter"], [1, 3, 1, "", "set_debug"], [1, 3, 1, "", "set_trace"], [1, 3, 1, "", "success"], [1, 3, 1, "", "trace"], [1, 3, 1, "", "warning"]], "bittensor.chain_data": [[2, 2, 1, "", "AxonInfo"], [2, 2, 1, "", "ChainDataType"], [2, 2, 1, "", "DelegateInfo"], [2, 2, 1, "", "IPInfo"], [2, 2, 1, "", "NeuronInfo"], [2, 2, 1, "", "NeuronInfoLite"], [2, 2, 1, "", "PrometheusInfo"], [2, 1, 1, "", "ProposalCallData"], [2, 2, 1, "", "ProposalVoteData"], [2, 1, 1, "", "RAOPERTAO"], [2, 2, 1, "", "StakeInfo"], [2, 2, 1, "", "SubnetHyperparameters"], [2, 2, 1, "", "SubnetInfo"], [2, 1, 1, "", "U16_MAX"], [2, 1, 1, "", "U64_MAX"], [2, 1, 1, "", "custom_rpc_type_registry"], [2, 7, 1, "", "from_scale_encoding"], [2, 7, 1, "", "from_scale_encoding_using_type_string"]], "bittensor.chain_data.AxonInfo": [[2, 3, 1, "", "__eq__"], [2, 3, 1, "", "__repr__"], [2, 3, 1, "", "__str__"], [2, 4, 1, "", "coldkey"], [2, 3, 1, "", "from_neuron_info"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_string"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "ip"], [2, 3, 1, "", "ip_str"], [2, 4, 1, "", "ip_type"], [2, 5, 1, "", "is_serving"], [2, 4, 1, "", "placeholder1"], [2, 4, 1, "", "placeholder2"], [2, 4, 1, "", "port"], [2, 4, 1, "", "protocol"], [2, 3, 1, "", "to_parameter_dict"], [2, 3, 1, "", "to_string"], [2, 4, 1, "", "version"]], "bittensor.chain_data.ChainDataType": [[2, 4, 1, "", "DelegateInfo"], [2, 4, 1, "", "DelegatedInfo"], [2, 4, 1, "", "IPInfo"], [2, 4, 1, "", "NeuronInfo"], [2, 4, 1, "", "NeuronInfoLite"], [2, 4, 1, "", "StakeInfo"], [2, 4, 1, "", "SubnetHyperparameters"], [2, 4, 1, "", "SubnetInfo"]], "bittensor.chain_data.DelegateInfo": [[2, 3, 1, "", "delegated_list_from_vec_u8"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey_ss58"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "nominators"], [2, 4, 1, "", "owner_ss58"], [2, 4, 1, "", "registrations"], [2, 4, 1, "", "return_per_1000"], [2, 4, 1, "", "take"], [2, 4, 1, "", "total_daily_return"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "validator_permits"]], "bittensor.chain_data.IPInfo": [[2, 3, 1, "", "encode"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "ip"], [2, 4, 1, "", "ip_type"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "protocol"], [2, 3, 1, "", "to_parameter_dict"]], "bittensor.chain_data.NeuronInfo": [[2, 3, 1, "", "_neuron_dict_to_namespace"], [2, 3, 1, "", "_null_neuron"], [2, 4, 1, "", "active"], [2, 4, 1, "", "axon_info"], [2, 4, 1, "", "bonds"], [2, 4, 1, "", "coldkey"], [2, 4, 1, "", "consensus"], [2, 4, 1, "", "dividends"], [2, 4, 1, "", "emission"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 3, 1, "", "from_weights_bonds_and_neuron_lite"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "incentive"], [2, 4, 1, "", "is_null"], [2, 4, 1, "", "last_update"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "prometheus_info"], [2, 4, 1, "", "pruning_score"], [2, 4, 1, "", "rank"], [2, 4, 1, "", "stake"], [2, 4, 1, "", "stake_dict"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "trust"], [2, 4, 1, "", "uid"], [2, 4, 1, "", "validator_permit"], [2, 4, 1, "", "validator_trust"], [2, 4, 1, "", "weights"]], "bittensor.chain_data.NeuronInfoLite": [[2, 3, 1, "", "_neuron_dict_to_namespace"], [2, 3, 1, "", "_null_neuron"], [2, 4, 1, "", "active"], [2, 4, 1, "", "axon_info"], [2, 4, 1, "", "coldkey"], [2, 4, 1, "", "consensus"], [2, 4, 1, "", "dividends"], [2, 4, 1, "", "emission"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "incentive"], [2, 4, 1, "", "is_null"], [2, 4, 1, "", "last_update"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "prometheus_info"], [2, 4, 1, "", "pruning_score"], [2, 4, 1, "", "rank"], [2, 4, 1, "", "stake"], [2, 4, 1, "", "stake_dict"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "trust"], [2, 4, 1, "", "uid"], [2, 4, 1, "", "validator_permit"], [2, 4, 1, "", "validator_trust"]], "bittensor.chain_data.PrometheusInfo": [[2, 4, 1, "", "block"], [2, 3, 1, "", "fix_decoded_values"], [2, 4, 1, "", "ip"], [2, 4, 1, "", "ip_type"], [2, 4, 1, "", "port"], [2, 4, 1, "", "version"]], "bittensor.chain_data.ProposalVoteData": [[2, 4, 1, "", "ayes"], [2, 4, 1, "", "end"], [2, 4, 1, "", "index"], [2, 4, 1, "", "nays"], [2, 4, 1, "", "threshold"]], "bittensor.chain_data.StakeInfo": [[2, 4, 1, "", "coldkey_ss58"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey_ss58"], [2, 3, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "list_of_tuple_from_vec_u8"], [2, 4, 1, "", "stake"]], "bittensor.chain_data.SubnetHyperparameters": [[2, 4, 1, "", "activity_cutoff"], [2, 4, 1, "", "adjustment_interval"], [2, 4, 1, "", "bonds_moving_avg"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "immunity_period"], [2, 4, 1, "", "kappa"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "max_burn"], [2, 4, 1, "", "max_difficulty"], [2, 4, 1, "", "max_regs_per_block"], [2, 4, 1, "", "max_weight_limit"], [2, 4, 1, "", "min_allowed_weights"], [2, 4, 1, "", "min_burn"], [2, 4, 1, "", "min_difficulty"], [2, 4, 1, "", "registration_allowed"], [2, 4, 1, "", "rho"], [2, 4, 1, "", "target_regs_per_interval"], [2, 4, 1, "", "tempo"], [2, 3, 1, "", "to_parameter_dict"], [2, 4, 1, "", "weights_rate_limit"], [2, 4, 1, "", "weights_version"]], "bittensor.chain_data.SubnetInfo": [[2, 4, 1, "", "blocks_since_epoch"], [2, 4, 1, "", "burn"], [2, 4, 1, "", "connection_requirements"], [2, 4, 1, "", "difficulty"], [2, 4, 1, "", "emission_value"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "immunity_period"], [2, 4, 1, "", "kappa"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "max_allowed_validators"], [2, 4, 1, "", "max_n"], [2, 4, 1, "", "max_weight_limit"], [2, 4, 1, "", "min_allowed_weights"], [2, 4, 1, "", "modality"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "owner_ss58"], [2, 4, 1, "", "rho"], [2, 4, 1, "", "scaling_law_power"], [2, 4, 1, "", "subnetwork_n"], [2, 4, 1, "", "tempo"], [2, 3, 1, "", "to_parameter_dict"]], "bittensor.cli": [[3, 1, 1, "", "ALIAS_TO_COMMAND"], [3, 1, 1, "", "COMMANDS"], [37, 3, 1, "", "__create_parser__"], [37, 3, 1, "", "check_config"], [3, 2, 1, "", "cli"], [3, 1, 1, "", "console"], [37, 3, 1, "", "create_config"], [37, 3, 1, "", "run"]], "bittensor.cli.cli": [[3, 3, 1, "", "__create_parser__"], [3, 3, 1, "", "check_config"], [3, 3, 1, "", "create_config"], [3, 3, 1, "", "run"]], "bittensor.commands": [[6, 2, 1, "", "DelegateStakeCommand"], [6, 2, 1, "", "DelegateUnstakeCommand"], [6, 2, 1, "", "GetIdentityCommand"], [6, 2, 1, "", "InspectCommand"], [6, 2, 1, "", "ListCommand"], [6, 2, 1, "", "ListDelegatesCommand"], [6, 2, 1, "", "MetagraphCommand"], [6, 2, 1, "", "MyDelegatesCommand"], [6, 2, 1, "", "NewColdkeyCommand"], [6, 2, 1, "", "NewHotkeyCommand"], [6, 2, 1, "", "NominateCommand"], [6, 2, 1, "", "OverviewCommand"], [6, 2, 1, "", "PowRegisterCommand"], [6, 2, 1, "", "ProposalsCommand"], [6, 2, 1, "", "RegenColdkeyCommand"], [6, 2, 1, "", "RegenColdkeypubCommand"], [6, 2, 1, "", "RegenHotkeyCommand"], [6, 2, 1, "", "RegisterCommand"], [6, 2, 1, "", "RootGetWeightsCommand"], [6, 2, 1, "", "RootList"], [6, 2, 1, "", "RootRegisterCommand"], [6, 2, 1, "", "RootSetWeightsCommand"], [6, 2, 1, "", "RunFaucetCommand"], [6, 2, 1, "", "SenateCommand"], [6, 2, 1, "", "SenateLeaveCommand"], [6, 2, 1, "", "SenateRegisterCommand"], [6, 2, 1, "", "SetDelegateTakeCommand"], [6, 2, 1, "", "SetIdentityCommand"], [6, 2, 1, "", "ShowVotesCommand"], [6, 2, 1, "", "StakeCommand"], [6, 2, 1, "", "StakeShow"], [6, 2, 1, "", "TransferCommand"], [6, 2, 1, "", "UnStakeCommand"], [6, 2, 1, "", "UpdateCommand"], [6, 2, 1, "", "UpdateWalletCommand"], [6, 2, 1, "", "VoteCommand"], [6, 2, 1, "", "WalletBalanceCommand"], [6, 2, 1, "", "WalletCreateCommand"], [6, 1, 1, "", "defaults"], [4, 0, 0, "-", "delegates"], [5, 0, 0, "-", "identity"], [7, 0, 0, "-", "inspect"], [8, 0, 0, "-", "list"], [9, 0, 0, "-", "metagraph"], [10, 0, 0, "-", "misc"], [11, 0, 0, "-", "network"], [12, 0, 0, "-", "overview"], [13, 0, 0, "-", "register"], [14, 0, 0, "-", "root"], [15, 0, 0, "-", "senate"], [16, 0, 0, "-", "stake"], [17, 0, 0, "-", "transfer"], [18, 0, 0, "-", "unstake"], [19, 0, 0, "-", "utils"], [20, 0, 0, "-", "wallets"]], "bittensor.commands.DelegateStakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.DelegateUnstakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.GetIdentityCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.InspectCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ListCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ListDelegatesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.MetagraphCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.MyDelegatesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NewColdkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NewHotkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NominateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.OverviewCommand": [[6, 3, 1, "", "_get_de_registered_stake_for_coldkey_wallet"], [6, 3, 1, "", "_get_neurons_for_netuid"], [6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.PowRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ProposalsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenColdkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenColdkeypubCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenHotkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootGetWeightsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootList": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootSetWeightsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RunFaucetCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateLeaveCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SetDelegateTakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SetIdentityCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ShowVotesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.StakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.StakeShow": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.TransferCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UnStakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UpdateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UpdateWalletCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.VoteCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.WalletBalanceCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.WalletCreateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.delegates": [[4, 2, 1, "", "DelegateStakeCommand"], [4, 2, 1, "", "DelegateUnstakeCommand"], [4, 2, 1, "", "ListDelegatesCommand"], [4, 2, 1, "", "MyDelegatesCommand"], [4, 2, 1, "", "NominateCommand"], [4, 2, 1, "", "SetDelegateTakeCommand"], [4, 7, 1, "", "_get_coldkey_wallets_for_path"], [4, 1, 1, "", "console"], [4, 7, 1, "", "show_delegates"]], "bittensor.commands.delegates.DelegateStakeCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.DelegateUnstakeCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.ListDelegatesCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.MyDelegatesCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.NominateCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.SetDelegateTakeCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.identity": [[5, 2, 1, "", "GetIdentityCommand"], [5, 2, 1, "", "SetIdentityCommand"]], "bittensor.commands.identity.GetIdentityCommand": [[5, 3, 1, "", "add_args"], [5, 3, 1, "", "check_config"], [5, 3, 1, "", "run"]], "bittensor.commands.identity.SetIdentityCommand": [[5, 3, 1, "", "add_args"], [5, 3, 1, "", "check_config"], [5, 3, 1, "", "run"]], "bittensor.commands.inspect": [[7, 2, 1, "", "InspectCommand"], [7, 7, 1, "", "_get_coldkey_wallets_for_path"], [7, 7, 1, "", "_get_hotkey_wallets_for_wallet"], [7, 1, 1, "", "console"]], "bittensor.commands.inspect.InspectCommand": [[7, 3, 1, "", "add_args"], [7, 3, 1, "", "check_config"], [7, 3, 1, "", "run"]], "bittensor.commands.list": [[8, 2, 1, "", "ListCommand"], [8, 1, 1, "", "console"]], "bittensor.commands.list.ListCommand": [[8, 3, 1, "", "add_args"], [8, 3, 1, "", "check_config"], [8, 3, 1, "", "run"]], "bittensor.commands.metagraph": [[9, 2, 1, "", "MetagraphCommand"], [9, 1, 1, "", "console"]], "bittensor.commands.metagraph.MetagraphCommand": [[9, 3, 1, "", "add_args"], [9, 3, 1, "", "check_config"], [9, 3, 1, "", "run"]], "bittensor.commands.misc": [[10, 2, 1, "", "UpdateCommand"], [10, 1, 1, "", "console"]], "bittensor.commands.misc.UpdateCommand": [[10, 3, 1, "", "add_args"], [10, 3, 1, "", "check_config"], [10, 3, 1, "", "run"]], "bittensor.commands.network": [[11, 1, 1, "", "HYPERPARAMS"], [11, 2, 1, "", "RegisterSubnetworkCommand"], [11, 2, 1, "", "SubnetGetHyperparamsCommand"], [11, 2, 1, "", "SubnetHyperparamsCommand"], [11, 2, 1, "", "SubnetListCommand"], [11, 2, 1, "", "SubnetLockCostCommand"], [11, 2, 1, "", "SubnetSudoCommand"], [11, 1, 1, "", "console"]], "bittensor.commands.network.RegisterSubnetworkCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetGetHyperparamsCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetHyperparamsCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetListCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetLockCostCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetSudoCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.overview": [[12, 2, 1, "", "OverviewCommand"], [12, 1, 1, "", "console"]], "bittensor.commands.overview.OverviewCommand": [[12, 3, 1, "", "_get_de_registered_stake_for_coldkey_wallet"], [12, 3, 1, "", "_get_neurons_for_netuid"], [12, 3, 1, "", "add_args"], [12, 3, 1, "", "check_config"], [12, 3, 1, "", "run"]], "bittensor.commands.register": [[13, 2, 1, "", "PowRegisterCommand"], [13, 2, 1, "", "RegisterCommand"], [13, 2, 1, "", "RunFaucetCommand"], [13, 1, 1, "", "console"]], "bittensor.commands.register.PowRegisterCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.register.RegisterCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.register.RunFaucetCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.root": [[14, 2, 1, "", "RootGetWeightsCommand"], [14, 2, 1, "", "RootList"], [14, 2, 1, "", "RootRegisterCommand"], [14, 2, 1, "", "RootSetWeightsCommand"], [14, 1, 1, "", "console"]], "bittensor.commands.root.RootGetWeightsCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootList": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootRegisterCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootSetWeightsCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.senate": [[15, 2, 1, "", "ProposalsCommand"], [15, 2, 1, "", "SenateCommand"], [15, 2, 1, "", "SenateLeaveCommand"], [15, 2, 1, "", "SenateRegisterCommand"], [15, 2, 1, "", "ShowVotesCommand"], [15, 2, 1, "", "VoteCommand"], [15, 1, 1, "", "console"], [15, 7, 1, "", "display_votes"], [15, 7, 1, "", "format_call_data"]], "bittensor.commands.senate.ProposalsCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateLeaveCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateRegisterCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.ShowVotesCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.VoteCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.stake": [[16, 2, 1, "", "StakeCommand"], [16, 2, 1, "", "StakeShow"], [16, 7, 1, "", "_get_coldkey_wallets_for_path"], [16, 7, 1, "", "_get_hotkey_wallets_for_wallet"], [16, 1, 1, "id0", "console"]], "bittensor.commands.stake.StakeCommand": [[16, 3, 1, "", "add_args"], [16, 3, 1, "", "check_config"], [16, 3, 1, "", "run"]], "bittensor.commands.stake.StakeShow": [[16, 3, 1, "", "add_args"], [16, 3, 1, "", "check_config"], [16, 3, 1, "", "run"]], "bittensor.commands.transfer": [[17, 2, 1, "", "TransferCommand"], [17, 1, 1, "", "console"]], "bittensor.commands.transfer.TransferCommand": [[17, 3, 1, "", "add_args"], [17, 3, 1, "", "check_config"], [17, 3, 1, "", "run"]], "bittensor.commands.unstake": [[18, 2, 1, "", "UnStakeCommand"], [18, 1, 1, "", "console"]], "bittensor.commands.unstake.UnStakeCommand": [[18, 3, 1, "", "add_args"], [18, 3, 1, "", "check_config"], [18, 3, 1, "", "run"]], "bittensor.commands.utils": [[19, 2, 1, "", "DelegatesDetails"], [19, 2, 1, "", "IntListPrompt"], [19, 7, 1, "", "_get_delegates_details_from_github"], [19, 7, 1, "", "check_for_cuda_reg_config"], [19, 7, 1, "", "check_netuid_set"], [19, 1, 1, "", "console"], [19, 7, 1, "", "get_all_wallets_for_path"], [19, 7, 1, "", "get_coldkey_wallets_for_path"], [19, 7, 1, "", "get_delegates_details"], [19, 7, 1, "", "get_hotkey_wallets_for_wallet"]], "bittensor.commands.utils.DelegatesDetails": [[19, 4, 1, "", "description"], [19, 3, 1, "", "from_json"], [19, 4, 1, "", "name"], [19, 4, 1, "", "signature"], [19, 4, 1, "", "url"]], "bittensor.commands.utils.IntListPrompt": [[19, 3, 1, "", "check_choice"]], "bittensor.commands.wallets": [[20, 2, 1, "", "NewColdkeyCommand"], [20, 2, 1, "", "NewHotkeyCommand"], [20, 2, 1, "", "RegenColdkeyCommand"], [20, 2, 1, "", "RegenColdkeypubCommand"], [20, 2, 1, "", "RegenHotkeyCommand"], [20, 2, 1, "", "UpdateWalletCommand"], [20, 2, 1, "", "WalletBalanceCommand"], [20, 2, 1, "", "WalletCreateCommand"], [20, 7, 1, "", "_get_coldkey_ss58_addresses_for_path"], [20, 7, 1, "", "_get_coldkey_wallets_for_path"]], "bittensor.commands.wallets.NewColdkeyCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.NewHotkeyCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeyCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeypubCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenHotkeyCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.UpdateWalletCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.WalletBalanceCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.commands.wallets.WalletCreateCommand": [[20, 3, 1, "", "add_args"], [20, 3, 1, "", "check_config"], [20, 3, 1, "", "run"]], "bittensor.config": [[21, 2, 1, "", "DefaultConfig"], [21, 6, 1, "", "InvalidConfigFile"], [21, 1, 1, "", "T"], [37, 3, 1, "", "__deepcopy__"], [37, 4, 1, "", "__is_set"], [37, 3, 1, "", "__parse_args__"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__split_params__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "_merge"], [37, 3, 1, "", "_remove_private_keys"], [21, 2, 1, "", "config"], [37, 3, 1, "", "copy"], [37, 3, 1, "", "is_set"], [37, 3, 1, "", "merge"], [37, 3, 1, "", "merge_all"], [37, 3, 1, "", "to_string"], [37, 3, 1, "", "update_with_kwargs"]], "bittensor.config.DefaultConfig": [[21, 3, 1, "", "default"]], "bittensor.config.config": [[21, 3, 1, "", "__deepcopy__"], [21, 4, 1, "", "__is_set"], [21, 3, 1, "", "__parse_args__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__split_params__"], [21, 3, 1, "", "__str__"], [21, 3, 1, "", "_merge"], [21, 3, 1, "", "_remove_private_keys"], [21, 3, 1, "", "copy"], [21, 3, 1, "", "is_set"], [21, 3, 1, "", "merge"], [21, 3, 1, "", "merge_all"], [21, 3, 1, "", "to_string"], [21, 3, 1, "", "update_with_kwargs"]], "bittensor.dendrite": [[37, 3, 1, "", "__aenter__"], [37, 3, 1, "", "__aexit__"], [37, 3, 1, "", "__del__"], [37, 3, 1, "id82", "__repr__"], [37, 3, 1, "id81", "__str__"], [37, 3, 1, "", "_get_endpoint_url"], [37, 3, 1, "", "_handle_request_errors"], [37, 3, 1, "", "_log_incoming_response"], [37, 3, 1, "", "_log_outgoing_request"], [37, 3, 1, "id74", "aclose_session"], [37, 3, 1, "id77", "call"], [37, 3, 1, "id78", "call_stream"], [37, 3, 1, "id73", "close_session"], [22, 2, 1, "", "dendrite"], [37, 4, 1, "", "external_ip"], [37, 3, 1, "id76", "forward"], [37, 4, 1, "", "keypair"], [37, 3, 1, "id79", "preprocess_synapse_for_request"], [37, 3, 1, "id80", "process_server_response"], [37, 3, 1, "id75", "query"], [37, 5, 1, "", "session"], [37, 4, 1, "", "synapse_history"]], "bittensor.dendrite.dendrite": [[22, 3, 1, "", "__aenter__"], [22, 3, 1, "", "__aexit__"], [22, 3, 1, "", "__del__"], [22, 3, 1, "id9", "__repr__"], [22, 3, 1, "id8", "__str__"], [22, 3, 1, "", "_get_endpoint_url"], [22, 3, 1, "", "_handle_request_errors"], [22, 3, 1, "", "_log_incoming_response"], [22, 3, 1, "", "_log_outgoing_request"], [22, 3, 1, "id1", "aclose_session"], [22, 3, 1, "id4", "call"], [22, 3, 1, "id5", "call_stream"], [22, 3, 1, "id0", "close_session"], [22, 4, 1, "", "external_ip"], [22, 3, 1, "id3", "forward"], [22, 4, 1, "", "keypair"], [22, 3, 1, "id6", "preprocess_synapse_for_request"], [22, 3, 1, "id7", "process_server_response"], [22, 3, 1, "id2", "query"], [22, 5, 1, "", "session"], [22, 4, 1, "", "synapse_history"]], "bittensor.errors": [[23, 6, 1, "", "ChainConnectionError"], [23, 6, 1, "", "ChainError"], [23, 6, 1, "", "ChainQueryError"], [23, 6, 1, "", "ChainTransactionError"], [23, 6, 1, "", "IdentityError"], [23, 6, 1, "", "KeyFileError"], [23, 6, 1, "", "NominationError"], [23, 6, 1, "", "NotDelegateError"], [23, 6, 1, "", "NotRegisteredError"], [23, 6, 1, "", "RegistrationError"], [23, 6, 1, "", "StakeError"], [23, 6, 1, "", "TransferError"], [23, 6, 1, "", "UnstakeError"]], "bittensor.extrinsics": [[24, 0, 0, "-", "delegation"], [26, 0, 0, "-", "log_utilities"], [27, 0, 0, "-", "network"], [28, 0, 0, "-", "prometheus"], [29, 0, 0, "-", "registration"], [30, 0, 0, "-", "root"], [31, 0, 0, "-", "senate"], [32, 0, 0, "-", "serving"], [33, 0, 0, "-", "set_weights"], [34, 0, 0, "-", "staking"], [35, 0, 0, "-", "transfer"], [36, 0, 0, "-", "unstaking"]], "bittensor.extrinsics.delegation": [[24, 7, 1, "", "delegate_extrinsic"], [24, 1, 1, "", "logger"], [24, 7, 1, "", "nominate_extrinsic"], [24, 7, 1, "", "set_delegate_take_extrinsic"], [24, 7, 1, "", "undelegate_extrinsic"]], "bittensor.extrinsics.log_utilities": [[26, 2, 1, "", "ValidatorLogger"], [26, 2, 1, "", "ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities.ValidatorLogger": [[26, 3, 1, "", "print_console_metagraph_status"], [26, 3, 1, "", "print_console_query_summary"], [26, 3, 1, "", "print_console_subtensor_weight"], [26, 3, 1, "", "print_console_validator_identifier"], [26, 3, 1, "", "print_response_table"], [26, 3, 1, "", "print_stats_table"], [26, 3, 1, "", "print_synapse_table"], [26, 3, 1, "", "print_synergy_table"], [26, 3, 1, "", "print_weights_table"]], "bittensor.extrinsics.log_utilities.ValidatorPrometheus": [[26, 3, 1, "", "log_epoch_end"], [26, 3, 1, "", "log_epoch_start"], [26, 3, 1, "", "log_run_info"], [26, 3, 1, "", "log_step"]], "bittensor.extrinsics.network": [[27, 7, 1, "", "register_subnetwork_extrinsic"], [27, 7, 1, "", "set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[28, 7, 1, "", "prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[29, 6, 1, "", "MaxAttemptsException"], [29, 6, 1, "", "MaxSuccessException"], [29, 7, 1, "", "burned_register_extrinsic"], [29, 7, 1, "", "register_extrinsic"], [29, 7, 1, "", "run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[30, 1, 1, "", "logger"], [30, 7, 1, "", "root_register_extrinsic"], [30, 7, 1, "", "set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[31, 7, 1, "", "leave_senate_extrinsic"], [31, 7, 1, "", "register_senate_extrinsic"], [31, 7, 1, "", "vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[32, 7, 1, "", "serve_axon_extrinsic"], [32, 7, 1, "", "serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[33, 1, 1, "", "logger"], [33, 7, 1, "", "set_weights_extrinsic"]], "bittensor.extrinsics.staking": [[34, 7, 1, "", "__do_add_stake_single"], [34, 7, 1, "", "add_stake_extrinsic"], [34, 7, 1, "", "add_stake_multiple_extrinsic"]], "bittensor.extrinsics.transfer": [[35, 7, 1, "", "transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[36, 7, 1, "", "__do_remove_stake_single"], [36, 7, 1, "", "unstake_extrinsic"], [36, 7, 1, "", "unstake_multiple_extrinsic"]], "bittensor.keyfile": [[38, 2, 1, "", "Mockkeyfile"], [38, 1, 1, "", "NACL_SALT"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "_may_overwrite"], [37, 3, 1, "", "_read_keyfile_data_from_file"], [37, 3, 1, "", "_write_keyfile_data_to_file"], [38, 7, 1, "", "ask_password_to_encrypt"], [37, 3, 1, "", "check_and_update_encryption"], [37, 5, 1, "", "data"], [37, 3, 1, "", "decrypt"], [38, 7, 1, "", "decrypt_keyfile_data"], [38, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [37, 3, 1, "", "encrypt"], [38, 7, 1, "", "encrypt_keyfile_data"], [37, 3, 1, "", "exists_on_device"], [38, 7, 1, "", "get_coldkey_password_from_environment"], [37, 3, 1, "", "get_keypair"], [37, 3, 1, "", "is_encrypted"], [37, 3, 1, "", "is_readable"], [37, 3, 1, "", "is_writable"], [38, 2, 1, "", "keyfile"], [37, 5, 1, "", "keyfile_data"], [38, 7, 1, "", "keyfile_data_encryption_method"], [38, 7, 1, "", "keyfile_data_is_encrypted"], [38, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [38, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [38, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [37, 5, 1, "", "keypair"], [38, 7, 1, "", "legacy_encrypt_keyfile_data"], [37, 3, 1, "", "make_dirs"], [38, 7, 1, "", "serialized_keypair_to_keyfile_data"], [37, 3, 1, "", "set_keypair"], [38, 7, 1, "", "validate_password"]], "bittensor.keyfile.Mockkeyfile": [[38, 3, 1, "", "__repr__"], [38, 3, 1, "", "__str__"], [38, 3, 1, "", "check_and_update_encryption"], [38, 5, 1, "", "data"], [38, 3, 1, "", "decrypt"], [38, 3, 1, "", "encrypt"], [38, 3, 1, "", "exists_on_device"], [38, 3, 1, "", "get_keypair"], [38, 3, 1, "", "is_encrypted"], [38, 3, 1, "", "is_readable"], [38, 3, 1, "", "is_writable"], [38, 5, 1, "", "keypair"], [38, 3, 1, "", "make_dirs"], [38, 3, 1, "", "set_keypair"]], "bittensor.keyfile.keyfile": [[38, 3, 1, "", "__repr__"], [38, 3, 1, "", "__str__"], [38, 3, 1, "", "_may_overwrite"], [38, 3, 1, "", "_read_keyfile_data_from_file"], [38, 3, 1, "", "_write_keyfile_data_to_file"], [38, 3, 1, "", "check_and_update_encryption"], [38, 5, 1, "", "data"], [38, 3, 1, "", "decrypt"], [38, 3, 1, "", "encrypt"], [38, 3, 1, "", "exists_on_device"], [38, 3, 1, "", "get_keypair"], [38, 3, 1, "", "is_encrypted"], [38, 3, 1, "", "is_readable"], [38, 3, 1, "", "is_writable"], [38, 5, 1, "", "keyfile_data"], [38, 5, 1, "", "keypair"], [38, 3, 1, "", "make_dirs"], [38, 3, 1, "", "set_keypair"]], "bittensor.logging": [[37, 4, 1, "", "__debug_on__"], [37, 4, 1, "", "__file_sink__"], [37, 4, 1, "", "__has_been_inited__"], [37, 4, 1, "", "__std_sink__"], [37, 4, 1, "", "__trace_on__"], [37, 3, 1, "", "_format"], [37, 3, 1, "", "add_args"], [37, 3, 1, "", "check_config"], [37, 3, 1, "", "config"], [37, 3, 1, "", "debug"], [37, 3, 1, "", "error"], [37, 3, 1, "", "exception"], [37, 3, 1, "", "get_level"], [37, 3, 1, "", "help"], [37, 3, 1, "", "info"], [37, 3, 1, "", "log_filter"], [37, 3, 1, "", "log_formatter"], [37, 3, 1, "", "log_save_filter"], [37, 3, 1, "", "log_save_formatter"], [37, 3, 1, "", "set_debug"], [37, 3, 1, "", "set_trace"], [37, 3, 1, "", "success"], [37, 3, 1, "", "trace"], [37, 3, 1, "", "warning"]], "bittensor.metagraph": [[37, 5, 1, "", "B"], [37, 5, 1, "", "C"], [37, 5, 1, "", "D"], [37, 5, 1, "", "E"], [37, 5, 1, "", "I"], [37, 5, 1, "", "R"], [37, 5, 1, "", "S"], [37, 5, 1, "", "T"], [37, 5, 1, "", "Tv"], [37, 5, 1, "", "W"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "_assign_neurons"], [37, 3, 1, "", "_create_tensor"], [37, 3, 1, "", "_initialize_subtensor"], [37, 3, 1, "", "_process_root_weights"], [37, 3, 1, "", "_process_weights_or_bonds"], [37, 3, 1, "", "_set_metagraph_attributes"], [37, 3, 1, "", "_set_weights_and_bonds"], [37, 5, 1, "", "addresses"], [37, 4, 1, "", "axons"], [37, 4, 1, "", "block"], [37, 5, 1, "", "coldkeys"], [39, 7, 1, "", "get_save_dir"], [37, 5, 1, "", "hotkeys"], [39, 7, 1, "", "latest_block_path"], [37, 3, 1, "", "load"], [37, 3, 1, "", "load_from_path"], [37, 3, 1, "", "metadata"], [39, 2, 1, "", "metagraph"], [37, 4, 1, "", "n"], [37, 4, 1, "", "netuid"], [37, 4, 1, "", "network"], [37, 3, 1, "", "save"], [37, 3, 1, "", "sync"], [37, 4, 1, "", "version"]], "bittensor.metagraph.metagraph": [[39, 5, 1, "", "B"], [39, 5, 1, "", "C"], [39, 5, 1, "", "D"], [39, 5, 1, "", "E"], [39, 5, 1, "", "I"], [39, 5, 1, "", "R"], [39, 5, 1, "", "S"], [39, 5, 1, "", "T"], [39, 5, 1, "", "Tv"], [39, 5, 1, "", "W"], [39, 3, 1, "", "__repr__"], [39, 3, 1, "", "__str__"], [39, 3, 1, "", "_assign_neurons"], [39, 3, 1, "", "_create_tensor"], [39, 3, 1, "", "_initialize_subtensor"], [39, 3, 1, "", "_process_root_weights"], [39, 3, 1, "", "_process_weights_or_bonds"], [39, 3, 1, "", "_set_metagraph_attributes"], [39, 3, 1, "", "_set_weights_and_bonds"], [39, 5, 1, "", "addresses"], [39, 4, 1, "", "axons"], [39, 4, 1, "", "block"], [39, 5, 1, "", "coldkeys"], [39, 5, 1, "", "hotkeys"], [39, 3, 1, "", "load"], [39, 3, 1, "", "load_from_path"], [39, 3, 1, "", "metadata"], [39, 4, 1, "", "n"], [39, 4, 1, "", "netuid"], [39, 4, 1, "", "network"], [39, 3, 1, "", "save"], [39, 3, 1, "", "sync"], [39, 4, 1, "", "version"]], "bittensor.stream": [[40, 2, 1, "", "BTStreamingResponseModel"], [40, 2, 1, "", "StreamingSynapse"]], "bittensor.stream.BTStreamingResponseModel": [[40, 4, 1, "id0", "token_streamer"]], "bittensor.stream.StreamingSynapse": [[40, 2, 1, "", "BTStreamingResponse"], [40, 2, 1, "", "Config"], [40, 3, 1, "", "create_streaming_response"], [40, 3, 1, "", "extract_response_json"], [40, 3, 1, "", "process_streaming_response"]], "bittensor.stream.StreamingSynapse.BTStreamingResponse": [[40, 3, 1, "", "__call__"], [40, 3, 1, "", "stream_response"]], "bittensor.stream.StreamingSynapse.Config": [[40, 4, 1, "", "validate_assignment"]], "bittensor.subtensor": [[41, 2, 1, "", "ParamWithTypes"], [37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "_do_associate_ips"], [37, 3, 1, "", "_do_burned_register"], [37, 3, 1, "", "_do_delegation"], [37, 3, 1, "", "_do_nominate"], [37, 3, 1, "", "_do_pow_register"], [37, 3, 1, "", "_do_root_register"], [37, 3, 1, "", "_do_serve_axon"], [37, 3, 1, "", "_do_serve_prometheus"], [37, 3, 1, "", "_do_set_delegate_take"], [37, 3, 1, "", "_do_set_weights"], [37, 3, 1, "", "_do_stake"], [37, 3, 1, "", "_do_transfer"], [37, 3, 1, "", "_do_undelegation"], [37, 3, 1, "", "_do_unstake"], [37, 3, 1, "", "_encode_params"], [37, 3, 1, "", "_null_neuron"], [37, 3, 1, "", "add_args"], [37, 3, 1, "", "add_stake"], [37, 3, 1, "", "add_stake_multiple"], [37, 3, 1, "", "associated_validator_ip_info"], [37, 5, 1, "", "block"], [37, 3, 1, "", "blocks_since_epoch"], [37, 3, 1, "", "bonds"], [37, 3, 1, "", "burn"], [37, 3, 1, "", "burned_register"], [37, 4, 1, "", "chain_endpoint"], [37, 3, 1, "", "config"], [37, 3, 1, "", "delegate"], [37, 3, 1, "", "determine_chain_endpoint_and_network"], [37, 3, 1, "", "difficulty"], [37, 3, 1, "", "does_hotkey_exist"], [37, 3, 1, "", "get_all_neurons_for_pubkey"], [37, 3, 1, "", "get_all_subnet_netuids"], [37, 3, 1, "", "get_all_subnets_info"], [37, 3, 1, "", "get_all_uids_for_hotkey"], [37, 3, 1, "", "get_axon_info"], [37, 3, 1, "", "get_balance"], [37, 3, 1, "", "get_balances"], [37, 3, 1, "", "get_block_hash"], [37, 3, 1, "", "get_current_block"], [37, 3, 1, "", "get_delegate_by_hotkey"], [37, 3, 1, "", "get_delegate_take"], [37, 3, 1, "", "get_delegated"], [37, 3, 1, "", "get_delegates"], [37, 3, 1, "", "get_emission_value_by_subnet"], [37, 3, 1, "", "get_existential_deposit"], [37, 3, 1, "", "get_hotkey_owner"], [37, 3, 1, "", "get_netuids_for_hotkey"], [37, 3, 1, "", "get_neuron_for_pubkey_and_subnet"], [37, 3, 1, "", "get_nominators_for_hotkey"], [37, 3, 1, "", "get_prometheus_info"], [37, 3, 1, "", "get_proposal_call_data"], [37, 3, 1, "", "get_proposal_hashes"], [37, 4, 1, "", "get_proposal_vote_data"], [37, 3, 1, "", "get_proposals"], [37, 3, 1, "", "get_senate_members"], [37, 3, 1, "", "get_stake"], [37, 3, 1, "", "get_stake_for_coldkey_and_hotkey"], [37, 3, 1, "", "get_stake_info_for_coldkey"], [37, 3, 1, "", "get_stake_info_for_coldkeys"], [37, 3, 1, "", "get_subnet_burn_cost"], [37, 3, 1, "", "get_subnet_connection_requirement"], [37, 3, 1, "", "get_subnet_connection_requirements"], [37, 3, 1, "", "get_subnet_hyperparameters"], [37, 3, 1, "", "get_subnet_info"], [37, 3, 1, "", "get_subnet_modality"], [37, 3, 1, "", "get_subnet_owner"], [37, 3, 1, "", "get_subnets"], [37, 3, 1, "", "get_total_stake_for_coldkey"], [37, 3, 1, "", "get_total_stake_for_hotkey"], [37, 3, 1, "", "get_total_subnets"], [37, 3, 1, "", "get_transfer_fee"], [37, 3, 1, "", "get_uid_for_hotkey_on_subnet"], [37, 3, 1, "", "get_vote_data"], [37, 3, 1, "", "help"], [37, 3, 1, "", "immunity_period"], [37, 3, 1, "", "incentive"], [37, 3, 1, "", "is_hotkey_delegate"], [37, 3, 1, "", "is_hotkey_registered"], [37, 3, 1, "", "is_hotkey_registered_any"], [37, 3, 1, "", "is_hotkey_registered_on_subnet"], [37, 3, 1, "", "is_senate_member"], [37, 3, 1, "", "kappa"], [37, 3, 1, "", "leave_senate"], [41, 1, 1, "", "logger"], [37, 3, 1, "", "max_allowed_validators"], [37, 3, 1, "", "max_n"], [37, 3, 1, "", "max_weight_limit"], [37, 3, 1, "", "metagraph"], [37, 3, 1, "", "min_allowed_weights"], [37, 4, 1, "", "network"], [37, 3, 1, "", "neuron_for_uid"], [37, 3, 1, "", "neuron_for_uid_lite"], [37, 3, 1, "", "neuron_for_wallet"], [37, 3, 1, "", "neuron_has_validator_permit"], [37, 3, 1, "", "neurons"], [37, 3, 1, "", "neurons_lite"], [37, 3, 1, "", "nominate"], [37, 3, 1, "", "query_constant"], [37, 3, 1, "", "query_identity"], [37, 3, 1, "", "query_map"], [37, 3, 1, "", "query_map_subtensor"], [37, 3, 1, "", "query_module"], [37, 3, 1, "", "query_runtime_api"], [37, 3, 1, "", "query_subtensor"], [37, 3, 1, "", "register"], [37, 3, 1, "", "register_senate"], [37, 3, 1, "", "register_subnetwork"], [37, 3, 1, "", "rho"], [37, 3, 1, "", "root_register"], [37, 3, 1, "", "root_set_weights"], [37, 3, 1, "", "run_faucet"], [37, 3, 1, "", "scaling_law_power"], [37, 3, 1, "", "serve"], [37, 3, 1, "", "serve_axon"], [37, 3, 1, "", "serve_prometheus"], [37, 3, 1, "", "serving_rate_limit"], [37, 3, 1, "", "set_delegate_take"], [37, 3, 1, "", "set_hyperparameter"], [37, 3, 1, "", "set_weights"], [37, 3, 1, "", "setup_config"], [37, 3, 1, "", "state_call"], [37, 3, 1, "", "subnet_exists"], [37, 3, 1, "", "subnetwork_n"], [41, 2, 1, "", "subtensor"], [37, 3, 1, "", "synergy_scaling_law_power"], [37, 3, 1, "", "tempo"], [37, 3, 1, "", "total_issuance"], [37, 3, 1, "", "total_stake"], [37, 3, 1, "", "transfer"], [37, 3, 1, "", "tx_rate_limit"], [37, 3, 1, "", "undelegate"], [37, 3, 1, "", "unstake"], [37, 3, 1, "", "unstake_multiple"], [37, 3, 1, "", "update_identity"], [37, 3, 1, "", "validator_batch_size"], [37, 3, 1, "", "validator_epoch_length"], [37, 3, 1, "", "validator_epochs_per_reset"], [37, 3, 1, "", "validator_exclude_quantile"], [37, 3, 1, "", "validator_logits_divergence"], [37, 3, 1, "", "validator_prune_len"], [37, 3, 1, "", "validator_sequence_length"], [37, 3, 1, "", "vote_senate"], [37, 3, 1, "", "weights"]], "bittensor.subtensor.ParamWithTypes": [[41, 4, 1, "", "name"], [41, 4, 1, "", "type"]], "bittensor.subtensor.subtensor": [[41, 3, 1, "", "__repr__"], [41, 3, 1, "", "__str__"], [41, 3, 1, "", "_do_associate_ips"], [41, 3, 1, "", "_do_burned_register"], [41, 3, 1, "", "_do_delegation"], [41, 3, 1, "", "_do_nominate"], [41, 3, 1, "", "_do_pow_register"], [41, 3, 1, "", "_do_root_register"], [41, 3, 1, "", "_do_serve_axon"], [41, 3, 1, "", "_do_serve_prometheus"], [41, 3, 1, "", "_do_set_delegate_take"], [41, 3, 1, "", "_do_set_weights"], [41, 3, 1, "", "_do_stake"], [41, 3, 1, "", "_do_transfer"], [41, 3, 1, "", "_do_undelegation"], [41, 3, 1, "", "_do_unstake"], [41, 3, 1, "", "_encode_params"], [41, 3, 1, "", "_null_neuron"], [41, 3, 1, "", "add_args"], [41, 3, 1, "", "add_stake"], [41, 3, 1, "", "add_stake_multiple"], [41, 3, 1, "", "associated_validator_ip_info"], [41, 5, 1, "", "block"], [41, 3, 1, "", "blocks_since_epoch"], [41, 3, 1, "", "bonds"], [41, 3, 1, "", "burn"], [41, 3, 1, "", "burned_register"], [41, 4, 1, "", "chain_endpoint"], [41, 3, 1, "", "config"], [41, 3, 1, "", "delegate"], [41, 3, 1, "", "determine_chain_endpoint_and_network"], [41, 3, 1, "", "difficulty"], [41, 3, 1, "", "does_hotkey_exist"], [41, 3, 1, "", "get_all_neurons_for_pubkey"], [41, 3, 1, "", "get_all_subnet_netuids"], [41, 3, 1, "", "get_all_subnets_info"], [41, 3, 1, "", "get_all_uids_for_hotkey"], [41, 3, 1, "", "get_axon_info"], [41, 3, 1, "", "get_balance"], [41, 3, 1, "", "get_balances"], [41, 3, 1, "", "get_block_hash"], [41, 3, 1, "", "get_current_block"], [41, 3, 1, "", "get_delegate_by_hotkey"], [41, 3, 1, "", "get_delegate_take"], [41, 3, 1, "", "get_delegated"], [41, 3, 1, "", "get_delegates"], [41, 3, 1, "", "get_emission_value_by_subnet"], [41, 3, 1, "", "get_existential_deposit"], [41, 3, 1, "", "get_hotkey_owner"], [41, 3, 1, "", "get_netuids_for_hotkey"], [41, 3, 1, "", "get_neuron_for_pubkey_and_subnet"], [41, 3, 1, "", "get_nominators_for_hotkey"], [41, 3, 1, "", "get_prometheus_info"], [41, 3, 1, "", "get_proposal_call_data"], [41, 3, 1, "", "get_proposal_hashes"], [41, 4, 1, "", "get_proposal_vote_data"], [41, 3, 1, "", "get_proposals"], [41, 3, 1, "", "get_senate_members"], [41, 3, 1, "", "get_stake"], [41, 3, 1, "", "get_stake_for_coldkey_and_hotkey"], [41, 3, 1, "", "get_stake_info_for_coldkey"], [41, 3, 1, "", "get_stake_info_for_coldkeys"], [41, 3, 1, "", "get_subnet_burn_cost"], [41, 3, 1, "", "get_subnet_connection_requirement"], [41, 3, 1, "", "get_subnet_connection_requirements"], [41, 3, 1, "", "get_subnet_hyperparameters"], [41, 3, 1, "", "get_subnet_info"], [41, 3, 1, "", "get_subnet_modality"], [41, 3, 1, "", "get_subnet_owner"], [41, 3, 1, "", "get_subnets"], [41, 3, 1, "", "get_total_stake_for_coldkey"], [41, 3, 1, "", "get_total_stake_for_hotkey"], [41, 3, 1, "", "get_total_subnets"], [41, 3, 1, "", "get_transfer_fee"], [41, 3, 1, "", "get_uid_for_hotkey_on_subnet"], [41, 3, 1, "", "get_vote_data"], [41, 3, 1, "", "help"], [41, 3, 1, "", "immunity_period"], [41, 3, 1, "", "incentive"], [41, 3, 1, "", "is_hotkey_delegate"], [41, 3, 1, "", "is_hotkey_registered"], [41, 3, 1, "", "is_hotkey_registered_any"], [41, 3, 1, "", "is_hotkey_registered_on_subnet"], [41, 3, 1, "", "is_senate_member"], [41, 3, 1, "", "kappa"], [41, 3, 1, "", "leave_senate"], [41, 3, 1, "", "max_allowed_validators"], [41, 3, 1, "", "max_n"], [41, 3, 1, "", "max_weight_limit"], [41, 3, 1, "", "metagraph"], [41, 3, 1, "", "min_allowed_weights"], [41, 4, 1, "", "network"], [41, 3, 1, "", "neuron_for_uid"], [41, 3, 1, "", "neuron_for_uid_lite"], [41, 3, 1, "", "neuron_for_wallet"], [41, 3, 1, "", "neuron_has_validator_permit"], [41, 3, 1, "", "neurons"], [41, 3, 1, "", "neurons_lite"], [41, 3, 1, "", "nominate"], [41, 3, 1, "", "query_constant"], [41, 3, 1, "", "query_identity"], [41, 3, 1, "", "query_map"], [41, 3, 1, "", "query_map_subtensor"], [41, 3, 1, "", "query_module"], [41, 3, 1, "", "query_runtime_api"], [41, 3, 1, "", "query_subtensor"], [41, 3, 1, "", "register"], [41, 3, 1, "", "register_senate"], [41, 3, 1, "", "register_subnetwork"], [41, 3, 1, "", "rho"], [41, 3, 1, "", "root_register"], [41, 3, 1, "", "root_set_weights"], [41, 3, 1, "", "run_faucet"], [41, 3, 1, "", "scaling_law_power"], [41, 3, 1, "", "serve"], [41, 3, 1, "", "serve_axon"], [41, 3, 1, "", "serve_prometheus"], [41, 3, 1, "", "serving_rate_limit"], [41, 3, 1, "", "set_delegate_take"], [41, 3, 1, "", "set_hyperparameter"], [41, 3, 1, "", "set_weights"], [41, 3, 1, "", "setup_config"], [41, 3, 1, "", "state_call"], [41, 3, 1, "", "subnet_exists"], [41, 3, 1, "", "subnetwork_n"], [41, 3, 1, "", "synergy_scaling_law_power"], [41, 3, 1, "", "tempo"], [41, 3, 1, "", "total_issuance"], [41, 3, 1, "", "total_stake"], [41, 3, 1, "", "transfer"], [41, 3, 1, "", "tx_rate_limit"], [41, 3, 1, "", "undelegate"], [41, 3, 1, "", "unstake"], [41, 3, 1, "", "unstake_multiple"], [41, 3, 1, "", "update_identity"], [41, 3, 1, "", "validator_batch_size"], [41, 3, 1, "", "validator_epoch_length"], [41, 3, 1, "", "validator_epochs_per_reset"], [41, 3, 1, "", "validator_exclude_quantile"], [41, 3, 1, "", "validator_logits_divergence"], [41, 3, 1, "", "validator_prune_len"], [41, 3, 1, "", "validator_sequence_length"], [41, 3, 1, "", "vote_senate"], [41, 3, 1, "", "weights"]], "bittensor.synapse": [[42, 2, 1, "", "Synapse"], [42, 2, 1, "", "TerminalInfo"], [42, 7, 1, "", "cast_float"], [42, 7, 1, "", "cast_int"], [42, 7, 1, "", "get_size"]], "bittensor.synapse.Synapse": [[42, 2, 1, "", "Config"], [42, 3, 1, "", "__setattr__"], [42, 4, 1, "", "_extract_header_size"], [42, 4, 1, "", "_extract_timeout"], [42, 4, 1, "", "_extract_total_size"], [42, 4, 1, "", "axon"], [42, 5, 1, "", "body_hash"], [42, 4, 1, "", "computed_body_hash"], [42, 4, 1, "", "dendrite"], [42, 3, 1, "", "deserialize"], [42, 5, 1, "", "failed_verification"], [42, 3, 1, "", "from_headers"], [42, 3, 1, "", "get_total_size"], [42, 4, 1, "", "header_size"], [42, 5, 1, "", "is_blacklist"], [42, 5, 1, "", "is_failure"], [42, 5, 1, "", "is_success"], [42, 5, 1, "", "is_timeout"], [42, 4, 1, "", "name"], [42, 3, 1, "", "parse_headers_to_inputs"], [42, 4, 1, "", "required_hash_fields"], [42, 3, 1, "", "set_name_type"], [42, 4, 1, "", "timeout"], [42, 3, 1, "", "to_headers"], [42, 4, 1, "", "total_size"]], "bittensor.synapse.Synapse.Config": [[42, 4, 1, "", "validate_assignment"]], "bittensor.synapse.TerminalInfo": [[42, 2, 1, "", "Config"], [42, 4, 1, "", "_extract_nonce"], [42, 4, 1, "", "_extract_port"], [42, 4, 1, "", "_extract_process_time"], [42, 4, 1, "", "_extract_status_code"], [42, 4, 1, "", "_extract_version"], [42, 4, 1, "", "hotkey"], [42, 4, 1, "", "ip"], [42, 4, 1, "", "nonce"], [42, 4, 1, "", "port"], [42, 4, 1, "", "process_time"], [42, 4, 1, "", "signature"], [42, 4, 1, "", "status_code"], [42, 4, 1, "", "status_message"], [42, 4, 1, "", "uuid"], [42, 4, 1, "", "version"]], "bittensor.synapse.TerminalInfo.Config": [[42, 4, 1, "", "validate_assignment"]], "bittensor.tensor": [[43, 1, 1, "", "TORCH_DTYPES"], [43, 2, 1, "", "Tensor"], [43, 7, 1, "", "cast_dtype"], [43, 7, 1, "", "cast_shape"], [43, 2, 1, "", "tensor"]], "bittensor.tensor.Tensor": [[43, 2, 1, "", "Config"], [43, 4, 1, "", "_extract_dtype"], [43, 4, 1, "", "_extract_shape"], [43, 4, 1, "id0", "buffer"], [43, 3, 1, "", "deserialize"], [43, 4, 1, "id1", "dtype"], [43, 3, 1, "", "numpy"], [43, 3, 1, "", "serialize"], [43, 4, 1, "id2", "shape"], [43, 3, 1, "", "tensor"], [43, 3, 1, "", "tolist"]], "bittensor.tensor.Tensor.Config": [[43, 4, 1, "", "validate_assignment"]], "bittensor.threadpool": [[44, 6, 1, "", "BrokenThreadPool"], [44, 1, 1, "", "NULL_ENTRY"], [44, 2, 1, "", "PriorityThreadPoolExecutor"], [44, 2, 1, "", "_WorkItem"], [44, 1, 1, "", "__author__"], [44, 1, 1, "", "_shutdown"], [44, 1, 1, "", "_threads_queues"], [44, 7, 1, "", "_worker"]], "bittensor.threadpool.PriorityThreadPoolExecutor": [[44, 3, 1, "", "_adjust_thread_count"], [44, 4, 1, "", "_counter"], [44, 3, 1, "", "_initializer_failed"], [44, 3, 1, "", "add_args"], [44, 3, 1, "", "config"], [44, 5, 1, "", "is_empty"], [44, 3, 1, "", "shutdown"], [44, 3, 1, "", "submit"]], "bittensor.threadpool._WorkItem": [[44, 3, 1, "", "run"]], "bittensor.types": [[45, 2, 1, "", "AxonServeCallParams"], [45, 2, 1, "", "PrometheusServeCallParams"]], "bittensor.types.AxonServeCallParams": [[45, 4, 1, "", "ip"], [45, 4, 1, "", "ip_type"], [45, 4, 1, "", "netuid"], [45, 4, 1, "", "port"], [45, 4, 1, "", "version"]], "bittensor.types.PrometheusServeCallParams": [[45, 4, 1, "", "ip"], [45, 4, 1, "", "ip_type"], [45, 4, 1, "", "netuid"], [45, 4, 1, "", "port"], [45, 4, 1, "", "version"]], "bittensor.utils": [[49, 1, 1, "", "RAOPERTAO"], [49, 1, 1, "", "U16_MAX"], [49, 7, 1, "", "U16_NORMALIZED_FLOAT"], [49, 1, 1, "", "U64_MAX"], [49, 7, 1, "", "U64_NORMALIZED_FLOAT"], [46, 0, 0, "-", "_register_cuda"], [47, 0, 0, "-", "balance"], [49, 7, 1, "", "create_identity_dict"], [49, 7, 1, "", "create_pow"], [49, 7, 1, "", "decode_hex_identity_dict"], [48, 0, 0, "-", "formatting"], [49, 7, 1, "", "get_explorer_root_url_by_network_from_map"], [49, 7, 1, "", "get_explorer_url_for_network"], [49, 7, 1, "", "get_ss58_format"], [49, 7, 1, "", "hash"], [49, 7, 1, "", "is_valid_bittensor_address_or_public_key"], [49, 7, 1, "", "is_valid_ed25519_pubkey"], [49, 7, 1, "", "is_valid_ss58_address"], [50, 0, 0, "-", "networking"], [51, 0, 0, "-", "registration"], [49, 7, 1, "", "ss58_address_to_bytes"], [49, 7, 1, "", "ss58_to_vec_u8"], [52, 0, 0, "-", "stats"], [49, 7, 1, "", "strtobool"], [49, 7, 1, "", "strtobool_with_default"], [53, 0, 0, "-", "test_utils"], [49, 7, 1, "", "u8_key_to_ss58"], [49, 7, 1, "", "unbiased_topk"], [49, 7, 1, "", "version_checking"], [54, 0, 0, "-", "wallet_utils"], [55, 0, 0, "-", "weight_utils"]], "bittensor.utils._register_cuda": [[46, 7, 1, "", "log_cuda_errors"], [46, 7, 1, "", "reset_cuda"], [46, 7, 1, "", "solve_cuda"]], "bittensor.utils.balance": [[47, 2, 1, "", "Balance"]], "bittensor.utils.balance.Balance": [[47, 3, 1, "", "__abs__"], [47, 3, 1, "", "__add__"], [47, 3, 1, "", "__eq__"], [47, 3, 1, "id6", "__float__"], [47, 3, 1, "", "__floordiv__"], [47, 3, 1, "", "__ge__"], [47, 3, 1, "", "__gt__"], [47, 3, 1, "id5", "__int__"], [47, 3, 1, "", "__le__"], [47, 3, 1, "", "__lt__"], [47, 3, 1, "", "__mul__"], [47, 3, 1, "", "__ne__"], [47, 3, 1, "", "__neg__"], [47, 3, 1, "", "__nonzero__"], [47, 3, 1, "", "__pos__"], [47, 3, 1, "", "__radd__"], [47, 3, 1, "", "__repr__"], [47, 3, 1, "", "__rfloordiv__"], [47, 3, 1, "", "__rich__"], [47, 3, 1, "", "__rich_rao__"], [47, 3, 1, "", "__rmul__"], [47, 3, 1, "", "__rsub__"], [47, 3, 1, "", "__rtruediv__"], [47, 3, 1, "", "__str__"], [47, 3, 1, "", "__str_rao__"], [47, 3, 1, "", "__sub__"], [47, 3, 1, "", "__truediv__"], [47, 3, 1, "", "from_float"], [47, 3, 1, "", "from_rao"], [47, 3, 1, "", "from_tao"], [47, 4, 1, "id3", "rao"], [47, 4, 1, "id2", "rao_unit"], [47, 4, 1, "id4", "tao"], [47, 4, 1, "id1", "unit"]], "bittensor.utils.formatting": [[48, 7, 1, "", "get_human_readable"], [48, 7, 1, "", "millify"]], "bittensor.utils.networking": [[50, 6, 1, "", "ExternalIPNotFound"], [50, 7, 1, "", "get_external_ip"], [50, 7, 1, "", "get_formatted_ws_endpoint_url"], [50, 7, 1, "", "int_to_ip"], [50, 7, 1, "", "ip__str__"], [50, 7, 1, "", "ip_to_int"], [50, 7, 1, "", "ip_version"]], "bittensor.utils.registration": [[51, 6, 1, "", "CUDAException"], [51, 2, 1, "", "POWSolution"], [51, 2, 1, "", "RegistrationStatistics"], [51, 2, 1, "", "RegistrationStatisticsLogger"], [51, 2, 1, "", "_CUDASolver"], [51, 2, 1, "", "_Solver"], [51, 2, 1, "", "_SolverBase"], [51, 2, 1, "", "_UsingSpawnStartMethod"], [51, 7, 1, "", "_check_for_newest_block_and_update"], [51, 7, 1, "", "_create_seal_hash"], [51, 7, 1, "", "_get_block_with_retry"], [51, 7, 1, "", "_hash_block_with_hotkey"], [51, 7, 1, "", "_hex_bytes_to_u8_list"], [51, 7, 1, "", "_registration_diff_pack"], [51, 7, 1, "", "_registration_diff_unpack"], [51, 7, 1, "", "_seal_meets_difficulty"], [51, 7, 1, "", "_solve_for_difficulty_fast"], [51, 7, 1, "", "_solve_for_difficulty_fast_cuda"], [51, 7, 1, "", "_solve_for_nonce_block"], [51, 7, 1, "", "_solve_for_nonce_block_cuda"], [51, 7, 1, "", "_terminate_workers_and_wait_for_exit"], [51, 7, 1, "", "_update_curr_block"], [51, 7, 1, "", "create_pow"], [51, 7, 1, "", "get_cpu_count"]], "bittensor.utils.registration.POWSolution": [[51, 4, 1, "", "block_number"], [51, 4, 1, "", "difficulty"], [51, 3, 1, "", "is_stale"], [51, 4, 1, "", "nonce"], [51, 4, 1, "", "seal"]], "bittensor.utils.registration.RegistrationStatistics": [[51, 4, 1, "", "block_hash"], [51, 4, 1, "", "block_number"], [51, 4, 1, "", "difficulty"], [51, 4, 1, "", "hash_rate"], [51, 4, 1, "", "hash_rate_perpetual"], [51, 4, 1, "", "rounds_total"], [51, 4, 1, "", "time_average"], [51, 4, 1, "", "time_spent"], [51, 4, 1, "", "time_spent_total"]], "bittensor.utils.registration.RegistrationStatisticsLogger": [[51, 4, 1, "", "console"], [51, 3, 1, "", "get_status_message"], [51, 3, 1, "", "start"], [51, 4, 1, "", "status"], [51, 3, 1, "", "stop"], [51, 3, 1, "", "update"]], "bittensor.utils.registration._CUDASolver": [[51, 4, 1, "", "TPB"], [51, 4, 1, "", "dev_id"], [51, 3, 1, "", "run"]], "bittensor.utils.registration._Solver": [[51, 3, 1, "", "run"]], "bittensor.utils.registration._SolverBase": [[51, 4, 1, "", "check_block"], [51, 3, 1, "", "create_shared_memory"], [51, 4, 1, "", "curr_block"], [51, 4, 1, "", "curr_block_num"], [51, 4, 1, "", "curr_diff"], [51, 4, 1, "", "finished_queue"], [51, 4, 1, "", "hotkey_bytes"], [51, 4, 1, "", "limit"], [51, 4, 1, "", "newBlockEvent"], [51, 4, 1, "", "num_proc"], [51, 4, 1, "", "proc_num"], [51, 3, 1, "", "run"], [51, 4, 1, "", "solution_queue"], [51, 4, 1, "", "stopEvent"], [51, 4, 1, "", "update_interval"]], "bittensor.utils.registration._UsingSpawnStartMethod": [[51, 3, 1, "", "__enter__"], [51, 3, 1, "", "__exit__"]], "bittensor.utils.stats": [[52, 2, 1, "", "AmountPerSecondRollingAverage"], [52, 2, 1, "", "EventsPerSecondRollingAverage"], [52, 2, 1, "", "timed_rolling_avg"]], "bittensor.utils.stats.AmountPerSecondRollingAverage": [[52, 3, 1, "", "event"], [52, 3, 1, "", "get"]], "bittensor.utils.stats.EventsPerSecondRollingAverage": [[52, 3, 1, "", "event"], [52, 3, 1, "", "get"]], "bittensor.utils.stats.timed_rolling_avg": [[52, 3, 1, "", "update"]], "bittensor.utils.test_utils": [[53, 7, 1, "", "get_random_unused_port"], [53, 1, 1, "", "max_tries"]], "bittensor.utils.wallet_utils": [[54, 7, 1, "", "create_identity_dict"], [54, 7, 1, "", "decode_hex_identity_dict"], [54, 7, 1, "", "get_ss58_format"], [54, 7, 1, "", "is_valid_bittensor_address_or_public_key"], [54, 7, 1, "", "is_valid_ed25519_pubkey"], [54, 7, 1, "", "is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[55, 1, 1, "", "U16_MAX"], [55, 1, 1, "", "U32_MAX"], [55, 7, 1, "", "convert_bond_uids_and_vals_to_tensor"], [55, 7, 1, "", "convert_root_weight_uids_and_vals_to_tensor"], [55, 7, 1, "", "convert_weight_uids_and_vals_to_tensor"], [55, 7, 1, "", "convert_weights_and_uids_for_emit"], [55, 7, 1, "", "normalize_max_weight"], [55, 7, 1, "", "process_weights_for_netuid"]], "bittensor.wallet": [[37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "add_args"], [37, 5, 1, "", "coldkey"], [37, 5, 1, "", "coldkey_file"], [37, 5, 1, "", "coldkeypub"], [37, 5, 1, "", "coldkeypub_file"], [37, 3, 1, "", "config"], [37, 3, 1, "", "create"], [37, 3, 1, "", "create_coldkey_from_uri"], [37, 3, 1, "", "create_hotkey_from_uri"], [37, 3, 1, "", "create_if_non_existent"], [37, 3, 1, "", "create_new_coldkey"], [37, 3, 1, "", "create_new_hotkey"], [56, 7, 1, "", "display_mnemonic_msg"], [37, 3, 1, "", "get_coldkey"], [37, 3, 1, "", "get_coldkeypub"], [37, 3, 1, "", "get_hotkey"], [37, 3, 1, "", "help"], [37, 5, 1, "", "hotkey"], [37, 5, 1, "", "hotkey_file"], [37, 3, 1, "", "new_coldkey"], [37, 3, 1, "", "new_hotkey"], [37, 3, 1, "", "recreate"], [37, 4, 1, "", "regen_coldkey"], [37, 4, 1, "", "regen_coldkeypub"], [37, 4, 1, "", "regen_hotkey"], [37, 3, 1, "", "regenerate_coldkey"], [37, 3, 1, "", "regenerate_coldkeypub"], [37, 3, 1, "", "regenerate_hotkey"], [37, 3, 1, "", "set_coldkey"], [37, 3, 1, "", "set_coldkeypub"], [37, 3, 1, "", "set_hotkey"], [56, 2, 1, "", "wallet"]], "bittensor.wallet.wallet": [[56, 3, 1, "", "__repr__"], [56, 3, 1, "", "__str__"], [56, 3, 1, "", "add_args"], [56, 5, 1, "", "coldkey"], [56, 5, 1, "", "coldkey_file"], [56, 5, 1, "", "coldkeypub"], [56, 5, 1, "", "coldkeypub_file"], [56, 3, 1, "", "config"], [56, 3, 1, "", "create"], [56, 3, 1, "", "create_coldkey_from_uri"], [56, 3, 1, "", "create_hotkey_from_uri"], [56, 3, 1, "", "create_if_non_existent"], [56, 3, 1, "", "create_new_coldkey"], [56, 3, 1, "", "create_new_hotkey"], [56, 3, 1, "", "get_coldkey"], [56, 3, 1, "", "get_coldkeypub"], [56, 3, 1, "", "get_hotkey"], [56, 3, 1, "", "help"], [56, 5, 1, "", "hotkey"], [56, 5, 1, "", "hotkey_file"], [56, 3, 1, "", "new_coldkey"], [56, 3, 1, "", "new_hotkey"], [56, 3, 1, "", "recreate"], [56, 4, 1, "", "regen_coldkey"], [56, 4, 1, "", "regen_coldkeypub"], [56, 4, 1, "", "regen_hotkey"], [56, 3, 1, "", "regenerate_coldkey"], [56, 3, 1, "", "regenerate_coldkeypub"], [56, 3, 1, "", "regenerate_hotkey"], [56, 3, 1, "", "set_coldkey"], [56, 3, 1, "", "set_coldkeypub"], [56, 3, 1, "", "set_hotkey"]], "miner": [[58, 2, 1, "", "OpenAIMiner"], [58, 1, 1, "", "openai_api_key"]], "miner.OpenAIMiner": [[58, 3, 1, "", "add_args"], [58, 3, 1, "", "config"], [58, 3, 1, "", "prompt"]], "neurons": [[60, 0, 0, "-", "validators"]], "neurons.validators": [[61, 0, 0, "-", "validator"]], "neurons.validators.validator": [[61, 7, 1, "", "main"], [61, 2, 1, "", "neuron"]], "neurons.validators.validator.neuron": [[61, 3, 1, "", "add_args"], [61, 3, 1, "", "check_config"], [61, 3, 1, "", "config"], [61, 4, 1, "", "metagraph"], [61, 3, 1, "", "run"], [61, 4, 1, "", "subtensor"], [61, 4, 1, "", "wallet"]], "prompting": [[69, 1, 1, "", "__spec_version__"], [69, 1, 1, "", "__version__"], [64, 0, 0, "-", "baseminer"], [70, 0, 0, "-", "protocol"], [77, 0, 0, "-", "validators"], [69, 1, 1, "", "version_split"]], "prompting.baseminer": [[62, 0, 0, "-", "blacklist"], [63, 0, 0, "-", "config"], [65, 0, 0, "-", "miner"], [66, 0, 0, "-", "priority"], [67, 0, 0, "-", "run"], [68, 0, 0, "-", "set_weights"]], "prompting.baseminer.blacklist": [[62, 7, 1, "", "blacklist"], [62, 7, 1, "", "default_blacklist"], [62, 7, 1, "", "is_prompt_in_cache"]], "prompting.baseminer.config": [[63, 7, 1, "", "check_config"], [63, 7, 1, "", "get_config"]], "prompting.baseminer.miner": [[65, 2, 1, "", "Miner"]], "prompting.baseminer.miner.Miner": [[65, 3, 1, "", "__enter__"], [65, 3, 1, "", "__exit__"], [65, 3, 1, "", "_prompt"], [65, 3, 1, "", "add_args"], [65, 3, 1, "", "blacklist"], [65, 3, 1, "", "config"], [65, 3, 1, "", "priority"], [65, 3, 1, "", "prompt"], [65, 3, 1, "", "run"], [65, 3, 1, "", "run_in_background_thread"], [65, 3, 1, "", "stop_run_thread"]], "prompting.baseminer.priority": [[66, 7, 1, "", "default_priority"], [66, 7, 1, "", "priority"], [66, 7, 1, "", "record_request_timestamps"]], "prompting.baseminer.run": [[67, 7, 1, "", "run"]], "prompting.baseminer.set_weights": [[68, 7, 1, "", "set_weights"]], "prompting.protocol": [[70, 2, 1, "", "Prompting"], [70, 2, 1, "", "StreamPrompting"]], "prompting.protocol.Prompting": [[70, 2, 1, "", "Config"], [70, 4, 1, "id10", "completion"], [70, 3, 1, "id11", "deserialize"], [70, 4, 1, "id9", "messages"], [70, 4, 1, "", "required_hash_fields"], [70, 4, 1, "id0", "roles"]], "prompting.protocol.Prompting.Config": [[70, 4, 1, "", "validate_assignment"]], "prompting.protocol.StreamPrompting": [[70, 4, 1, "", "completion"], [70, 3, 1, "", "deserialize"], [70, 3, 1, "", "extract_response_json"], [70, 4, 1, "", "messages"], [70, 3, 1, "", "process_streaming_response"], [70, 4, 1, "", "required_hash_fields"], [70, 4, 1, "", "roles"]], "prompting.validators": [[77, 1, 1, "", "__spec_version__"], [77, 1, 1, "", "__version__"], [71, 0, 0, "-", "config"], [72, 0, 0, "-", "criteria"], [73, 0, 0, "-", "dataset"], [74, 0, 0, "-", "event"], [75, 0, 0, "-", "forward"], [76, 0, 0, "-", "gating"], [78, 0, 0, "-", "misc"], [80, 0, 0, "-", "penalty"], [84, 0, 0, "-", "prompts"], [90, 0, 0, "-", "reward"], [97, 0, 0, "-", "tasks"], [98, 0, 0, "-", "utils"], [77, 1, 1, "", "version_split"], [99, 0, 0, "-", "weights"]], "prompting.validators.config": [[71, 7, 1, "", "add_args"], [71, 7, 1, "", "check_config"], [71, 7, 1, "", "config"]], "prompting.validators.criteria": [[72, 2, 1, "", "ContentMatchTypeEnum"], [72, 2, 1, "", "LayoutMatchTypeEnum"], [72, 2, 1, "", "MatchContentCriteria"], [72, 2, 1, "", "MatchLayoutCriteria"], [72, 2, 1, "", "MatchLengthCriteria"], [72, 2, 1, "", "SimpleResponseLayoutCriteria"], [72, 2, 1, "", "TaskCriterion"], [72, 2, 1, "", "TextLengthUnitEnum"]], "prompting.validators.criteria.ContentMatchTypeEnum": [[72, 4, 1, "", "ENDS_WITH"], [72, 4, 1, "", "INCLUDES"], [72, 4, 1, "", "STARTS_WITH"]], "prompting.validators.criteria.LayoutMatchTypeEnum": [[72, 4, 1, "", "NUMBERED_LIST"], [72, 4, 1, "", "UNORDERED_LIST"]], "prompting.validators.criteria.MatchContentCriteria": [[72, 3, 1, "", "__post_init__"], [72, 3, 1, "", "_get_regex_pattern"], [72, 3, 1, "", "compose_text"], [72, 4, 1, "", "contentMatchType"], [72, 4, 1, "", "default_text"], [72, 3, 1, "", "evaluate"], [72, 4, 1, "", "n_words"], [72, 4, 1, "", "negate_match"], [72, 4, 1, "id5", "penalty"], [72, 4, 1, "", "sampled_words"], [72, 4, 1, "id4", "text"], [72, 4, 1, "", "words_array"]], "prompting.validators.criteria.MatchLayoutCriteria": [[72, 3, 1, "", "compose_text"], [72, 3, 1, "", "evaluate"], [72, 4, 1, "", "layout_type"], [72, 4, 1, "id8", "penalty"], [72, 4, 1, "id9", "text"]], "prompting.validators.criteria.MatchLengthCriteria": [[72, 3, 1, "", "_count_sentences"], [72, 3, 1, "", "_get_completion_length"], [72, 3, 1, "", "compose_text"], [72, 3, 1, "", "evaluate"], [72, 4, 1, "id3", "penalty"], [72, 4, 1, "", "target_length"], [72, 4, 1, "id2", "text"], [72, 4, 1, "", "unit"]], "prompting.validators.criteria.SimpleResponseLayoutCriteria": [[72, 3, 1, "", "compose_text"], [72, 3, 1, "", "evaluate"], [72, 4, 1, "id6", "penalty"], [72, 4, 1, "id7", "text"]], "prompting.validators.criteria.TaskCriterion": [[72, 3, 1, "", "compose_text"], [72, 3, 1, "", "evaluate"], [72, 4, 1, "id1", "penalty"], [72, 4, 1, "id0", "text"]], "prompting.validators.criteria.TextLengthUnitEnum": [[72, 4, 1, "", "CHARACTERS"], [72, 4, 1, "", "PARAGRAPHS"], [72, 4, 1, "", "SENTENCES"], [72, 4, 1, "", "WORDS"]], "prompting.validators.dataset": [[73, 2, 1, "", "Dataset"], [73, 2, 1, "", "MockDataset"]], "prompting.validators.dataset.Dataset": [[73, 3, 1, "", "__next__"]], "prompting.validators.dataset.MockDataset": [[73, 3, 1, "", "__next__"]], "prompting.validators.event": [[74, 2, 1, "", "EventSchema"]], "prompting.validators.event.EventSchema": [[74, 4, 1, "", "best"], [74, 4, 1, "", "blacklist_filter"], [74, 4, 1, "", "blacklist_filter_matched_ngram"], [74, 4, 1, "", "blacklist_filter_significance_score"], [74, 4, 1, "", "block"], [74, 4, 1, "", "completion_status_codes"], [74, 4, 1, "", "completion_status_messages"], [74, 4, 1, "", "completion_times"], [74, 4, 1, "", "completions"], [74, 4, 1, "", "dahoas_reward_model"], [74, 4, 1, "", "dahoas_reward_model_normalized"], [74, 4, 1, "", "diversity_reward_model"], [74, 4, 1, "", "diversity_reward_model_batch"], [74, 4, 1, "", "diversity_reward_model_historic"], [74, 4, 1, "", "diversity_reward_model_normalized"], [74, 4, 1, "", "dpo_reward_model"], [74, 4, 1, "", "dpo_reward_model_normalized"], [74, 3, 1, "", "from_dict"], [74, 4, 1, "", "gating_loss"], [74, 4, 1, "", "keyword_match_penalty_adjusted"], [74, 4, 1, "", "keyword_match_penalty_applied"], [74, 4, 1, "", "keyword_match_penalty_raw"], [74, 4, 1, "", "name"], [74, 4, 1, "", "nsfw_filter"], [74, 4, 1, "", "nsfw_filter_normalized"], [74, 4, 1, "", "nsfw_filter_score"], [74, 4, 1, "", "prompt"], [74, 4, 1, "", "prompt_reward_model"], [74, 4, 1, "", "prompt_reward_model_normalized"], [74, 4, 1, "", "reciprocate_reward_model"], [74, 4, 1, "", "reciprocate_reward_model_normalized"], [74, 4, 1, "", "relevance_filter"], [74, 4, 1, "", "relevance_filter_bert_score"], [74, 4, 1, "", "relevance_filter_mpnet_score"], [74, 4, 1, "", "relevance_filter_normalized"], [74, 4, 1, "", "rewards"], [74, 4, 1, "", "rlhf_reward_model"], [74, 4, 1, "", "rlhf_reward_model_normalized"], [74, 4, 1, "", "sentence_match_penalty_adjusted"], [74, 4, 1, "", "sentence_match_penalty_applied"], [74, 4, 1, "", "sentence_match_penalty_raw"], [74, 4, 1, "", "set_weights"], [74, 4, 1, "", "step_length"], [74, 4, 1, "", "task_type"], [74, 4, 1, "", "task_validation_penalty_adjusted"], [74, 4, 1, "", "task_validation_penalty_applied"], [74, 4, 1, "", "task_validation_penalty_raw"], [74, 4, 1, "", "uids"]], "prompting.validators.forward": [[75, 7, 1, "", "forward"], [75, 7, 1, "", "get_random_uids"], [75, 7, 1, "", "run_step"]], "prompting.validators.gating": [[76, 2, 1, "", "BaseGatingModel"], [76, 2, 1, "", "GatingModel"], [76, 2, 1, "", "SentenceEmbedGatingModel"]], "prompting.validators.gating.BaseGatingModel": [[76, 3, 1, "", "add_args"], [76, 3, 1, "", "backward"], [76, 3, 1, "", "check_config"], [76, 3, 1, "", "config"], [76, 3, 1, "", "forward"], [76, 3, 1, "", "resync"]], "prompting.validators.gating.GatingModel": [[76, 3, 1, "", "backward"], [76, 3, 1, "", "forward"], [76, 3, 1, "", "resync"]], "prompting.validators.gating.SentenceEmbedGatingModel": [[76, 3, 1, "", "backward"], [76, 3, 1, "", "forward"], [76, 3, 1, "", "mean_pooling"], [76, 3, 1, "", "resync"]], "prompting.validators.misc": [[78, 7, 1, "", "_ttl_hash_gen"], [78, 7, 1, "", "ttl_cache"], [78, 7, 1, "", "ttl_get_block"]], "prompting.validators.penalty": [[80, 2, 1, "", "BasePenaltyModel"], [80, 2, 1, "", "ContentMatchPenaltyModel"], [80, 2, 1, "", "KeywordMatchPenaltyModel"], [80, 2, 1, "", "PenaltyModelType"], [80, 2, 1, "", "TaskValidationPenaltyModel"], [79, 0, 0, "-", "content_match"], [81, 0, 0, "-", "keyword_match"], [82, 0, 0, "-", "penalty"], [83, 0, 0, "-", "task_validation"]], "prompting.validators.penalty.BasePenaltyModel": [[80, 3, 1, "", "__repr__"], [80, 3, 1, "", "__str__"], [80, 3, 1, "", "apply_penalties"], [80, 3, 1, "", "calculate_penalties"], [80, 5, 1, "", "name"]], "prompting.validators.penalty.ContentMatchPenaltyModel": [[80, 3, 1, "", "calculate_penalties"], [80, 5, 1, "", "name"]], "prompting.validators.penalty.KeywordMatchPenaltyModel": [[80, 3, 1, "", "calculate_penalties"], [80, 3, 1, "", "check_exploits_keywords"], [80, 5, 1, "", "name"]], "prompting.validators.penalty.PenaltyModelType": [[80, 4, 1, "", "keyword_match_penalty"], [80, 4, 1, "", "sentence_match_penalty"], [80, 4, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.TaskValidationPenaltyModel": [[80, 3, 1, "", "calculate_penalties"], [80, 5, 1, "", "name"]], "prompting.validators.penalty.content_match": [[79, 2, 1, "", "ContentMatchPenaltyModel"]], "prompting.validators.penalty.content_match.ContentMatchPenaltyModel": [[79, 3, 1, "", "calculate_penalties"], [79, 5, 1, "", "name"]], "prompting.validators.penalty.keyword_match": [[81, 2, 1, "", "KeywordMatchPenaltyModel"]], "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel": [[81, 3, 1, "", "calculate_penalties"], [81, 3, 1, "", "check_exploits_keywords"], [81, 5, 1, "", "name"]], "prompting.validators.penalty.penalty": [[82, 2, 1, "", "BasePenaltyModel"], [82, 2, 1, "", "PenaltyModelType"]], "prompting.validators.penalty.penalty.BasePenaltyModel": [[82, 3, 1, "", "__repr__"], [82, 3, 1, "", "__str__"], [82, 3, 1, "", "apply_penalties"], [82, 3, 1, "", "calculate_penalties"], [82, 5, 1, "", "name"]], "prompting.validators.penalty.penalty.PenaltyModelType": [[82, 4, 1, "", "keyword_match_penalty"], [82, 4, 1, "", "sentence_match_penalty"], [82, 4, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.task_validation": [[83, 2, 1, "", "TaskValidationPenaltyModel"]], "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel": [[83, 3, 1, "", "calculate_penalties"], [83, 5, 1, "", "name"]], "prompting.validators.prompts": [[84, 2, 1, "", "AnswerPrompt"], [84, 2, 1, "", "AugmentPrompt"], [84, 2, 1, "", "BasePrompt"], [84, 2, 1, "", "FirewallPrompt"], [84, 2, 1, "", "FollowupPrompt"], [84, 2, 1, "", "ScoringPrompt"], [84, 7, 1, "", "answer_prompt"], [84, 1, 1, "", "answer_scoring_template"], [84, 7, 1, "", "augment_prompt"], [84, 1, 1, "", "augment_request_template"], [84, 1, 1, "", "augment_scoring_template"], [84, 7, 1, "", "find_unique_tags"], [84, 1, 1, "", "firewall_template"], [84, 7, 1, "", "followup_prompt"], [84, 1, 1, "", "followup_request_template"], [84, 1, 1, "", "followup_scoring_template"]], "prompting.validators.prompts.BasePrompt": [[84, 3, 1, "", "extract"], [84, 3, 1, "", "matches_template"], [84, 3, 1, "", "text"]], "prompting.validators.prompts.FirewallPrompt": [[84, 3, 1, "", "detected"], [84, 3, 1, "", "mock_response"]], "prompting.validators.prompts.ScoringPrompt": [[84, 3, 1, "", "extract_score"], [84, 3, 1, "", "mock_response"]], "prompting.validators.reward": [[90, 2, 1, "", "BaseRewardModel"], [90, 2, 1, "", "Blacklist"], [90, 2, 1, "", "DahoasRewardModel"], [90, 2, 1, "", "DefaultRewardFrameworkConfig"], [90, 2, 1, "", "DirectPreferenceRewardModel"], [90, 2, 1, "", "DiversityRewardModel"], [90, 2, 1, "", "NSFWRewardModel"], [90, 2, 1, "", "OpenAssistantRewardModel"], [90, 2, 1, "", "PromptRewardModel"], [90, 2, 1, "", "ReciprocateRewardModel"], [90, 2, 1, "", "RelevanceRewardModel"], [90, 2, 1, "", "RewardModelType"], [85, 0, 0, "-", "blacklist"], [86, 0, 0, "-", "config"], [87, 0, 0, "-", "dahoas"], [88, 0, 0, "-", "diversity"], [89, 0, 0, "-", "dpo"], [91, 0, 0, "-", "nsfw"], [92, 0, 0, "-", "open_assistant"], [93, 0, 0, "-", "prompt"], [94, 0, 0, "-", "reciprocate"], [95, 0, 0, "-", "relevance"], [96, 0, 0, "-", "reward"]], "prompting.validators.reward.BaseRewardModel": [[90, 3, 1, "", "__repr__"], [90, 3, 1, "", "__str__"], [90, 3, 1, "", "apply"], [90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 3, 1, "", "normalize_rewards"]], "prompting.validators.reward.Blacklist": [[90, 3, 1, "", "_add_ngrams"], [90, 3, 1, "", "add"], [90, 3, 1, "", "calculate_significance"], [90, 3, 1, "", "extract_ngrams"], [90, 3, 1, "", "get_rewards"], [90, 3, 1, "", "get_significance"], [90, 3, 1, "", "most_common"], [90, 3, 1, "", "most_significant"], [90, 5, 1, "", "name"], [90, 3, 1, "", "normalize_rewards"], [90, 3, 1, "", "prune"], [90, 3, 1, "", "reset"], [90, 3, 1, "", "reward"], [90, 3, 1, "", "set_counter_to_half"]], "prompting.validators.reward.DahoasRewardModel": [[90, 3, 1, "", "forward"], [90, 3, 1, "", "get_rewards"], [90, 3, 1, "", "load_weights"], [90, 4, 1, "", "model_name"], [90, 5, 1, "", "name"], [90, 3, 1, "", "reward"]], "prompting.validators.reward.DefaultRewardFrameworkConfig": [[90, 4, 1, "", "dahoas_model_weight"], [90, 4, 1, "", "dpo_model_weight"], [90, 4, 1, "", "prompt_model_weight"], [90, 4, 1, "", "reciprocate_model_weight"], [90, 4, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.DirectPreferenceRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 4, 1, "", "reward_model_name"], [90, 3, 1, "", "reward_single"]], "prompting.validators.reward.DiversityRewardModel": [[90, 4, 1, "", "diversity_model_path"], [90, 3, 1, "", "get_batch_rewards"], [90, 3, 1, "", "get_embeddings"], [90, 3, 1, "", "get_historic_rewards"], [90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 3, 1, "", "normalize_rewards"], [90, 3, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.NSFWRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 3, 1, "", "normalize_rewards"], [90, 4, 1, "", "nsfw_filter_model_path"], [90, 3, 1, "", "reward"]], "prompting.validators.reward.OpenAssistantRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 4, 1, "", "reward_model_name"], [90, 3, 1, "", "reward_single"]], "prompting.validators.reward.PromptRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 3, 1, "", "reward"], [90, 4, 1, "", "reward_model_name"]], "prompting.validators.reward.ReciprocateRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 4, 1, "", "revision"], [90, 3, 1, "", "reward"], [90, 4, 1, "", "reward_model_path"]], "prompting.validators.reward.RelevanceRewardModel": [[90, 3, 1, "", "get_rewards"], [90, 5, 1, "", "name"], [90, 3, 1, "", "normalize_rewards"], [90, 3, 1, "", "reward"]], "prompting.validators.reward.RewardModelType": [[90, 4, 1, "", "blacklist"], [90, 4, 1, "", "dahoas"], [90, 4, 1, "", "diversity"], [90, 4, 1, "", "dpo"], [90, 4, 1, "", "keyword_match"], [90, 4, 1, "", "nsfw"], [90, 4, 1, "", "prompt"], [90, 4, 1, "", "reciprocate"], [90, 4, 1, "", "relevance"], [90, 4, 1, "", "relevance_bert"], [90, 4, 1, "", "relevance_mpnet"], [90, 4, 1, "", "rlhf"], [90, 4, 1, "", "task_validator"]], "prompting.validators.reward.blacklist": [[85, 2, 1, "", "Blacklist"], [85, 2, 1, "", "BlacklistRewardEvent"]], "prompting.validators.reward.blacklist.Blacklist": [[85, 3, 1, "", "_add_ngrams"], [85, 3, 1, "", "add"], [85, 3, 1, "", "calculate_significance"], [85, 3, 1, "", "extract_ngrams"], [85, 3, 1, "", "get_rewards"], [85, 3, 1, "", "get_significance"], [85, 3, 1, "", "most_common"], [85, 3, 1, "", "most_significant"], [85, 5, 1, "", "name"], [85, 3, 1, "", "normalize_rewards"], [85, 3, 1, "", "prune"], [85, 3, 1, "", "reset"], [85, 3, 1, "", "reward"], [85, 3, 1, "", "set_counter_to_half"]], "prompting.validators.reward.blacklist.BlacklistRewardEvent": [[85, 4, 1, "", "matched_ngram"], [85, 4, 1, "", "significance_score"]], "prompting.validators.reward.config": [[86, 2, 1, "", "DefaultRewardFrameworkConfig"], [86, 2, 1, "", "RewardModelType"]], "prompting.validators.reward.config.DefaultRewardFrameworkConfig": [[86, 4, 1, "", "dahoas_model_weight"], [86, 4, 1, "", "dpo_model_weight"], [86, 4, 1, "", "prompt_model_weight"], [86, 4, 1, "", "reciprocate_model_weight"], [86, 4, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.config.RewardModelType": [[86, 4, 1, "", "blacklist"], [86, 4, 1, "", "dahoas"], [86, 4, 1, "", "diversity"], [86, 4, 1, "", "dpo"], [86, 4, 1, "", "keyword_match"], [86, 4, 1, "", "nsfw"], [86, 4, 1, "", "prompt"], [86, 4, 1, "", "reciprocate"], [86, 4, 1, "", "relevance"], [86, 4, 1, "", "relevance_bert"], [86, 4, 1, "", "relevance_mpnet"], [86, 4, 1, "", "rlhf"], [86, 4, 1, "", "task_validator"]], "prompting.validators.reward.dahoas": [[87, 2, 1, "", "DahoasRewardModel"]], "prompting.validators.reward.dahoas.DahoasRewardModel": [[87, 3, 1, "", "forward"], [87, 3, 1, "", "get_rewards"], [87, 3, 1, "", "load_weights"], [87, 4, 1, "", "model_name"], [87, 5, 1, "", "name"], [87, 3, 1, "", "reward"]], "prompting.validators.reward.diversity": [[88, 2, 1, "", "DiversityRewardEvent"], [88, 2, 1, "", "DiversityRewardModel"], [88, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.diversity.DiversityRewardEvent": [[88, 4, 1, "", "batch"], [88, 4, 1, "", "historic"]], "prompting.validators.reward.diversity.DiversityRewardModel": [[88, 4, 1, "", "diversity_model_path"], [88, 3, 1, "", "get_batch_rewards"], [88, 3, 1, "", "get_embeddings"], [88, 3, 1, "", "get_historic_rewards"], [88, 3, 1, "", "get_rewards"], [88, 5, 1, "", "name"], [88, 3, 1, "", "normalize_rewards"], [88, 3, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.dpo": [[89, 2, 1, "", "DirectPreferenceRewardModel"]], "prompting.validators.reward.dpo.DirectPreferenceRewardModel": [[89, 3, 1, "", "get_rewards"], [89, 5, 1, "", "name"], [89, 4, 1, "", "reward_model_name"], [89, 3, 1, "", "reward_single"]], "prompting.validators.reward.nsfw": [[91, 2, 1, "", "NSFWRewardEvent"], [91, 2, 1, "", "NSFWRewardModel"]], "prompting.validators.reward.nsfw.NSFWRewardEvent": [[91, 4, 1, "", "score"]], "prompting.validators.reward.nsfw.NSFWRewardModel": [[91, 3, 1, "", "get_rewards"], [91, 5, 1, "", "name"], [91, 3, 1, "", "normalize_rewards"], [91, 4, 1, "", "nsfw_filter_model_path"], [91, 3, 1, "", "reward"]], "prompting.validators.reward.open_assistant": [[92, 2, 1, "", "OpenAssistantRewardModel"]], "prompting.validators.reward.open_assistant.OpenAssistantRewardModel": [[92, 3, 1, "", "get_rewards"], [92, 5, 1, "", "name"], [92, 4, 1, "", "reward_model_name"], [92, 3, 1, "", "reward_single"]], "prompting.validators.reward.prompt": [[93, 2, 1, "", "PromptRewardModel"]], "prompting.validators.reward.prompt.PromptRewardModel": [[93, 3, 1, "", "get_rewards"], [93, 5, 1, "", "name"], [93, 3, 1, "", "reward"], [93, 4, 1, "", "reward_model_name"]], "prompting.validators.reward.reciprocate": [[94, 2, 1, "", "ReciprocateRewardModel"]], "prompting.validators.reward.reciprocate.ReciprocateRewardModel": [[94, 3, 1, "", "get_rewards"], [94, 5, 1, "", "name"], [94, 4, 1, "", "revision"], [94, 3, 1, "", "reward"], [94, 4, 1, "", "reward_model_path"]], "prompting.validators.reward.relevance": [[95, 2, 1, "", "BertRelevanceRewardModel"], [95, 2, 1, "", "MpnetRelevenceModel"], [95, 2, 1, "", "RelevanceRewardEvent"], [95, 2, 1, "", "RelevanceRewardModel"], [95, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.relevance.BertRelevanceRewardModel": [[95, 3, 1, "", "get_embedding"], [95, 5, 1, "", "name"], [95, 4, 1, "", "relevance_model_path"], [95, 3, 1, "", "reward"]], "prompting.validators.reward.relevance.MpnetRelevenceModel": [[95, 4, 1, "", "diversity_model_path"], [95, 3, 1, "", "get_embeddings"], [95, 5, 1, "", "name"], [95, 3, 1, "", "reward"]], "prompting.validators.reward.relevance.RelevanceRewardEvent": [[95, 4, 1, "", "bert_score"], [95, 4, 1, "", "mpnet_score"]], "prompting.validators.reward.relevance.RelevanceRewardModel": [[95, 3, 1, "", "get_rewards"], [95, 5, 1, "", "name"], [95, 3, 1, "", "normalize_rewards"], [95, 3, 1, "", "reward"]], "prompting.validators.reward.reward": [[96, 2, 1, "", "BaseRewardEvent"], [96, 2, 1, "", "BaseRewardModel"]], "prompting.validators.reward.reward.BaseRewardEvent": [[96, 4, 1, "", "normalized_reward"], [96, 3, 1, "", "parse_reward_events"], [96, 4, 1, "", "reward"]], "prompting.validators.reward.reward.BaseRewardModel": [[96, 3, 1, "", "__repr__"], [96, 3, 1, "", "__str__"], [96, 3, 1, "", "apply"], [96, 3, 1, "", "get_rewards"], [96, 5, 1, "", "name"], [96, 3, 1, "", "normalize_rewards"]], "prompting.validators.tasks": [[97, 2, 1, "", "QuestionAnswerTask"], [97, 2, 1, "", "QuestionGenerationTask"], [97, 2, 1, "", "SummaryTask"], [97, 2, 1, "", "Task"], [97, 7, 1, "", "create_qa_task"], [97, 7, 1, "", "create_qg_task"], [97, 7, 1, "", "create_summarization_task"]], "prompting.validators.tasks.QuestionAnswerTask": [[97, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.QuestionGenerationTask": [[97, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.SummaryTask": [[97, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.Task": [[97, 4, 1, "", "base_text"], [97, 3, 1, "", "compose_prompt"], [97, 4, 1, "", "criteria"], [97, 4, 1, "", "task_name"], [97, 4, 1, "", "task_type"]], "prompting.validators.utils": [[98, 7, 1, "", "check_uid_availability"], [98, 7, 1, "", "checkpoint"], [98, 7, 1, "", "init_wandb"], [98, 7, 1, "", "load_state"], [98, 7, 1, "", "reinit_wandb"], [98, 7, 1, "", "resync_linear_layer"], [98, 7, 1, "", "resync_metagraph"], [98, 7, 1, "", "save_state"], [98, 7, 1, "", "should_checkpoint"], [98, 7, 1, "", "should_reinit_wandb"]], "prompting.validators.weights": [[99, 7, 1, "", "set_weights"], [99, 7, 1, "", "should_set_weights"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:exception", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "function", "Python function"]}, "titleterms": {"bittensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 100], "axon": 0, "modul": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 51, 52, 56, 58, 61, 65, 70, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "btlog": 1, "function": [1, 2, 4, 7, 15, 16, 19, 20, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 48, 49, 50, 51, 53, 54, 55, 56, 61, 62, 63, 66, 67, 68, 71, 75, 78, 84, 88, 95, 97, 98, 99], "attribut": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 30, 33, 37, 38, 41, 43, 44, 49, 53, 55, 58, 84], "chain_data": 2, "dendrit": 22, "error": 23, "subpackag": [37, 59, 69, 77], "submodul": [6, 25, 37, 49, 60, 64, 69, 77, 80, 90], "packag": [6, 37, 49, 69, 77, 80, 90], "keyfil": 38, "metagraph": [9, 39], "stream": 40, "subtensor": 41, "synaps": 42, "tensor": 43, "threadpool": 44, "type": 45, "util": [19, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 98], "_register_cuda": 46, "balanc": 47, "format": 48, "network": [11, 27, 50], "registr": [29, 51], "stat": 52, "test_util": 53, "wallet_util": 54, "weight_util": 55, "wallet": [20, 56], "api": [57, 100], "refer": 57, "welcom": 100, "document": [100, 101], "updat": 101, "28": 101, "march": 101, "2022": 101, "25": 101, "februari": 101, "05": 101, "novemb": 101, "2021": 101, "cli": 3, "command": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "deleg": [4, 24], "ident": 5, "inspect": 7, "list": 8, "misc": [10, 78], "overview": 12, "regist": 13, "root": [14, 30], "senat": [15, 31], "stake": [16, 34], "transfer": [17, 35], "unstak": [18, 36], "config": [21, 63, 71, 86], "extrins": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "log_util": 26, "prometheu": 28, "serv": 32, "set_weight": [33, 68], "miner": [58, 65], "neuron": [59, 60, 61], "valid": [60, 61, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "prompt": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "basemin": [62, 63, 64, 65, 66, 67, 68], "blacklist": [62, 85], "prioriti": 66, "run": 67, "protocol": 70, "criteria": 72, "dataset": 73, "event": 74, "forward": 75, "gate": 76, "penalti": [79, 80, 81, 82, 83], "content_match": 79, "keyword_match": 81, "task_valid": 83, "reward": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "dahoa": 87, "divers": 88, "dpo": 89, "nsfw": 91, "open_assist": 92, "reciproc": 94, "relev": 95, "task": 97, "weight": 99}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Documentation Updates": [[101, "documentation-updates"]], "28 March 2022": [[101, "march-2022"]], "25 February 2022": [[101, "february-2022"]], "05 November 2021": [[101, "november-2021"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"]], "Classes": [[0, "classes"], [1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [26, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [51, "classes"], [52, "classes"], [56, "classes"], [58, "classes"], [61, "classes"], [65, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"]], "bittensor.btlogging": [[1, "module-bittensor.btlogging"]], "Functions": [[1, "functions"], [2, "functions"], [4, "functions"], [7, "functions"], [15, "functions"], [16, "functions"], [19, "functions"], [20, "functions"], [24, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [39, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [46, "functions"], [48, "functions"], [49, "functions"], [50, "functions"], [51, "functions"], [53, "functions"], [54, "functions"], [55, "functions"], [56, "functions"], [61, "functions"], [62, "functions"], [63, "functions"], [66, "functions"], [67, "functions"], [68, "functions"], [71, "functions"], [75, "functions"], [78, "functions"], [84, "functions"], [88, "functions"], [95, "functions"], [97, "functions"], [98, "functions"], [99, "functions"]], "Attributes": [[1, "attributes"], [2, "attributes"], [3, "attributes"], [4, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [9, "attributes"], [10, "attributes"], [11, "attributes"], [12, "attributes"], [13, "attributes"], [14, "attributes"], [15, "attributes"], [16, "attributes"], [17, "attributes"], [18, "attributes"], [19, "attributes"], [21, "attributes"], [24, "attributes"], [30, "attributes"], [33, "attributes"], [37, "attributes"], [38, "attributes"], [41, "attributes"], [43, "attributes"], [44, "attributes"], [49, "attributes"], [53, "attributes"], [55, "attributes"], [58, "attributes"], [84, "attributes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "bittensor.cli": [[3, "module-bittensor.cli"]], "bittensor.commands.delegates": [[4, "module-bittensor.commands.delegates"]], "bittensor.commands.identity": [[5, "module-bittensor.commands.identity"]], "bittensor.commands": [[6, "module-bittensor.commands"]], "Submodules": [[6, "submodules"], [25, "submodules"], [37, "submodules"], [49, "submodules"], [60, "submodules"], [64, "submodules"], [69, "submodules"], [77, "submodules"], [80, "submodules"], [90, "submodules"]], "Package Contents": [[6, "package-contents"], [37, "package-contents"], [49, "package-contents"], [69, "package-contents"], [77, "package-contents"], [80, "package-contents"], [90, "package-contents"]], "bittensor.commands.inspect": [[7, "module-bittensor.commands.inspect"]], "bittensor.commands.list": [[8, "module-bittensor.commands.list"]], "bittensor.commands.metagraph": [[9, "module-bittensor.commands.metagraph"]], "bittensor.commands.misc": [[10, "module-bittensor.commands.misc"]], "bittensor.commands.network": [[11, "module-bittensor.commands.network"]], "bittensor.commands.overview": [[12, "module-bittensor.commands.overview"]], "bittensor.commands.register": [[13, "module-bittensor.commands.register"]], "bittensor.commands.root": [[14, "module-bittensor.commands.root"]], "bittensor.commands.senate": [[15, "module-bittensor.commands.senate"]], "bittensor.commands.stake": [[16, "module-bittensor.commands.stake"]], "bittensor.commands.transfer": [[17, "module-bittensor.commands.transfer"]], "bittensor.commands.unstake": [[18, "module-bittensor.commands.unstake"]], "bittensor.commands.utils": [[19, "module-bittensor.commands.utils"]], "bittensor.commands.wallets": [[20, "module-bittensor.commands.wallets"]], "bittensor.config": [[21, "module-bittensor.config"]], "bittensor.dendrite": [[22, "module-bittensor.dendrite"]], "bittensor.errors": [[23, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[24, "module-bittensor.extrinsics.delegation"]], "bittensor.extrinsics": [[25, "module-bittensor.extrinsics"]], "bittensor.extrinsics.log_utilities": [[26, "module-bittensor.extrinsics.log_utilities"]], "bittensor.extrinsics.network": [[27, "module-bittensor.extrinsics.network"]], "bittensor.extrinsics.prometheus": [[28, "module-bittensor.extrinsics.prometheus"]], "bittensor.extrinsics.registration": [[29, "module-bittensor.extrinsics.registration"]], "bittensor.extrinsics.root": [[30, "module-bittensor.extrinsics.root"]], "bittensor.extrinsics.senate": [[31, "module-bittensor.extrinsics.senate"]], "bittensor.extrinsics.serving": [[32, "module-bittensor.extrinsics.serving"]], "bittensor.extrinsics.set_weights": [[33, "module-bittensor.extrinsics.set_weights"]], "bittensor.extrinsics.staking": [[34, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[35, "module-bittensor.extrinsics.transfer"]], "bittensor.extrinsics.unstaking": [[36, "module-bittensor.extrinsics.unstaking"]], "bittensor": [[37, "module-bittensor"]], "Subpackages": [[37, "subpackages"], [59, "subpackages"], [69, "subpackages"], [77, "subpackages"]], "bittensor.keyfile": [[38, "module-bittensor.keyfile"]], "bittensor.metagraph": [[39, "module-bittensor.metagraph"]], "bittensor.stream": [[40, "module-bittensor.stream"]], "bittensor.subtensor": [[41, "module-bittensor.subtensor"]], "bittensor.synapse": [[42, "module-bittensor.synapse"]], "bittensor.tensor": [[43, "module-bittensor.tensor"]], "bittensor.threadpool": [[44, "module-bittensor.threadpool"]], "bittensor.types": [[45, "module-bittensor.types"]], "bittensor.utils._register_cuda": [[46, "module-bittensor.utils._register_cuda"]], "bittensor.utils.balance": [[47, "module-bittensor.utils.balance"]], "bittensor.utils.formatting": [[48, "module-bittensor.utils.formatting"]], "bittensor.utils": [[49, "module-bittensor.utils"]], "bittensor.utils.networking": [[50, "module-bittensor.utils.networking"]], "bittensor.utils.registration": [[51, "module-bittensor.utils.registration"]], "bittensor.utils.stats": [[52, "module-bittensor.utils.stats"]], "bittensor.utils.test_utils": [[53, "module-bittensor.utils.test_utils"]], "bittensor.utils.wallet_utils": [[54, "module-bittensor.utils.wallet_utils"]], "bittensor.utils.weight_utils": [[55, "module-bittensor.utils.weight_utils"]], "bittensor.wallet": [[56, "module-bittensor.wallet"]], "API Reference": [[57, "api-reference"]], "miner": [[58, "module-miner"]], "neurons": [[59, "module-neurons"]], "neurons.validators": [[60, "module-neurons.validators"]], "neurons.validators.validator": [[61, "module-neurons.validators.validator"]], "prompting.baseminer.blacklist": [[62, "module-prompting.baseminer.blacklist"]], "prompting.baseminer.config": [[63, "module-prompting.baseminer.config"]], "prompting.baseminer": [[64, "module-prompting.baseminer"]], "prompting.baseminer.miner": [[65, "module-prompting.baseminer.miner"]], "prompting.baseminer.priority": [[66, "module-prompting.baseminer.priority"]], "prompting.baseminer.run": [[67, "module-prompting.baseminer.run"]], "prompting.baseminer.set_weights": [[68, "module-prompting.baseminer.set_weights"]], "prompting": [[69, "module-prompting"]], "prompting.protocol": [[70, "module-prompting.protocol"]], "prompting.validators.config": [[71, "module-prompting.validators.config"]], "prompting.validators.criteria": [[72, "module-prompting.validators.criteria"]], "prompting.validators.dataset": [[73, "module-prompting.validators.dataset"]], "prompting.validators.event": [[74, "module-prompting.validators.event"]], "prompting.validators.forward": [[75, "module-prompting.validators.forward"]], "prompting.validators.gating": [[76, "module-prompting.validators.gating"]], "prompting.validators": [[77, "module-prompting.validators"]], "prompting.validators.misc": [[78, "module-prompting.validators.misc"]], "prompting.validators.penalty.content_match": [[79, "module-prompting.validators.penalty.content_match"]], "prompting.validators.penalty": [[80, "module-prompting.validators.penalty"]], "prompting.validators.penalty.keyword_match": [[81, "module-prompting.validators.penalty.keyword_match"]], "prompting.validators.penalty.penalty": [[82, "module-prompting.validators.penalty.penalty"]], "prompting.validators.penalty.task_validation": [[83, "module-prompting.validators.penalty.task_validation"]], "prompting.validators.prompts": [[84, "module-prompting.validators.prompts"]], "prompting.validators.reward.blacklist": [[85, "module-prompting.validators.reward.blacklist"]], "prompting.validators.reward.config": [[86, "module-prompting.validators.reward.config"]], "prompting.validators.reward.dahoas": [[87, "module-prompting.validators.reward.dahoas"]], "prompting.validators.reward.diversity": [[88, "module-prompting.validators.reward.diversity"]], "prompting.validators.reward.dpo": [[89, "module-prompting.validators.reward.dpo"]], "prompting.validators.reward": [[90, "module-prompting.validators.reward"]], "prompting.validators.reward.nsfw": [[91, "module-prompting.validators.reward.nsfw"]], "prompting.validators.reward.open_assistant": [[92, "module-prompting.validators.reward.open_assistant"]], "prompting.validators.reward.prompt": [[93, "module-prompting.validators.reward.prompt"]], "prompting.validators.reward.reciprocate": [[94, "module-prompting.validators.reward.reciprocate"]], "prompting.validators.reward.relevance": [[95, "module-prompting.validators.reward.relevance"]], "prompting.validators.reward.reward": [[96, "module-prompting.validators.reward.reward"]], "prompting.validators.tasks": [[97, "module-prompting.validators.tasks"]], "prompting.validators.utils": [[98, "module-prompting.validators.utils"]], "prompting.validators.weights": [[99, "module-prompting.validators.weights"]], "Welcome to Bittensor API Documentation": [[100, "welcome-to-bittensor-api-documentation"]]}, "indexentries": {"axonmiddleware (class in bittensor.axon)": [[0, "bittensor.axon.AxonMiddleware"]], "fastapithreadedserver (class in bittensor.axon)": [[0, "bittensor.axon.FastAPIThreadedServer"]], "__del__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__del__"]], "__repr__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__repr__"]], "__str__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__str__"]], "_wrapper_run() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer._wrapper_run"]], "add_args() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.add_args"]], "attach() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.attach"]], "axon (class in bittensor.axon)": [[0, "bittensor.axon.axon"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "blacklist() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.blacklist"]], "check_config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.check_config"]], "config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.config"]], "default_verify() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.default_verify"]], "dispatch() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.dispatch"]], "help() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.help"]], "info() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.info"]], "install_signal_handlers() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.install_signal_handlers"]], "is_running (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.is_running"]], "module": [[0, "module-bittensor.axon"], [1, "module-bittensor.btlogging"], [2, "module-bittensor.chain_data"], [3, "module-bittensor.cli"], [4, "module-bittensor.commands.delegates"], [5, "module-bittensor.commands.identity"], [6, "module-bittensor.commands"], [7, "module-bittensor.commands.inspect"], [8, "module-bittensor.commands.list"], [9, "module-bittensor.commands.metagraph"], [10, "module-bittensor.commands.misc"], [11, "module-bittensor.commands.network"], [12, "module-bittensor.commands.overview"], [13, "module-bittensor.commands.register"], [14, "module-bittensor.commands.root"], [15, "module-bittensor.commands.senate"], [16, "module-bittensor.commands.stake"], [17, "module-bittensor.commands.transfer"], [18, "module-bittensor.commands.unstake"], [19, "module-bittensor.commands.utils"], [20, "module-bittensor.commands.wallets"], [21, "module-bittensor.config"], [22, "module-bittensor.dendrite"], [23, "module-bittensor.errors"], [24, "module-bittensor.extrinsics.delegation"], [25, "module-bittensor.extrinsics"], [26, "module-bittensor.extrinsics.log_utilities"], [27, "module-bittensor.extrinsics.network"], [28, "module-bittensor.extrinsics.prometheus"], [29, "module-bittensor.extrinsics.registration"], [30, "module-bittensor.extrinsics.root"], [31, "module-bittensor.extrinsics.senate"], [32, "module-bittensor.extrinsics.serving"], [33, "module-bittensor.extrinsics.set_weights"], [34, "module-bittensor.extrinsics.staking"], [35, "module-bittensor.extrinsics.transfer"], [36, "module-bittensor.extrinsics.unstaking"], [37, "module-bittensor"], [38, "module-bittensor.keyfile"], [39, "module-bittensor.metagraph"], [40, "module-bittensor.stream"], [41, "module-bittensor.subtensor"], [42, "module-bittensor.synapse"], [43, "module-bittensor.tensor"], [44, "module-bittensor.threadpool"], [45, "module-bittensor.types"], [46, "module-bittensor.utils._register_cuda"], [47, "module-bittensor.utils.balance"], [48, "module-bittensor.utils.formatting"], [49, "module-bittensor.utils"], [50, "module-bittensor.utils.networking"], [51, "module-bittensor.utils.registration"], [52, "module-bittensor.utils.stats"], [53, "module-bittensor.utils.test_utils"], [54, "module-bittensor.utils.wallet_utils"], [55, "module-bittensor.utils.weight_utils"], [56, "module-bittensor.wallet"], [58, "module-miner"], [59, "module-neurons"], [60, "module-neurons.validators"], [61, "module-neurons.validators.validator"], [62, "module-prompting.baseminer.blacklist"], [63, "module-prompting.baseminer.config"], [64, "module-prompting.baseminer"], [65, "module-prompting.baseminer.miner"], [66, "module-prompting.baseminer.priority"], [67, "module-prompting.baseminer.run"], [68, "module-prompting.baseminer.set_weights"], [69, "module-prompting"], [70, "module-prompting.protocol"], [71, "module-prompting.validators.config"], [72, "module-prompting.validators.criteria"], [73, "module-prompting.validators.dataset"], [74, "module-prompting.validators.event"], [75, "module-prompting.validators.forward"], [76, "module-prompting.validators.gating"], [77, "module-prompting.validators"], [78, "module-prompting.validators.misc"], [79, "module-prompting.validators.penalty.content_match"], [80, "module-prompting.validators.penalty"], [81, "module-prompting.validators.penalty.keyword_match"], [82, "module-prompting.validators.penalty.penalty"], [83, "module-prompting.validators.penalty.task_validation"], [84, "module-prompting.validators.prompts"], [85, "module-prompting.validators.reward.blacklist"], [86, "module-prompting.validators.reward.config"], [87, "module-prompting.validators.reward.dahoas"], [88, "module-prompting.validators.reward.diversity"], [89, "module-prompting.validators.reward.dpo"], [90, "module-prompting.validators.reward"], [91, "module-prompting.validators.reward.nsfw"], [92, "module-prompting.validators.reward.open_assistant"], [93, "module-prompting.validators.reward.prompt"], [94, "module-prompting.validators.reward.reciprocate"], [95, "module-prompting.validators.reward.relevance"], [96, "module-prompting.validators.reward.reward"], [97, "module-prompting.validators.tasks"], [98, "module-prompting.validators.utils"], [99, "module-prompting.validators.weights"]], "postprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.postprocess"]], "preprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.preprocess"]], "priority() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.priority"]], "run() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.run"]], "run_in_thread() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.run_in_thread"]], "serve() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.serve"]], "should_exit (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.should_exit"]], "start() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.start"]], "start() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.start"]], "stop() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.stop"]], "stop() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.stop"]], "to_string() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.to_string"]], "verify() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.verify"]], "verify_body_integrity() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.verify_body_integrity"]], "__debug_on__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__debug_on__"]], "__file_sink__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__file_sink__"]], "__has_been_inited__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__has_been_inited__"]], "__std_sink__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__std_sink__"]], "__trace_on__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__trace_on__"]], "_format() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging._format"]], "_remove_loguru_ansi_directive() (in module bittensor.btlogging)": [[1, "bittensor.btlogging._remove_loguru_ansi_directive"]], "add_args() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.add_args"]], "bittensor.btlogging": [[1, "module-bittensor.btlogging"]], "check_config() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.check_config"]], "config() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.config"]], "debug() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.debug"]], "error() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.error"]], "exception() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.exception"]], "get_level() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.get_level"]], "help() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.help"]], "info() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.info"]], "log_filter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_filter"]], "log_formatter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_formatter"]], "log_save_filter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_save_filter"]], "log_save_formatter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_save_formatter"]], "logger (in module bittensor.btlogging)": [[1, "bittensor.btlogging.logger"]], "logging (class in bittensor.btlogging)": [[1, "bittensor.btlogging.logging"]], "set_debug() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.set_debug"]], "set_trace() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.set_trace"]], "success() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.success"]], "trace() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.trace"]], "warning() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.warning"]], "axoninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.AxonInfo"]], "chaindatatype (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ChainDataType"]], "delegateinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.DelegateInfo"]], "delegatedinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegatedInfo"]], "ipinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.IPInfo"]], "ipinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.IPInfo"]], "neuroninfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfo"]], "neuroninfolite (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfoLite"]], "prometheusinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.PrometheusInfo"]], "proposalcalldata (in module bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalCallData"]], "proposalvotedata (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalVoteData"]], "raopertao (in module bittensor.chain_data)": [[2, "bittensor.chain_data.RAOPERTAO"]], "stakeinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.StakeInfo"]], "subnethyperparameters (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetHyperparameters"]], "subnetinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetInfo"]], "u16_max (in module bittensor.chain_data)": [[2, "bittensor.chain_data.U16_MAX"]], "u64_max (in module bittensor.chain_data)": [[2, "bittensor.chain_data.U64_MAX"]], "__eq__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__eq__"]], "__repr__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__repr__"]], "__str__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__str__"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfo static method)": [[2, "bittensor.chain_data.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfolite static method)": [[2, "bittensor.chain_data.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.chain_data.neuroninfo static method)": [[2, "bittensor.chain_data.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.chain_data.neuroninfolite static method)": [[2, "bittensor.chain_data.NeuronInfoLite._null_neuron"]], "active (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.active"]], "active (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.active"]], "activity_cutoff (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.activity_cutoff"]], "adjustment_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.adjustment_interval"]], "axon_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.axon_info"]], "axon_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.axon_info"]], "ayes (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.ayes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "block (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.block"]], "blocks_since_epoch (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.blocks_since_epoch"]], "bonds (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.bonds"]], "bonds_moving_avg (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.bonds_moving_avg"]], "burn (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.burn"]], "coldkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.coldkey"]], "coldkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.coldkey_ss58"]], "connection_requirements (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.connection_requirements"]], "consensus (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.consensus"]], "consensus (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.consensus"]], "custom_rpc_type_registry (in module bittensor.chain_data)": [[2, "bittensor.chain_data.custom_rpc_type_registry"]], "delegated_list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.delegated_list_from_vec_u8"]], "difficulty (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.difficulty"]], "dividends (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.dividends"]], "dividends (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.dividends"]], "emission (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.emission"]], "emission (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.emission"]], "emission_value (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.emission_value"]], "encode() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.encode"]], "end (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.end"]], "fix_decoded_values() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.prometheusinfo class method)": [[2, "bittensor.chain_data.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.fix_decoded_values"]], "from_neuron_info() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding_using_type_string"]], "from_string() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_string"]], "from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "hotkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.hotkey"]], "hotkey_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.hotkey_ss58"]], "immunity_period (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.immunity_period"]], "incentive (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.incentive"]], "incentive (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.incentive"]], "index (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.index"]], "ip (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip"]], "ip (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip"]], "ip (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip"]], "ip_str() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.ip_str"]], "ip_type (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip_type"]], "ip_type (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip_type"]], "ip_type (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip_type"]], "is_null (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.is_null"]], "is_null (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.is_null"]], "is_serving (bittensor.chain_data.axoninfo property)": [[2, "bittensor.chain_data.AxonInfo.is_serving"]], "kappa (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.kappa"]], "kappa (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.kappa"]], "last_update (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.last_update"]], "last_update (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.last_update"]], "list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_of_tuple_from_vec_u8"]], "max_allowed_validators (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_allowed_validators"]], "max_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_n"]], "max_regs_per_block (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_weight_limit"]], "min_allowed_weights (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.min_allowed_weights"]], "min_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.modality"]], "nays (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.nays"]], "netuid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.netuid"]], "netuid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.netuid"]], "netuid (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.netuid"]], "nominators (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.nominators"]], "owner_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.owner_ss58"]], "placeholder1 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder1"]], "placeholder2 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder2"]], "port (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.port"]], "port (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.port"]], "prometheus_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.protocol"]], "protocol (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.protocol"]], "pruning_score (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.pruning_score"]], "pruning_score (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.pruning_score"]], "rank (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.rank"]], "rank (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.rank"]], "registration_allowed (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.registrations"]], "return_per_1000 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.return_per_1000"]], "rho (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.rho"]], "rho (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.rho"]], "scaling_law_power (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.scaling_law_power"]], "stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake"]], "stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake"]], "stake (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.stake"]], "stake_dict (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake_dict"]], "stake_dict (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake_dict"]], "subnetwork_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.subnetwork_n"]], "take (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.take"]], "target_regs_per_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.tempo"]], "tempo (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.tempo"]], "threshold (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.threshold"]], "to_parameter_dict() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnethyperparameters method)": [[2, "bittensor.chain_data.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnetinfo method)": [[2, "bittensor.chain_data.SubnetInfo.to_parameter_dict"]], "to_string() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_string"]], "total_daily_return (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_daily_return"]], "total_stake (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.total_stake"]], "trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.trust"]], "trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.trust"]], "uid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.uid"]], "uid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.uid"]], "validator_permit (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_permit"]], "validator_permit (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.validator_permits"]], "validator_trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_trust"]], "validator_trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_trust"]], "version (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.version"]], "version (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.version"]], "weights (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.weights"]], "weights_rate_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_version"]], "alias_to_command (in module bittensor.cli)": [[3, "bittensor.cli.ALIAS_TO_COMMAND"]], "commands (in module bittensor.cli)": [[3, "bittensor.cli.COMMANDS"]], "__create_parser__() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.__create_parser__"]], "bittensor.cli": [[3, "module-bittensor.cli"]], "check_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.check_config"]], "cli (class in bittensor.cli)": [[3, "bittensor.cli.cli"]], "console (in module bittensor.cli)": [[3, "bittensor.cli.console"]], "create_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.create_config"]], "run() (bittensor.cli.cli method)": [[3, "bittensor.cli.cli.run"]], "delegatestakecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.DelegateStakeCommand"]], "delegateunstakecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand"]], "listdelegatescommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.ListDelegatesCommand"]], "mydelegatescommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.MyDelegatesCommand"]], "nominatecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.NominateCommand"]], "setdelegatetakecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.SetDelegateTakeCommand"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates._get_coldkey_wallets_for_path"]], "add_args() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.add_args"]], "add_args() (bittensor.commands.delegates.setdelegatetakecommand static method)": [[4, "bittensor.commands.delegates.SetDelegateTakeCommand.add_args"]], "bittensor.commands.delegates": [[4, "module-bittensor.commands.delegates"]], "check_config() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.check_config"]], "check_config() (bittensor.commands.delegates.setdelegatetakecommand static method)": [[4, "bittensor.commands.delegates.SetDelegateTakeCommand.check_config"]], "console (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.console"]], "run() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.run"]], "run() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.run"]], "run() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.run"]], "run() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.run"]], "run() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.run"]], "run() (bittensor.commands.delegates.setdelegatetakecommand static method)": [[4, "bittensor.commands.delegates.SetDelegateTakeCommand.run"]], "show_delegates() (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.show_delegates"]], "getidentitycommand (class in bittensor.commands.identity)": [[5, "bittensor.commands.identity.GetIdentityCommand"]], "setidentitycommand (class in bittensor.commands.identity)": [[5, "bittensor.commands.identity.SetIdentityCommand"]], "add_args() (bittensor.commands.identity.getidentitycommand static method)": [[5, "bittensor.commands.identity.GetIdentityCommand.add_args"]], "add_args() (bittensor.commands.identity.setidentitycommand static method)": [[5, "bittensor.commands.identity.SetIdentityCommand.add_args"]], "bittensor.commands.identity": [[5, "module-bittensor.commands.identity"]], "check_config() (bittensor.commands.identity.getidentitycommand static method)": [[5, "bittensor.commands.identity.GetIdentityCommand.check_config"]], "check_config() (bittensor.commands.identity.setidentitycommand static method)": [[5, "bittensor.commands.identity.SetIdentityCommand.check_config"]], "run() (bittensor.commands.identity.getidentitycommand method)": [[5, "bittensor.commands.identity.GetIdentityCommand.run"]], "run() (bittensor.commands.identity.setidentitycommand method)": [[5, "bittensor.commands.identity.SetIdentityCommand.run"]], "delegatestakecommand (class in bittensor.commands)": [[6, "bittensor.commands.DelegateStakeCommand"]], "delegateunstakecommand (class in bittensor.commands)": [[6, "bittensor.commands.DelegateUnstakeCommand"]], "getidentitycommand (class in bittensor.commands)": [[6, "bittensor.commands.GetIdentityCommand"]], "inspectcommand (class in bittensor.commands)": [[6, "bittensor.commands.InspectCommand"]], "listcommand (class in bittensor.commands)": [[6, "bittensor.commands.ListCommand"]], "listdelegatescommand (class in bittensor.commands)": [[6, "bittensor.commands.ListDelegatesCommand"]], "metagraphcommand (class in bittensor.commands)": [[6, "bittensor.commands.MetagraphCommand"]], "mydelegatescommand (class in bittensor.commands)": [[6, "bittensor.commands.MyDelegatesCommand"]], "newcoldkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.NewColdkeyCommand"]], "newhotkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.NewHotkeyCommand"]], "nominatecommand (class in bittensor.commands)": [[6, "bittensor.commands.NominateCommand"]], "overviewcommand (class in bittensor.commands)": [[6, "bittensor.commands.OverviewCommand"]], "powregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.PowRegisterCommand"]], "proposalscommand (class in bittensor.commands)": [[6, "bittensor.commands.ProposalsCommand"]], "regencoldkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenColdkeyCommand"]], "regencoldkeypubcommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenColdkeypubCommand"]], "regenhotkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenHotkeyCommand"]], "registercommand (class in bittensor.commands)": [[6, "bittensor.commands.RegisterCommand"]], "rootgetweightscommand (class in bittensor.commands)": [[6, "bittensor.commands.RootGetWeightsCommand"]], "rootlist (class in bittensor.commands)": [[6, "bittensor.commands.RootList"]], "rootregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.RootRegisterCommand"]], "rootsetweightscommand (class in bittensor.commands)": [[6, "bittensor.commands.RootSetWeightsCommand"]], "runfaucetcommand (class in bittensor.commands)": [[6, "bittensor.commands.RunFaucetCommand"]], "senatecommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateCommand"]], "senateleavecommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateLeaveCommand"]], "senateregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateRegisterCommand"]], "setdelegatetakecommand (class in bittensor.commands)": [[6, "bittensor.commands.SetDelegateTakeCommand"]], "setidentitycommand (class in bittensor.commands)": [[6, "bittensor.commands.SetIdentityCommand"]], "showvotescommand (class in bittensor.commands)": [[6, "bittensor.commands.ShowVotesCommand"]], "stakecommand (class in bittensor.commands)": [[6, "bittensor.commands.StakeCommand"]], "stakeshow (class in bittensor.commands)": [[6, "bittensor.commands.StakeShow"]], "transfercommand (class in bittensor.commands)": [[6, "bittensor.commands.TransferCommand"]], "unstakecommand (class in bittensor.commands)": [[6, "bittensor.commands.UnStakeCommand"]], "updatecommand (class in bittensor.commands)": [[6, "bittensor.commands.UpdateCommand"]], "updatewalletcommand (class in bittensor.commands)": [[6, "bittensor.commands.UpdateWalletCommand"]], "votecommand (class in bittensor.commands)": [[6, "bittensor.commands.VoteCommand"]], "walletbalancecommand (class in bittensor.commands)": [[6, "bittensor.commands.WalletBalanceCommand"]], "walletcreatecommand (class in bittensor.commands)": [[6, "bittensor.commands.WalletCreateCommand"]], "_get_de_registered_stake_for_coldkey_wallet() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand._get_de_registered_stake_for_coldkey_wallet"]], "_get_neurons_for_netuid() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand._get_neurons_for_netuid"]], "add_args() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.add_args"]], "add_args() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.add_args"]], "add_args() (bittensor.commands.getidentitycommand static method)": [[6, "bittensor.commands.GetIdentityCommand.add_args"]], "add_args() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.add_args"]], "add_args() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.add_args"]], "add_args() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.add_args"]], "add_args() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.add_args"]], "add_args() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.add_args"]], "add_args() (bittensor.commands.newcoldkeycommand static method)": [[6, "bittensor.commands.NewColdkeyCommand.add_args"]], "add_args() (bittensor.commands.newhotkeycommand static method)": [[6, "bittensor.commands.NewHotkeyCommand.add_args"]], "add_args() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.add_args"]], "add_args() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.add_args"]], "add_args() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.add_args"]], "add_args() (bittensor.commands.proposalscommand class method)": [[6, "bittensor.commands.ProposalsCommand.add_args"]], "add_args() (bittensor.commands.regencoldkeycommand static method)": [[6, "bittensor.commands.RegenColdkeyCommand.add_args"]], "add_args() (bittensor.commands.regencoldkeypubcommand static method)": [[6, "bittensor.commands.RegenColdkeypubCommand.add_args"]], "add_args() (bittensor.commands.regenhotkeycommand static method)": [[6, "bittensor.commands.RegenHotkeyCommand.add_args"]], "add_args() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.add_args"]], "add_args() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.add_args"]], "add_args() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.add_args"]], "add_args() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.add_args"]], "add_args() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.add_args"]], "add_args() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.add_args"]], "add_args() (bittensor.commands.senatecommand class method)": [[6, "bittensor.commands.SenateCommand.add_args"]], "add_args() (bittensor.commands.senateleavecommand class method)": [[6, "bittensor.commands.SenateLeaveCommand.add_args"]], "add_args() (bittensor.commands.senateregistercommand class method)": [[6, "bittensor.commands.SenateRegisterCommand.add_args"]], "add_args() (bittensor.commands.setdelegatetakecommand static method)": [[6, "bittensor.commands.SetDelegateTakeCommand.add_args"]], "add_args() (bittensor.commands.setidentitycommand static method)": [[6, "bittensor.commands.SetIdentityCommand.add_args"]], "add_args() (bittensor.commands.showvotescommand class method)": [[6, "bittensor.commands.ShowVotesCommand.add_args"]], "add_args() (bittensor.commands.stakecommand class method)": [[6, "bittensor.commands.StakeCommand.add_args"]], "add_args() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.add_args"]], "add_args() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.add_args"]], "add_args() (bittensor.commands.unstakecommand static method)": [[6, "bittensor.commands.UnStakeCommand.add_args"]], "add_args() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.add_args"]], "add_args() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.add_args"]], "add_args() (bittensor.commands.votecommand class method)": [[6, "bittensor.commands.VoteCommand.add_args"]], "add_args() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.add_args"]], "add_args() (bittensor.commands.walletcreatecommand static method)": [[6, "bittensor.commands.WalletCreateCommand.add_args"]], "bittensor.commands": [[6, "module-bittensor.commands"]], "check_config() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.check_config"]], "check_config() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.check_config"]], "check_config() (bittensor.commands.getidentitycommand static method)": [[6, "bittensor.commands.GetIdentityCommand.check_config"]], "check_config() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.check_config"]], "check_config() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.check_config"]], "check_config() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.check_config"]], "check_config() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.check_config"]], "check_config() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.check_config"]], "check_config() (bittensor.commands.newcoldkeycommand static method)": [[6, "bittensor.commands.NewColdkeyCommand.check_config"]], "check_config() (bittensor.commands.newhotkeycommand static method)": [[6, "bittensor.commands.NewHotkeyCommand.check_config"]], "check_config() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.check_config"]], "check_config() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.check_config"]], "check_config() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.check_config"]], "check_config() (bittensor.commands.proposalscommand class method)": [[6, "bittensor.commands.ProposalsCommand.check_config"]], "check_config() (bittensor.commands.regencoldkeycommand static method)": [[6, "bittensor.commands.RegenColdkeyCommand.check_config"]], "check_config() (bittensor.commands.regencoldkeypubcommand static method)": [[6, "bittensor.commands.RegenColdkeypubCommand.check_config"]], "check_config() (bittensor.commands.regenhotkeycommand static method)": [[6, "bittensor.commands.RegenHotkeyCommand.check_config"]], "check_config() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.check_config"]], "check_config() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.check_config"]], "check_config() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.check_config"]], "check_config() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.check_config"]], "check_config() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.check_config"]], "check_config() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.check_config"]], "check_config() (bittensor.commands.senatecommand class method)": [[6, "bittensor.commands.SenateCommand.check_config"]], "check_config() (bittensor.commands.senateleavecommand class method)": [[6, "bittensor.commands.SenateLeaveCommand.check_config"]], "check_config() (bittensor.commands.senateregistercommand class method)": [[6, "bittensor.commands.SenateRegisterCommand.check_config"]], "check_config() (bittensor.commands.setdelegatetakecommand static method)": [[6, "bittensor.commands.SetDelegateTakeCommand.check_config"]], "check_config() (bittensor.commands.setidentitycommand static method)": [[6, "bittensor.commands.SetIdentityCommand.check_config"]], "check_config() (bittensor.commands.showvotescommand class method)": [[6, "bittensor.commands.ShowVotesCommand.check_config"]], "check_config() (bittensor.commands.stakecommand class method)": [[6, "bittensor.commands.StakeCommand.check_config"]], "check_config() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.check_config"]], "check_config() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.check_config"]], "check_config() (bittensor.commands.unstakecommand class method)": [[6, "bittensor.commands.UnStakeCommand.check_config"]], "check_config() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.check_config"]], "check_config() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.check_config"]], "check_config() (bittensor.commands.votecommand class method)": [[6, "bittensor.commands.VoteCommand.check_config"]], "check_config() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.check_config"]], "check_config() (bittensor.commands.walletcreatecommand static method)": [[6, "bittensor.commands.WalletCreateCommand.check_config"]], "defaults (in module bittensor.commands)": [[6, "bittensor.commands.defaults"]], "run() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.run"]], "run() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.run"]], "run() (bittensor.commands.getidentitycommand method)": [[6, "bittensor.commands.GetIdentityCommand.run"]], "run() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.run"]], "run() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.run"]], "run() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.run"]], "run() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.run"]], "run() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.run"]], "run() (bittensor.commands.newcoldkeycommand method)": [[6, "bittensor.commands.NewColdkeyCommand.run"]], "run() (bittensor.commands.newhotkeycommand method)": [[6, "bittensor.commands.NewHotkeyCommand.run"]], "run() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.run"]], "run() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.run"]], "run() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.run"]], "run() (bittensor.commands.proposalscommand static method)": [[6, "bittensor.commands.ProposalsCommand.run"]], "run() (bittensor.commands.regencoldkeycommand method)": [[6, "bittensor.commands.RegenColdkeyCommand.run"]], "run() (bittensor.commands.regencoldkeypubcommand method)": [[6, "bittensor.commands.RegenColdkeypubCommand.run"]], "run() (bittensor.commands.regenhotkeycommand method)": [[6, "bittensor.commands.RegenHotkeyCommand.run"]], "run() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.run"]], "run() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.run"]], "run() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.run"]], "run() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.run"]], "run() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.run"]], "run() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.run"]], "run() (bittensor.commands.senatecommand static method)": [[6, "bittensor.commands.SenateCommand.run"]], "run() (bittensor.commands.senateleavecommand static method)": [[6, "bittensor.commands.SenateLeaveCommand.run"]], "run() (bittensor.commands.senateregistercommand static method)": [[6, "bittensor.commands.SenateRegisterCommand.run"]], "run() (bittensor.commands.setdelegatetakecommand static method)": [[6, "bittensor.commands.SetDelegateTakeCommand.run"]], "run() (bittensor.commands.setidentitycommand method)": [[6, "bittensor.commands.SetIdentityCommand.run"]], "run() (bittensor.commands.showvotescommand static method)": [[6, "bittensor.commands.ShowVotesCommand.run"]], "run() (bittensor.commands.stakecommand static method)": [[6, "bittensor.commands.StakeCommand.run"]], "run() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.run"]], "run() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.run"]], "run() (bittensor.commands.unstakecommand static method)": [[6, "bittensor.commands.UnStakeCommand.run"]], "run() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.run"]], "run() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.run"]], "run() (bittensor.commands.votecommand static method)": [[6, "bittensor.commands.VoteCommand.run"]], "run() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.run"]], "run() (bittensor.commands.walletcreatecommand method)": [[6, "bittensor.commands.WalletCreateCommand.run"]], "inspectcommand (class in bittensor.commands.inspect)": [[7, "bittensor.commands.inspect.InspectCommand"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect._get_coldkey_wallets_for_path"]], "_get_hotkey_wallets_for_wallet() (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect._get_hotkey_wallets_for_wallet"]], "add_args() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.add_args"]], "bittensor.commands.inspect": [[7, "module-bittensor.commands.inspect"]], "check_config() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.check_config"]], "console (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect.console"]], "run() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.run"]], "listcommand (class in bittensor.commands.list)": [[8, "bittensor.commands.list.ListCommand"]], "add_args() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.add_args"]], "bittensor.commands.list": [[8, "module-bittensor.commands.list"]], "check_config() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.check_config"]], "console (in module bittensor.commands.list)": [[8, "bittensor.commands.list.console"]], "run() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.run"]], "metagraphcommand (class in bittensor.commands.metagraph)": [[9, "bittensor.commands.metagraph.MetagraphCommand"]], "add_args() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.add_args"]], "bittensor.commands.metagraph": [[9, "module-bittensor.commands.metagraph"]], "check_config() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.check_config"]], "console (in module bittensor.commands.metagraph)": [[9, "bittensor.commands.metagraph.console"]], "run() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.run"]], "updatecommand (class in bittensor.commands.misc)": [[10, "bittensor.commands.misc.UpdateCommand"]], "add_args() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.add_args"]], "bittensor.commands.misc": [[10, "module-bittensor.commands.misc"]], "check_config() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.check_config"]], "console (in module bittensor.commands.misc)": [[10, "bittensor.commands.misc.console"]], "run() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.run"]], "hyperparams (in module bittensor.commands.network)": [[11, "bittensor.commands.network.HYPERPARAMS"]], "registersubnetworkcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand"]], "subnetgethyperparamscommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand"]], "subnethyperparamscommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand"]], "subnetlistcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetListCommand"]], "subnetlockcostcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetLockCostCommand"]], "subnetsudocommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetSudoCommand"]], "add_args() (bittensor.commands.network.registersubnetworkcommand class method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.add_args"]], "add_args() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlockcostcommand class method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.add_args"]], "add_args() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.add_args"]], "bittensor.commands.network": [[11, "module-bittensor.commands.network"]], "check_config() (bittensor.commands.network.registersubnetworkcommand class method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.check_config"]], "check_config() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlockcostcommand class method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.check_config"]], "check_config() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.check_config"]], "console (in module bittensor.commands.network)": [[11, "bittensor.commands.network.console"]], "run() (bittensor.commands.network.registersubnetworkcommand static method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.run"]], "run() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.run"]], "run() (bittensor.commands.network.subnetlockcostcommand static method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.run"]], "run() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.run"]], "overviewcommand (class in bittensor.commands.overview)": [[12, "bittensor.commands.overview.OverviewCommand"]], "_get_de_registered_stake_for_coldkey_wallet() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand._get_de_registered_stake_for_coldkey_wallet"]], "_get_neurons_for_netuid() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand._get_neurons_for_netuid"]], "add_args() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.add_args"]], "bittensor.commands.overview": [[12, "module-bittensor.commands.overview"]], "check_config() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.check_config"]], "console (in module bittensor.commands.overview)": [[12, "bittensor.commands.overview.console"]], "run() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.run"]], "powregistercommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.PowRegisterCommand"]], "registercommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.RegisterCommand"]], "runfaucetcommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.RunFaucetCommand"]], "add_args() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.add_args"]], "add_args() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.add_args"]], "add_args() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.add_args"]], "bittensor.commands.register": [[13, "module-bittensor.commands.register"]], "check_config() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.check_config"]], "check_config() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.check_config"]], "check_config() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.check_config"]], "console (in module bittensor.commands.register)": [[13, "bittensor.commands.register.console"]], "run() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.run"]], "run() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.run"]], "run() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.run"]], "rootgetweightscommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootGetWeightsCommand"]], "rootlist (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootList"]], "rootregistercommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootRegisterCommand"]], "rootsetweightscommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootSetWeightsCommand"]], "add_args() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.add_args"]], "add_args() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.add_args"]], "add_args() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.add_args"]], "add_args() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.add_args"]], "bittensor.commands.root": [[14, "module-bittensor.commands.root"]], "check_config() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.check_config"]], "check_config() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.check_config"]], "check_config() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.check_config"]], "check_config() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.check_config"]], "console (in module bittensor.commands.root)": [[14, "bittensor.commands.root.console"]], "run() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.run"]], "run() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.run"]], "run() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.run"]], "run() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.run"]], "proposalscommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.ProposalsCommand"]], "senatecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateCommand"]], "senateleavecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateLeaveCommand"]], "senateregistercommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateRegisterCommand"]], "showvotescommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.ShowVotesCommand"]], "votecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.VoteCommand"]], "add_args() (bittensor.commands.senate.proposalscommand class method)": [[15, "bittensor.commands.senate.ProposalsCommand.add_args"]], "add_args() (bittensor.commands.senate.senatecommand class method)": [[15, "bittensor.commands.senate.SenateCommand.add_args"]], "add_args() (bittensor.commands.senate.senateleavecommand class method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.add_args"]], "add_args() (bittensor.commands.senate.senateregistercommand class method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.add_args"]], "add_args() (bittensor.commands.senate.showvotescommand class method)": [[15, "bittensor.commands.senate.ShowVotesCommand.add_args"]], "add_args() (bittensor.commands.senate.votecommand class method)": [[15, "bittensor.commands.senate.VoteCommand.add_args"]], "bittensor.commands.senate": [[15, "module-bittensor.commands.senate"]], "check_config() (bittensor.commands.senate.proposalscommand class method)": [[15, "bittensor.commands.senate.ProposalsCommand.check_config"]], "check_config() (bittensor.commands.senate.senatecommand class method)": [[15, "bittensor.commands.senate.SenateCommand.check_config"]], "check_config() (bittensor.commands.senate.senateleavecommand class method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.check_config"]], "check_config() (bittensor.commands.senate.senateregistercommand class method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.check_config"]], "check_config() (bittensor.commands.senate.showvotescommand class method)": [[15, "bittensor.commands.senate.ShowVotesCommand.check_config"]], "check_config() (bittensor.commands.senate.votecommand class method)": [[15, "bittensor.commands.senate.VoteCommand.check_config"]], "console (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.console"]], "display_votes() (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.display_votes"]], "format_call_data() (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.format_call_data"]], "run() (bittensor.commands.senate.proposalscommand static method)": [[15, "bittensor.commands.senate.ProposalsCommand.run"]], "run() (bittensor.commands.senate.senatecommand static method)": [[15, "bittensor.commands.senate.SenateCommand.run"]], "run() (bittensor.commands.senate.senateleavecommand static method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.run"]], "run() (bittensor.commands.senate.senateregistercommand static method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.run"]], "run() (bittensor.commands.senate.showvotescommand static method)": [[15, "bittensor.commands.senate.ShowVotesCommand.run"]], "run() (bittensor.commands.senate.votecommand static method)": [[15, "bittensor.commands.senate.VoteCommand.run"]], "stakecommand (class in bittensor.commands.stake)": [[16, "bittensor.commands.stake.StakeCommand"]], "stakeshow (class in bittensor.commands.stake)": [[16, "bittensor.commands.stake.StakeShow"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake._get_coldkey_wallets_for_path"]], "_get_hotkey_wallets_for_wallet() (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake._get_hotkey_wallets_for_wallet"]], "add_args() (bittensor.commands.stake.stakecommand class method)": [[16, "bittensor.commands.stake.StakeCommand.add_args"]], "add_args() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.add_args"]], "bittensor.commands.stake": [[16, "module-bittensor.commands.stake"]], "check_config() (bittensor.commands.stake.stakecommand class method)": [[16, "bittensor.commands.stake.StakeCommand.check_config"]], "check_config() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.check_config"]], "console (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake.console"], [16, "id0"]], "run() (bittensor.commands.stake.stakecommand static method)": [[16, "bittensor.commands.stake.StakeCommand.run"]], "run() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.run"]], "transfercommand (class in bittensor.commands.transfer)": [[17, "bittensor.commands.transfer.TransferCommand"]], "add_args() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.add_args"]], "bittensor.commands.transfer": [[17, "module-bittensor.commands.transfer"]], "check_config() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.check_config"]], "console (in module bittensor.commands.transfer)": [[17, "bittensor.commands.transfer.console"]], "run() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.run"]], "unstakecommand (class in bittensor.commands.unstake)": [[18, "bittensor.commands.unstake.UnStakeCommand"]], "add_args() (bittensor.commands.unstake.unstakecommand static method)": [[18, "bittensor.commands.unstake.UnStakeCommand.add_args"]], "bittensor.commands.unstake": [[18, "module-bittensor.commands.unstake"]], "check_config() (bittensor.commands.unstake.unstakecommand class method)": [[18, "bittensor.commands.unstake.UnStakeCommand.check_config"]], "console (in module bittensor.commands.unstake)": [[18, "bittensor.commands.unstake.console"]], "run() (bittensor.commands.unstake.unstakecommand static method)": [[18, "bittensor.commands.unstake.UnStakeCommand.run"]], "delegatesdetails (class in bittensor.commands.utils)": [[19, "bittensor.commands.utils.DelegatesDetails"]], "intlistprompt (class in bittensor.commands.utils)": [[19, "bittensor.commands.utils.IntListPrompt"]], "_get_delegates_details_from_github() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils._get_delegates_details_from_github"]], "bittensor.commands.utils": [[19, "module-bittensor.commands.utils"]], "check_choice() (bittensor.commands.utils.intlistprompt method)": [[19, "bittensor.commands.utils.IntListPrompt.check_choice"]], "check_for_cuda_reg_config() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.check_for_cuda_reg_config"]], "check_netuid_set() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.check_netuid_set"]], "console (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.console"]], "description (bittensor.commands.utils.delegatesdetails attribute)": [[19, "bittensor.commands.utils.DelegatesDetails.description"]], "from_json() (bittensor.commands.utils.delegatesdetails class method)": [[19, "bittensor.commands.utils.DelegatesDetails.from_json"]], "get_all_wallets_for_path() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.get_all_wallets_for_path"]], "get_coldkey_wallets_for_path() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.get_coldkey_wallets_for_path"]], "get_delegates_details() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.get_delegates_details"]], "get_hotkey_wallets_for_wallet() (in module bittensor.commands.utils)": [[19, "bittensor.commands.utils.get_hotkey_wallets_for_wallet"]], "name (bittensor.commands.utils.delegatesdetails attribute)": [[19, "bittensor.commands.utils.DelegatesDetails.name"]], "signature (bittensor.commands.utils.delegatesdetails attribute)": [[19, "bittensor.commands.utils.DelegatesDetails.signature"]], "url (bittensor.commands.utils.delegatesdetails attribute)": [[19, "bittensor.commands.utils.DelegatesDetails.url"]], "newcoldkeycommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.NewColdkeyCommand"]], "newhotkeycommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.NewHotkeyCommand"]], "regencoldkeycommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.RegenColdkeyCommand"]], "regencoldkeypubcommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.RegenColdkeypubCommand"]], "regenhotkeycommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.RegenHotkeyCommand"]], "updatewalletcommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.UpdateWalletCommand"]], "walletbalancecommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.WalletBalanceCommand"]], "walletcreatecommand (class in bittensor.commands.wallets)": [[20, "bittensor.commands.wallets.WalletCreateCommand"]], "_get_coldkey_ss58_addresses_for_path() (in module bittensor.commands.wallets)": [[20, "bittensor.commands.wallets._get_coldkey_ss58_addresses_for_path"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.wallets)": [[20, "bittensor.commands.wallets._get_coldkey_wallets_for_path"]], "add_args() (bittensor.commands.wallets.newcoldkeycommand static method)": [[20, "bittensor.commands.wallets.NewColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.newhotkeycommand static method)": [[20, "bittensor.commands.wallets.NewHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeycommand static method)": [[20, "bittensor.commands.wallets.RegenColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[20, "bittensor.commands.wallets.RegenColdkeypubCommand.add_args"]], "add_args() (bittensor.commands.wallets.regenhotkeycommand static method)": [[20, "bittensor.commands.wallets.RegenHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.updatewalletcommand static method)": [[20, "bittensor.commands.wallets.UpdateWalletCommand.add_args"]], "add_args() (bittensor.commands.wallets.walletbalancecommand static method)": [[20, "bittensor.commands.wallets.WalletBalanceCommand.add_args"]], "add_args() (bittensor.commands.wallets.walletcreatecommand static method)": [[20, "bittensor.commands.wallets.WalletCreateCommand.add_args"]], "bittensor.commands.wallets": [[20, "module-bittensor.commands.wallets"]], "check_config() (bittensor.commands.wallets.newcoldkeycommand static method)": [[20, "bittensor.commands.wallets.NewColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.newhotkeycommand static method)": [[20, "bittensor.commands.wallets.NewHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeycommand static method)": [[20, "bittensor.commands.wallets.RegenColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[20, "bittensor.commands.wallets.RegenColdkeypubCommand.check_config"]], "check_config() (bittensor.commands.wallets.regenhotkeycommand static method)": [[20, "bittensor.commands.wallets.RegenHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.updatewalletcommand static method)": [[20, "bittensor.commands.wallets.UpdateWalletCommand.check_config"]], "check_config() (bittensor.commands.wallets.walletbalancecommand static method)": [[20, "bittensor.commands.wallets.WalletBalanceCommand.check_config"]], "check_config() (bittensor.commands.wallets.walletcreatecommand static method)": [[20, "bittensor.commands.wallets.WalletCreateCommand.check_config"]], "run() (bittensor.commands.wallets.newcoldkeycommand method)": [[20, "bittensor.commands.wallets.NewColdkeyCommand.run"]], "run() (bittensor.commands.wallets.newhotkeycommand method)": [[20, "bittensor.commands.wallets.NewHotkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeycommand method)": [[20, "bittensor.commands.wallets.RegenColdkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeypubcommand method)": [[20, "bittensor.commands.wallets.RegenColdkeypubCommand.run"]], "run() (bittensor.commands.wallets.regenhotkeycommand method)": [[20, "bittensor.commands.wallets.RegenHotkeyCommand.run"]], "run() (bittensor.commands.wallets.updatewalletcommand static method)": [[20, "bittensor.commands.wallets.UpdateWalletCommand.run"]], "run() (bittensor.commands.wallets.walletbalancecommand static method)": [[20, "bittensor.commands.wallets.WalletBalanceCommand.run"]], "run() (bittensor.commands.wallets.walletcreatecommand method)": [[20, "bittensor.commands.wallets.WalletCreateCommand.run"]], "defaultconfig (class in bittensor.config)": [[21, "bittensor.config.DefaultConfig"]], "invalidconfigfile": [[21, "bittensor.config.InvalidConfigFile"], [37, "bittensor.InvalidConfigFile"]], "t (in module bittensor.config)": [[21, "bittensor.config.T"]], "__deepcopy__() (bittensor.config.config method)": [[21, "bittensor.config.config.__deepcopy__"]], "__is_set (bittensor.config.config attribute)": [[21, "bittensor.config.config.__is_set"]], "__parse_args__() (bittensor.config.config static method)": [[21, "bittensor.config.config.__parse_args__"]], "__repr__() (bittensor.config.config method)": [[21, "bittensor.config.config.__repr__"]], "__split_params__() (bittensor.config.config static method)": [[21, "bittensor.config.config.__split_params__"]], "__str__() (bittensor.config.config method)": [[21, "bittensor.config.config.__str__"]], "_merge() (bittensor.config.config class method)": [[21, "bittensor.config.config._merge"]], "_remove_private_keys() (bittensor.config.config static method)": [[21, "bittensor.config.config._remove_private_keys"]], "bittensor.config": [[21, "module-bittensor.config"]], "config (class in bittensor.config)": [[21, "bittensor.config.config"]], "copy() (bittensor.config.config method)": [[21, "bittensor.config.config.copy"]], "default() (bittensor.config.defaultconfig class method)": [[21, "bittensor.config.DefaultConfig.default"]], "is_set() (bittensor.config.config method)": [[21, "bittensor.config.config.is_set"]], "merge() (bittensor.config.config method)": [[21, "bittensor.config.config.merge"]], "merge_all() (bittensor.config.config class method)": [[21, "bittensor.config.config.merge_all"]], "to_string() (bittensor.config.config method)": [[21, "bittensor.config.config.to_string"]], "update_with_kwargs() (bittensor.config.config method)": [[21, "bittensor.config.config.update_with_kwargs"]], "__aenter__() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.__aexit__"]], "__del__() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.__del__"]], "__repr__() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.__repr__"], [22, "id9"]], "__str__() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.__str__"], [22, "id8"]], "_get_endpoint_url() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite._handle_request_errors"]], "_log_incoming_response() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite._log_outgoing_request"]], "aclose_session() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.aclose_session"], [22, "id1"]], "bittensor.dendrite": [[22, "module-bittensor.dendrite"]], "call() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.call"], [22, "id4"]], "call_stream() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.call_stream"], [22, "id5"]], "close_session() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.close_session"], [22, "id0"]], "dendrite (class in bittensor.dendrite)": [[22, "bittensor.dendrite.dendrite"]], "external_ip (bittensor.dendrite.dendrite attribute)": [[22, "bittensor.dendrite.dendrite.external_ip"]], "forward() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.forward"], [22, "id3"]], "keypair (bittensor.dendrite.dendrite attribute)": [[22, "bittensor.dendrite.dendrite.keypair"]], "preprocess_synapse_for_request() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.preprocess_synapse_for_request"], [22, "id6"]], "process_server_response() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.process_server_response"], [22, "id7"]], "query() (bittensor.dendrite.dendrite method)": [[22, "bittensor.dendrite.dendrite.query"], [22, "id2"]], "session (bittensor.dendrite.dendrite property)": [[22, "bittensor.dendrite.dendrite.session"]], "synapse_history (bittensor.dendrite.dendrite attribute)": [[22, "bittensor.dendrite.dendrite.synapse_history"]], "chainconnectionerror": [[23, "bittensor.errors.ChainConnectionError"], [37, "bittensor.ChainConnectionError"]], "chainerror": [[23, "bittensor.errors.ChainError"], [37, "bittensor.ChainError"]], "chainqueryerror": [[23, "bittensor.errors.ChainQueryError"], [37, "bittensor.ChainQueryError"]], "chaintransactionerror": [[23, "bittensor.errors.ChainTransactionError"], [37, "bittensor.ChainTransactionError"]], "identityerror": [[23, "bittensor.errors.IdentityError"], [37, "bittensor.IdentityError"]], "keyfileerror": [[23, "bittensor.errors.KeyFileError"], [37, "bittensor.KeyFileError"], [37, "id0"]], "nominationerror": [[23, "bittensor.errors.NominationError"], [37, "bittensor.NominationError"]], "notdelegateerror": [[23, "bittensor.errors.NotDelegateError"], [37, "bittensor.NotDelegateError"]], "notregisterederror": [[23, "bittensor.errors.NotRegisteredError"], [37, "bittensor.NotRegisteredError"]], "registrationerror": [[23, "bittensor.errors.RegistrationError"], [37, "bittensor.RegistrationError"]], "stakeerror": [[23, "bittensor.errors.StakeError"], [37, "bittensor.StakeError"]], "transfererror": [[23, "bittensor.errors.TransferError"], [37, "bittensor.TransferError"]], "unstakeerror": [[23, "bittensor.errors.UnstakeError"], [37, "bittensor.UnstakeError"]], "bittensor.errors": [[23, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[24, "module-bittensor.extrinsics.delegation"]], "delegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.delegate_extrinsic"]], "logger (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.logger"]], "nominate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.nominate_extrinsic"]], "set_delegate_take_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.set_delegate_take_extrinsic"]], "undelegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[24, "bittensor.extrinsics.delegation.undelegate_extrinsic"]], "bittensor.extrinsics": [[25, "module-bittensor.extrinsics"]], "validatorlogger (class in bittensor.extrinsics.log_utilities)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger"]], "validatorprometheus (class in bittensor.extrinsics.log_utilities)": [[26, "bittensor.extrinsics.log_utilities.ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities": [[26, "module-bittensor.extrinsics.log_utilities"]], "log_epoch_end() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_end"]], "log_epoch_start() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_start"]], "log_run_info() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_run_info"]], "log_step() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_step"]], "print_console_metagraph_status() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_metagraph_status"]], "print_console_query_summary() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_query_summary"]], "print_console_subtensor_weight() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_subtensor_weight"]], "print_console_validator_identifier() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_validator_identifier"]], "print_response_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_response_table"]], "print_stats_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_stats_table"]], "print_synapse_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synapse_table"]], "print_synergy_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synergy_table"]], "print_weights_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[26, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_weights_table"]], "bittensor.extrinsics.network": [[27, "module-bittensor.extrinsics.network"]], "register_subnetwork_extrinsic() (in module bittensor.extrinsics.network)": [[27, "bittensor.extrinsics.network.register_subnetwork_extrinsic"]], "set_hyperparameter_extrinsic() (in module bittensor.extrinsics.network)": [[27, "bittensor.extrinsics.network.set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[28, "module-bittensor.extrinsics.prometheus"]], "prometheus_extrinsic() (in module bittensor.extrinsics.prometheus)": [[28, "bittensor.extrinsics.prometheus.prometheus_extrinsic"]], "maxattemptsexception": [[29, "bittensor.extrinsics.registration.MaxAttemptsException"]], "maxsuccessexception": [[29, "bittensor.extrinsics.registration.MaxSuccessException"]], "bittensor.extrinsics.registration": [[29, "module-bittensor.extrinsics.registration"]], "burned_register_extrinsic() (in module bittensor.extrinsics.registration)": [[29, "bittensor.extrinsics.registration.burned_register_extrinsic"]], "register_extrinsic() (in module bittensor.extrinsics.registration)": [[29, "bittensor.extrinsics.registration.register_extrinsic"]], "run_faucet_extrinsic() (in module bittensor.extrinsics.registration)": [[29, "bittensor.extrinsics.registration.run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[30, "module-bittensor.extrinsics.root"]], "logger (in module bittensor.extrinsics.root)": [[30, "bittensor.extrinsics.root.logger"]], "root_register_extrinsic() (in module bittensor.extrinsics.root)": [[30, "bittensor.extrinsics.root.root_register_extrinsic"]], "set_root_weights_extrinsic() (in module bittensor.extrinsics.root)": [[30, "bittensor.extrinsics.root.set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[31, "module-bittensor.extrinsics.senate"]], "leave_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[31, "bittensor.extrinsics.senate.leave_senate_extrinsic"]], "register_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[31, "bittensor.extrinsics.senate.register_senate_extrinsic"]], "vote_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[31, "bittensor.extrinsics.senate.vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[32, "module-bittensor.extrinsics.serving"]], "serve_axon_extrinsic() (in module bittensor.extrinsics.serving)": [[32, "bittensor.extrinsics.serving.serve_axon_extrinsic"]], "serve_extrinsic() (in module bittensor.extrinsics.serving)": [[32, "bittensor.extrinsics.serving.serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[33, "module-bittensor.extrinsics.set_weights"]], "logger (in module bittensor.extrinsics.set_weights)": [[33, "bittensor.extrinsics.set_weights.logger"]], "set_weights_extrinsic() (in module bittensor.extrinsics.set_weights)": [[33, "bittensor.extrinsics.set_weights.set_weights_extrinsic"]], "__do_add_stake_single() (in module bittensor.extrinsics.staking)": [[34, "bittensor.extrinsics.staking.__do_add_stake_single"]], "add_stake_extrinsic() (in module bittensor.extrinsics.staking)": [[34, "bittensor.extrinsics.staking.add_stake_extrinsic"]], "add_stake_multiple_extrinsic() (in module bittensor.extrinsics.staking)": [[34, "bittensor.extrinsics.staking.add_stake_multiple_extrinsic"]], "bittensor.extrinsics.staking": [[34, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[35, "module-bittensor.extrinsics.transfer"]], "transfer_extrinsic() (in module bittensor.extrinsics.transfer)": [[35, "bittensor.extrinsics.transfer.transfer_extrinsic"]], "__do_remove_stake_single() (in module bittensor.extrinsics.unstaking)": [[36, "bittensor.extrinsics.unstaking.__do_remove_stake_single"]], "bittensor.extrinsics.unstaking": [[36, "module-bittensor.extrinsics.unstaking"]], "unstake_extrinsic() (in module bittensor.extrinsics.unstaking)": [[36, "bittensor.extrinsics.unstaking.unstake_extrinsic"]], "unstake_multiple_extrinsic() (in module bittensor.extrinsics.unstaking)": [[36, "bittensor.extrinsics.unstaking.unstake_multiple_extrinsic"]], "all_commands (in module bittensor)": [[37, "bittensor.ALL_COMMANDS"]], "axoninfo (class in bittensor)": [[37, "bittensor.AxonInfo"]], "b (bittensor.metagraph property)": [[37, "bittensor.metagraph.B"]], "btstreamingresponsemodel (class in bittensor)": [[37, "bittensor.BTStreamingResponseModel"]], "balance (class in bittensor)": [[37, "bittensor.Balance"], [37, "id11"]], "c (bittensor.metagraph property)": [[37, "bittensor.metagraph.C"]], "chaindatatype (class in bittensor)": [[37, "bittensor.ChainDataType"]], "d (bittensor.metagraph property)": [[37, "bittensor.metagraph.D"]], "defaultconfig (class in bittensor)": [[37, "bittensor.DefaultConfig"]], "delegateinfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor)": [[37, "bittensor.DelegateInfo"]], "delegatedinfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.DelegatedInfo"]], "e (bittensor.metagraph property)": [[37, "bittensor.metagraph.E"]], "i (bittensor.metagraph property)": [[37, "bittensor.metagraph.I"]], "ipinfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.IPInfo"]], "ipinfo (class in bittensor)": [[37, "bittensor.IPInfo"]], "mockkeyfile (class in bittensor)": [[37, "bittensor.Mockkeyfile"]], "nacl_salt (in module bittensor)": [[37, "bittensor.NACL_SALT"]], "neuroninfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor)": [[37, "bittensor.NeuronInfo"]], "neuroninfolite (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor)": [[37, "bittensor.NeuronInfoLite"]], "prioritythreadpoolexecutor (class in bittensor)": [[37, "bittensor.PriorityThreadPoolExecutor"]], "prometheusinfo (class in bittensor)": [[37, "bittensor.PrometheusInfo"]], "proposalcalldata (in module bittensor)": [[37, "bittensor.ProposalCallData"]], "proposalvotedata (class in bittensor)": [[37, "bittensor.ProposalVoteData"]], "r (bittensor.metagraph property)": [[37, "bittensor.metagraph.R"]], "raopertao (in module bittensor)": [[37, "bittensor.RAOPERTAO"], [37, "id53"]], "s (bittensor.metagraph property)": [[37, "bittensor.metagraph.S"]], "stakeinfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor)": [[37, "bittensor.StakeInfo"]], "streamingsynapse (class in bittensor)": [[37, "bittensor.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor)": [[37, "bittensor.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor)": [[37, "bittensor.StreamingSynapse.Config"]], "subnethyperparameters (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor)": [[37, "bittensor.SubnetHyperparameters"]], "subnetinfo (bittensor.chaindatatype attribute)": [[37, "bittensor.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor)": [[37, "bittensor.SubnetInfo"]], "synapse (class in bittensor)": [[37, "bittensor.Synapse"]], "synapse.config (class in bittensor)": [[37, "bittensor.Synapse.Config"]], "t (bittensor.metagraph property)": [[37, "bittensor.metagraph.T"]], "t (in module bittensor)": [[37, "bittensor.T"]], "torch_dtypes (in module bittensor)": [[37, "bittensor.TORCH_DTYPES"]], "tensor (class in bittensor)": [[37, "bittensor.Tensor"], [37, "bittensor.tensor"]], "tensor.config (class in bittensor)": [[37, "bittensor.Tensor.Config"]], "terminalinfo (class in bittensor)": [[37, "bittensor.TerminalInfo"]], "terminalinfo.config (class in bittensor)": [[37, "bittensor.TerminalInfo.Config"]], "tv (bittensor.metagraph property)": [[37, "bittensor.metagraph.Tv"]], "u16_max (in module bittensor)": [[37, "bittensor.U16_MAX"], [37, "id9"]], "u16_normalized_float() (in module bittensor)": [[37, "bittensor.U16_NORMALIZED_FLOAT"], [37, "id10"]], "u64_max (in module bittensor)": [[37, "bittensor.U64_MAX"], [37, "id54"]], "u64_normalized_float() (in module bittensor)": [[37, "bittensor.U64_NORMALIZED_FLOAT"]], "w (bittensor.metagraph property)": [[37, "bittensor.metagraph.W"]], "__abs__() (bittensor.balance method)": [[37, "bittensor.Balance.__abs__"], [37, "id49"]], "__add__() (bittensor.balance method)": [[37, "bittensor.Balance.__add__"], [37, "id34"]], "__aenter__() (bittensor.dendrite method)": [[37, "bittensor.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite method)": [[37, "bittensor.dendrite.__aexit__"]], "__archive_entrypoint__ (in module bittensor)": [[37, "bittensor.__archive_entrypoint__"]], "__bellagene_entrypoint__ (in module bittensor)": [[37, "bittensor.__bellagene_entrypoint__"]], "__blocktime__ (in module bittensor)": [[37, "bittensor.__blocktime__"]], "__call__() (bittensor.streamingsynapse.btstreamingresponse method)": [[37, "bittensor.StreamingSynapse.BTStreamingResponse.__call__"]], "__console__ (in module bittensor)": [[37, "bittensor.__console__"]], "__create_parser__() (bittensor.cli static method)": [[37, "bittensor.cli.__create_parser__"]], "__debug_on__ (bittensor.logging attribute)": [[37, "bittensor.logging.__debug_on__"]], "__deepcopy__() (bittensor.config method)": [[37, "bittensor.config.__deepcopy__"]], "__del__() (bittensor.axon method)": [[37, "bittensor.axon.__del__"]], "__del__() (bittensor.dendrite method)": [[37, "bittensor.dendrite.__del__"]], "__delegates_details_url__ (in module bittensor)": [[37, "bittensor.__delegates_details_url__"]], "__eq__() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.__eq__"]], "__eq__() (bittensor.balance method)": [[37, "bittensor.Balance.__eq__"], [37, "id28"]], "__file_sink__ (bittensor.logging attribute)": [[37, "bittensor.logging.__file_sink__"]], "__finney_entrypoint__ (in module bittensor)": [[37, "bittensor.__finney_entrypoint__"]], "__finney_test_entrypoint__ (in module bittensor)": [[37, "bittensor.__finney_test_entrypoint__"]], "__float__() (bittensor.balance method)": [[37, "bittensor.Balance.__float__"], [37, "id22"], [37, "id45"], [37, "id8"]], "__floordiv__() (bittensor.balance method)": [[37, "bittensor.Balance.__floordiv__"], [37, "id42"]], "__ge__() (bittensor.balance method)": [[37, "bittensor.Balance.__ge__"], [37, "id33"]], "__gt__() (bittensor.balance method)": [[37, "bittensor.Balance.__gt__"], [37, "id30"]], "__has_been_inited__ (bittensor.logging attribute)": [[37, "bittensor.logging.__has_been_inited__"]], "__int__() (bittensor.balance method)": [[37, "bittensor.Balance.__int__"], [37, "id21"], [37, "id44"], [37, "id7"]], "__is_set (bittensor.config attribute)": [[37, "bittensor.config.__is_set"]], "__le__() (bittensor.balance method)": [[37, "bittensor.Balance.__le__"], [37, "id32"]], "__local_entrypoint__ (in module bittensor)": [[37, "bittensor.__local_entrypoint__"]], "__lt__() (bittensor.balance method)": [[37, "bittensor.Balance.__lt__"], [37, "id31"]], "__mul__() (bittensor.balance method)": [[37, "bittensor.Balance.__mul__"], [37, "id38"]], "__ne__() (bittensor.balance method)": [[37, "bittensor.Balance.__ne__"], [37, "id29"]], "__neg__() (bittensor.balance method)": [[37, "bittensor.Balance.__neg__"], [37, "id47"]], "__network_explorer_map__ (in module bittensor)": [[37, "bittensor.__network_explorer_map__"]], "__networks__ (in module bittensor)": [[37, "bittensor.__networks__"]], "__new_signature_version__ (in module bittensor)": [[37, "bittensor.__new_signature_version__"]], "__nonzero__() (bittensor.balance method)": [[37, "bittensor.Balance.__nonzero__"], [37, "id46"]], "__parse_args__() (bittensor.config static method)": [[37, "bittensor.config.__parse_args__"]], "__pipaddress__ (in module bittensor)": [[37, "bittensor.__pipaddress__"]], "__pos__() (bittensor.balance method)": [[37, "bittensor.Balance.__pos__"], [37, "id48"]], "__radd__() (bittensor.balance method)": [[37, "bittensor.Balance.__radd__"], [37, "id35"]], "__rao_symbol__ (in module bittensor)": [[37, "bittensor.__rao_symbol__"]], "__repr__() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.__repr__"]], "__repr__() (bittensor.balance method)": [[37, "bittensor.Balance.__repr__"], [37, "id27"]], "__repr__() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.__repr__"]], "__repr__() (bittensor.axon method)": [[37, "bittensor.axon.__repr__"]], "__repr__() (bittensor.config method)": [[37, "bittensor.config.__repr__"]], "__repr__() (bittensor.dendrite method)": [[37, "bittensor.dendrite.__repr__"], [37, "id82"]], "__repr__() (bittensor.keyfile method)": [[37, "bittensor.keyfile.__repr__"]], "__repr__() (bittensor.metagraph method)": [[37, "bittensor.metagraph.__repr__"]], "__repr__() (bittensor.subtensor method)": [[37, "bittensor.subtensor.__repr__"]], "__repr__() (bittensor.wallet method)": [[37, "bittensor.wallet.__repr__"]], "__rfloordiv__() (bittensor.balance method)": [[37, "bittensor.Balance.__rfloordiv__"], [37, "id43"]], "__rich__() (bittensor.balance method)": [[37, "bittensor.Balance.__rich__"], [37, "id24"]], "__rich_rao__() (bittensor.balance method)": [[37, "bittensor.Balance.__rich_rao__"], [37, "id26"]], "__rmul__() (bittensor.balance method)": [[37, "bittensor.Balance.__rmul__"], [37, "id39"]], "__rsub__() (bittensor.balance method)": [[37, "bittensor.Balance.__rsub__"], [37, "id37"]], "__rtruediv__() (bittensor.balance method)": [[37, "bittensor.Balance.__rtruediv__"], [37, "id41"]], "__setattr__() (bittensor.synapse method)": [[37, "bittensor.Synapse.__setattr__"]], "__split_params__() (bittensor.config static method)": [[37, "bittensor.config.__split_params__"]], "__ss58_address_length__ (in module bittensor)": [[37, "bittensor.__ss58_address_length__"]], "__ss58_format__ (in module bittensor)": [[37, "bittensor.__ss58_format__"]], "__std_sink__ (bittensor.logging attribute)": [[37, "bittensor.logging.__std_sink__"]], "__str__() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.__str__"]], "__str__() (bittensor.balance method)": [[37, "bittensor.Balance.__str__"], [37, "id23"]], "__str__() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.__str__"]], "__str__() (bittensor.axon method)": [[37, "bittensor.axon.__str__"]], "__str__() (bittensor.config method)": [[37, "bittensor.config.__str__"]], "__str__() (bittensor.dendrite method)": [[37, "bittensor.dendrite.__str__"], [37, "id81"]], "__str__() (bittensor.keyfile method)": [[37, "bittensor.keyfile.__str__"]], "__str__() (bittensor.metagraph method)": [[37, "bittensor.metagraph.__str__"]], "__str__() (bittensor.subtensor method)": [[37, "bittensor.subtensor.__str__"]], "__str__() (bittensor.wallet method)": [[37, "bittensor.wallet.__str__"]], "__str_rao__() (bittensor.balance method)": [[37, "bittensor.Balance.__str_rao__"], [37, "id25"]], "__sub__() (bittensor.balance method)": [[37, "bittensor.Balance.__sub__"], [37, "id36"]], "__tao_symbol__ (in module bittensor)": [[37, "bittensor.__tao_symbol__"]], "__trace_on__ (bittensor.logging attribute)": [[37, "bittensor.logging.__trace_on__"]], "__truediv__() (bittensor.balance method)": [[37, "bittensor.Balance.__truediv__"], [37, "id40"]], "__type_registry__ (in module bittensor)": [[37, "bittensor.__type_registry__"]], "__use_console__ (in module bittensor)": [[37, "bittensor.__use_console__"]], "__version__ (in module bittensor)": [[37, "bittensor.__version__"]], "__version_as_int__ (in module bittensor)": [[37, "bittensor.__version_as_int__"]], "_adjust_thread_count() (bittensor.prioritythreadpoolexecutor method)": [[37, "bittensor.PriorityThreadPoolExecutor._adjust_thread_count"]], "_assign_neurons() (bittensor.metagraph method)": [[37, "bittensor.metagraph._assign_neurons"]], "_counter (bittensor.prioritythreadpoolexecutor attribute)": [[37, "bittensor.PriorityThreadPoolExecutor._counter"]], "_create_tensor() (bittensor.metagraph method)": [[37, "bittensor.metagraph._create_tensor"]], "_do_associate_ips() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_serve_prometheus"]], "_do_set_delegate_take() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_set_delegate_take"]], "_do_set_weights() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_stake"]], "_do_transfer() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor method)": [[37, "bittensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor method)": [[37, "bittensor.subtensor._encode_params"]], "_extract_dtype (bittensor.tensor attribute)": [[37, "bittensor.Tensor._extract_dtype"]], "_extract_header_size (bittensor.synapse attribute)": [[37, "bittensor.Synapse._extract_header_size"]], "_extract_nonce (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo._extract_process_time"]], "_extract_shape (bittensor.tensor attribute)": [[37, "bittensor.Tensor._extract_shape"]], "_extract_status_code (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse attribute)": [[37, "bittensor.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse attribute)": [[37, "bittensor.Synapse._extract_total_size"]], "_extract_version (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo._extract_version"]], "_format() (bittensor.logging class method)": [[37, "bittensor.logging._format"]], "_get_endpoint_url() (bittensor.dendrite method)": [[37, "bittensor.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite method)": [[37, "bittensor.dendrite._handle_request_errors"]], "_initialize_subtensor() (bittensor.metagraph method)": [[37, "bittensor.metagraph._initialize_subtensor"]], "_initializer_failed() (bittensor.prioritythreadpoolexecutor method)": [[37, "bittensor.PriorityThreadPoolExecutor._initializer_failed"]], "_log_incoming_response() (bittensor.dendrite method)": [[37, "bittensor.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite method)": [[37, "bittensor.dendrite._log_outgoing_request"]], "_may_overwrite() (bittensor.keyfile method)": [[37, "bittensor.keyfile._may_overwrite"]], "_merge() (bittensor.config class method)": [[37, "bittensor.config._merge"]], "_neuron_dict_to_namespace() (bittensor.neuroninfo static method)": [[37, "bittensor.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.neuroninfolite static method)": [[37, "bittensor.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.neuroninfo static method)": [[37, "bittensor.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.neuroninfolite static method)": [[37, "bittensor.NeuronInfoLite._null_neuron"]], "_null_neuron() (bittensor.subtensor static method)": [[37, "bittensor.subtensor._null_neuron"]], "_process_root_weights() (bittensor.metagraph method)": [[37, "bittensor.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph method)": [[37, "bittensor.metagraph._process_weights_or_bonds"]], "_read_keyfile_data_from_file() (bittensor.keyfile method)": [[37, "bittensor.keyfile._read_keyfile_data_from_file"]], "_remove_private_keys() (bittensor.config static method)": [[37, "bittensor.config._remove_private_keys"]], "_set_metagraph_attributes() (bittensor.metagraph method)": [[37, "bittensor.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph method)": [[37, "bittensor.metagraph._set_weights_and_bonds"]], "_write_keyfile_data_to_file() (bittensor.keyfile method)": [[37, "bittensor.keyfile._write_keyfile_data_to_file"]], "aclose_session() (bittensor.dendrite method)": [[37, "bittensor.dendrite.aclose_session"], [37, "id74"]], "active (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.active"]], "active (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.active"]], "activity_cutoff (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.activity_cutoff"]], "add_args() (bittensor.prioritythreadpoolexecutor class method)": [[37, "bittensor.PriorityThreadPoolExecutor.add_args"]], "add_args() (bittensor.axon class method)": [[37, "bittensor.axon.add_args"]], "add_args() (bittensor.logging class method)": [[37, "bittensor.logging.add_args"]], "add_args() (bittensor.subtensor class method)": [[37, "bittensor.subtensor.add_args"]], "add_args() (bittensor.wallet class method)": [[37, "bittensor.wallet.add_args"]], "add_stake() (bittensor.subtensor method)": [[37, "bittensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor method)": [[37, "bittensor.subtensor.add_stake_multiple"]], "addresses (bittensor.metagraph property)": [[37, "bittensor.metagraph.addresses"]], "adjustment_interval (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.adjustment_interval"]], "ask_password_to_encrypt() (in module bittensor)": [[37, "bittensor.ask_password_to_encrypt"]], "associated_validator_ip_info() (bittensor.subtensor method)": [[37, "bittensor.subtensor.associated_validator_ip_info"]], "attach() (bittensor.axon method)": [[37, "bittensor.axon.attach"]], "axon (bittensor.synapse attribute)": [[37, "bittensor.Synapse.axon"]], "axon (class in bittensor)": [[37, "bittensor.axon"]], "axon_info (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.axon_info"]], "axon_info (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.axon_info"]], "axons (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.axons"]], "ayes (bittensor.proposalvotedata attribute)": [[37, "bittensor.ProposalVoteData.ayes"]], "bittensor": [[37, "module-bittensor"]], "block (bittensor.prometheusinfo attribute)": [[37, "bittensor.PrometheusInfo.block"]], "block (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.block"]], "block (bittensor.subtensor property)": [[37, "bittensor.subtensor.block"]], "blocks_since_epoch (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.blocks_since_epoch"]], "blocks_since_epoch() (bittensor.subtensor method)": [[37, "bittensor.subtensor.blocks_since_epoch"]], "body_hash (bittensor.synapse property)": [[37, "bittensor.Synapse.body_hash"]], "bonds (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.bonds"]], "bonds() (bittensor.subtensor method)": [[37, "bittensor.subtensor.bonds"]], "bonds_moving_avg (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.bonds_moving_avg"]], "buffer (bittensor.tensor attribute)": [[37, "bittensor.Tensor.buffer"], [37, "id62"]], "burn (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.burn"]], "burn() (bittensor.subtensor method)": [[37, "bittensor.subtensor.burn"]], "burned_register() (bittensor.subtensor method)": [[37, "bittensor.subtensor.burned_register"]], "call() (bittensor.dendrite method)": [[37, "bittensor.dendrite.call"], [37, "id77"]], "call_stream() (bittensor.dendrite method)": [[37, "bittensor.dendrite.call_stream"], [37, "id78"]], "cast_dtype() (in module bittensor)": [[37, "bittensor.cast_dtype"]], "cast_float() (in module bittensor)": [[37, "bittensor.cast_float"]], "cast_int() (in module bittensor)": [[37, "bittensor.cast_int"]], "cast_shape() (in module bittensor)": [[37, "bittensor.cast_shape"]], "chain_endpoint (bittensor.subtensor attribute)": [[37, "bittensor.subtensor.chain_endpoint"]], "check_and_update_encryption() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile method)": [[37, "bittensor.keyfile.check_and_update_encryption"]], "check_config() (bittensor.axon class method)": [[37, "bittensor.axon.check_config"]], "check_config() (bittensor.cli static method)": [[37, "bittensor.cli.check_config"]], "check_config() (bittensor.logging class method)": [[37, "bittensor.logging.check_config"]], "cli (class in bittensor)": [[37, "bittensor.cli"]], "close_session() (bittensor.dendrite method)": [[37, "bittensor.dendrite.close_session"], [37, "id73"]], "coldkey (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.coldkey"]], "coldkey (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.coldkey"]], "coldkey (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.coldkey"]], "coldkey (bittensor.wallet property)": [[37, "bittensor.wallet.coldkey"]], "coldkey_file (bittensor.wallet property)": [[37, "bittensor.wallet.coldkey_file"]], "coldkey_ss58 (bittensor.stakeinfo attribute)": [[37, "bittensor.StakeInfo.coldkey_ss58"]], "coldkeypub (bittensor.wallet property)": [[37, "bittensor.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet property)": [[37, "bittensor.wallet.coldkeypub_file"]], "coldkeys (bittensor.metagraph property)": [[37, "bittensor.metagraph.coldkeys"]], "computed_body_hash (bittensor.synapse attribute)": [[37, "bittensor.Synapse.computed_body_hash"]], "config (class in bittensor)": [[37, "bittensor.config"]], "config() (bittensor.prioritythreadpoolexecutor class method)": [[37, "bittensor.PriorityThreadPoolExecutor.config"]], "config() (bittensor.axon class method)": [[37, "bittensor.axon.config"]], "config() (bittensor.logging class method)": [[37, "bittensor.logging.config"]], "config() (bittensor.subtensor static method)": [[37, "bittensor.subtensor.config"]], "config() (bittensor.wallet class method)": [[37, "bittensor.wallet.config"]], "configs (in module bittensor)": [[37, "bittensor.configs"]], "connection_requirements (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.connection_requirements"]], "consensus (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.consensus"]], "consensus (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.consensus"]], "copy() (bittensor.config method)": [[37, "bittensor.config.copy"]], "create() (bittensor.wallet method)": [[37, "bittensor.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet method)": [[37, "bittensor.wallet.create_coldkey_from_uri"]], "create_config() (bittensor.cli static method)": [[37, "bittensor.cli.create_config"]], "create_hotkey_from_uri() (bittensor.wallet method)": [[37, "bittensor.wallet.create_hotkey_from_uri"]], "create_identity_dict() (in module bittensor)": [[37, "bittensor.create_identity_dict"]], "create_if_non_existent() (bittensor.wallet method)": [[37, "bittensor.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet method)": [[37, "bittensor.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet method)": [[37, "bittensor.wallet.create_new_hotkey"]], "create_pow() (in module bittensor)": [[37, "bittensor.create_pow"]], "create_streaming_response() (bittensor.streamingsynapse method)": [[37, "bittensor.StreamingSynapse.create_streaming_response"]], "custom_rpc_type_registry (in module bittensor)": [[37, "bittensor.custom_rpc_type_registry"]], "data (bittensor.mockkeyfile property)": [[37, "bittensor.Mockkeyfile.data"]], "data (bittensor.keyfile property)": [[37, "bittensor.keyfile.data"]], "debug() (bittensor.logging class method)": [[37, "bittensor.logging.debug"]], "debug() (in module bittensor)": [[37, "bittensor.debug"]], "decode_hex_identity_dict() (in module bittensor)": [[37, "bittensor.decode_hex_identity_dict"]], "decrypt() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile method)": [[37, "bittensor.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor)": [[37, "bittensor.decrypt_keyfile_data"]], "default() (bittensor.defaultconfig class method)": [[37, "bittensor.DefaultConfig.default"]], "default_verify() (bittensor.axon method)": [[37, "bittensor.axon.default_verify"]], "defaults (in module bittensor)": [[37, "bittensor.defaults"]], "delegate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.delegate"]], "delegated_list_from_vec_u8() (bittensor.delegateinfo class method)": [[37, "bittensor.DelegateInfo.delegated_list_from_vec_u8"]], "dendrite (bittensor.synapse attribute)": [[37, "bittensor.Synapse.dendrite"]], "dendrite (class in bittensor)": [[37, "bittensor.dendrite"]], "deserialize() (bittensor.synapse method)": [[37, "bittensor.Synapse.deserialize"]], "deserialize() (bittensor.tensor method)": [[37, "bittensor.Tensor.deserialize"]], "deserialize_keypair_from_keyfile_data() (in module bittensor)": [[37, "bittensor.deserialize_keypair_from_keyfile_data"]], "determine_chain_endpoint_and_network() (bittensor.subtensor static method)": [[37, "bittensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.difficulty"]], "difficulty() (bittensor.subtensor method)": [[37, "bittensor.subtensor.difficulty"]], "display_mnemonic_msg() (in module bittensor)": [[37, "bittensor.display_mnemonic_msg"]], "dividends (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.dividends"]], "dividends (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.dividends"]], "does_hotkey_exist() (bittensor.subtensor method)": [[37, "bittensor.subtensor.does_hotkey_exist"]], "dtype (bittensor.tensor attribute)": [[37, "bittensor.Tensor.dtype"], [37, "id63"]], "emission (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.emission"]], "emission (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.emission"]], "emission_value (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.emission_value"]], "encode() (bittensor.ipinfo method)": [[37, "bittensor.IPInfo.encode"]], "encrypt() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile method)": [[37, "bittensor.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor)": [[37, "bittensor.encrypt_keyfile_data"]], "end (bittensor.proposalvotedata attribute)": [[37, "bittensor.ProposalVoteData.end"]], "error() (bittensor.logging class method)": [[37, "bittensor.logging.error"]], "exception() (bittensor.logging class method)": [[37, "bittensor.logging.exception"]], "exists_on_device() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile method)": [[37, "bittensor.keyfile.exists_on_device"]], "external_ip (bittensor.dendrite attribute)": [[37, "bittensor.dendrite.external_ip"]], "extract_response_json() (bittensor.streamingsynapse method)": [[37, "bittensor.StreamingSynapse.extract_response_json"]], "failed_verification (bittensor.synapse property)": [[37, "bittensor.Synapse.failed_verification"]], "fix_decoded_values() (bittensor.delegateinfo class method)": [[37, "bittensor.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.ipinfo class method)": [[37, "bittensor.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfo class method)": [[37, "bittensor.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfolite class method)": [[37, "bittensor.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.prometheusinfo class method)": [[37, "bittensor.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.stakeinfo class method)": [[37, "bittensor.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnethyperparameters class method)": [[37, "bittensor.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnetinfo class method)": [[37, "bittensor.SubnetInfo.fix_decoded_values"]], "forward() (bittensor.dendrite method)": [[37, "bittensor.dendrite.forward"], [37, "id76"]], "from_float() (bittensor.balance static method)": [[37, "bittensor.Balance.from_float"], [37, "id50"]], "from_headers() (bittensor.synapse class method)": [[37, "bittensor.Synapse.from_headers"]], "from_neuron_info() (bittensor.axoninfo class method)": [[37, "bittensor.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.axoninfo class method)": [[37, "bittensor.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.ipinfo class method)": [[37, "bittensor.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnethyperparameters class method)": [[37, "bittensor.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnetinfo class method)": [[37, "bittensor.SubnetInfo.from_parameter_dict"]], "from_rao() (bittensor.balance static method)": [[37, "bittensor.Balance.from_rao"], [37, "id52"]], "from_scale_encoding() (in module bittensor)": [[37, "bittensor.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor)": [[37, "bittensor.from_scale_encoding_using_type_string"]], "from_string() (bittensor.axoninfo class method)": [[37, "bittensor.AxonInfo.from_string"]], "from_tao() (bittensor.balance static method)": [[37, "bittensor.Balance.from_tao"], [37, "id51"]], "from_vec_u8() (bittensor.delegateinfo class method)": [[37, "bittensor.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.ipinfo class method)": [[37, "bittensor.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfo class method)": [[37, "bittensor.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfolite class method)": [[37, "bittensor.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.stakeinfo class method)": [[37, "bittensor.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.subnethyperparameters class method)": [[37, "bittensor.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.subnetinfo class method)": [[37, "bittensor.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.neuroninfo class method)": [[37, "bittensor.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "get_all_neurons_for_pubkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_block_hash"]], "get_coldkey() (bittensor.wallet method)": [[37, "bittensor.wallet.get_coldkey"]], "get_coldkey_password_from_environment() (in module bittensor)": [[37, "bittensor.get_coldkey_password_from_environment"]], "get_coldkeypub() (bittensor.wallet method)": [[37, "bittensor.wallet.get_coldkeypub"]], "get_current_block() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_existential_deposit"]], "get_explorer_root_url_by_network_from_map() (in module bittensor)": [[37, "bittensor.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor)": [[37, "bittensor.get_explorer_url_for_network"]], "get_hotkey() (bittensor.wallet method)": [[37, "bittensor.wallet.get_hotkey"]], "get_hotkey_owner() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_hotkey_owner"]], "get_keypair() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile method)": [[37, "bittensor.keyfile.get_keypair"]], "get_level() (bittensor.logging class method)": [[37, "bittensor.logging.get_level"]], "get_netuids_for_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor attribute)": [[37, "bittensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_senate_members"]], "get_size() (in module bittensor)": [[37, "bittensor.get_size"]], "get_ss58_format() (in module bittensor)": [[37, "bittensor.get_ss58_format"]], "get_stake() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_subnets"]], "get_total_size() (bittensor.synapse method)": [[37, "bittensor.Synapse.get_total_size"]], "get_total_stake_for_coldkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor method)": [[37, "bittensor.subtensor.get_vote_data"]], "hash() (in module bittensor)": [[37, "bittensor.hash"]], "header_size (bittensor.synapse attribute)": [[37, "bittensor.Synapse.header_size"]], "help() (bittensor.axon class method)": [[37, "bittensor.axon.help"]], "help() (bittensor.logging class method)": [[37, "bittensor.logging.help"]], "help() (bittensor.subtensor class method)": [[37, "bittensor.subtensor.help"]], "help() (bittensor.wallet class method)": [[37, "bittensor.wallet.help"]], "hotkey (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.hotkey"]], "hotkey (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.hotkey"]], "hotkey (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.hotkey"]], "hotkey (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.hotkey"]], "hotkey (bittensor.wallet property)": [[37, "bittensor.wallet.hotkey"]], "hotkey_file (bittensor.wallet property)": [[37, "bittensor.wallet.hotkey_file"]], "hotkey_ss58 (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.stakeinfo attribute)": [[37, "bittensor.StakeInfo.hotkey_ss58"]], "hotkeys (bittensor.metagraph property)": [[37, "bittensor.metagraph.hotkeys"]], "immunity_period (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.immunity_period"]], "immunity_period() (bittensor.subtensor method)": [[37, "bittensor.subtensor.immunity_period"]], "incentive (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.incentive"]], "incentive (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.incentive"]], "incentive() (bittensor.subtensor method)": [[37, "bittensor.subtensor.incentive"]], "index (bittensor.proposalvotedata attribute)": [[37, "bittensor.ProposalVoteData.index"]], "info() (bittensor.axon method)": [[37, "bittensor.axon.info"]], "info() (bittensor.logging class method)": [[37, "bittensor.logging.info"]], "ip (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.ip"]], "ip (bittensor.ipinfo attribute)": [[37, "bittensor.IPInfo.ip"]], "ip (bittensor.prometheusinfo attribute)": [[37, "bittensor.PrometheusInfo.ip"]], "ip (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.ip"]], "ip_str() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.ip_str"]], "ip_type (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.ip_type"]], "ip_type (bittensor.ipinfo attribute)": [[37, "bittensor.IPInfo.ip_type"]], "ip_type (bittensor.prometheusinfo attribute)": [[37, "bittensor.PrometheusInfo.ip_type"]], "is_blacklist (bittensor.synapse property)": [[37, "bittensor.Synapse.is_blacklist"]], "is_empty (bittensor.prioritythreadpoolexecutor property)": [[37, "bittensor.PriorityThreadPoolExecutor.is_empty"]], "is_encrypted() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile method)": [[37, "bittensor.keyfile.is_encrypted"]], "is_failure (bittensor.synapse property)": [[37, "bittensor.Synapse.is_failure"]], "is_hotkey_delegate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor method)": [[37, "bittensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor method)": [[37, "bittensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.is_hotkey_registered_on_subnet"]], "is_null (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.is_null"]], "is_null (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.is_null"]], "is_readable() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile method)": [[37, "bittensor.keyfile.is_readable"]], "is_senate_member() (bittensor.subtensor method)": [[37, "bittensor.subtensor.is_senate_member"]], "is_serving (bittensor.axoninfo property)": [[37, "bittensor.AxonInfo.is_serving"]], "is_set() (bittensor.config method)": [[37, "bittensor.config.is_set"]], "is_success (bittensor.synapse property)": [[37, "bittensor.Synapse.is_success"]], "is_timeout (bittensor.synapse property)": [[37, "bittensor.Synapse.is_timeout"]], "is_valid_bittensor_address_or_public_key() (in module bittensor)": [[37, "bittensor.is_valid_bittensor_address_or_public_key"], [37, "id1"]], "is_valid_ed25519_pubkey() (in module bittensor)": [[37, "bittensor.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor)": [[37, "bittensor.is_valid_ss58_address"]], "is_writable() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile method)": [[37, "bittensor.keyfile.is_writable"]], "kappa (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.kappa"]], "kappa (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.kappa"]], "kappa() (bittensor.subtensor method)": [[37, "bittensor.subtensor.kappa"]], "keyfile (class in bittensor)": [[37, "bittensor.keyfile"]], "keyfile_data (bittensor.keyfile property)": [[37, "bittensor.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor)": [[37, "bittensor.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor)": [[37, "bittensor.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor)": [[37, "bittensor.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor)": [[37, "bittensor.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor)": [[37, "bittensor.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.mockkeyfile property)": [[37, "bittensor.Mockkeyfile.keypair"]], "keypair (bittensor.dendrite attribute)": [[37, "bittensor.dendrite.keypair"]], "keypair (bittensor.keyfile property)": [[37, "bittensor.keyfile.keypair"]], "last_update (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.last_update"]], "last_update (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.last_update"]], "leave_senate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.leave_senate"]], "legacy_encrypt_keyfile_data() (in module bittensor)": [[37, "bittensor.legacy_encrypt_keyfile_data"]], "list_from_vec_u8() (bittensor.delegateinfo class method)": [[37, "bittensor.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.ipinfo class method)": [[37, "bittensor.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfo class method)": [[37, "bittensor.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfolite class method)": [[37, "bittensor.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.stakeinfo class method)": [[37, "bittensor.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnethyperparameters class method)": [[37, "bittensor.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnetinfo class method)": [[37, "bittensor.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.stakeinfo class method)": [[37, "bittensor.StakeInfo.list_of_tuple_from_vec_u8"]], "load() (bittensor.metagraph method)": [[37, "bittensor.metagraph.load"]], "load_from_path() (bittensor.metagraph method)": [[37, "bittensor.metagraph.load_from_path"]], "log_filter() (bittensor.logging class method)": [[37, "bittensor.logging.log_filter"]], "log_formatter() (bittensor.logging class method)": [[37, "bittensor.logging.log_formatter"]], "log_save_filter() (bittensor.logging class method)": [[37, "bittensor.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging class method)": [[37, "bittensor.logging.log_save_formatter"]], "logging (class in bittensor)": [[37, "bittensor.logging"]], "make_dirs() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile method)": [[37, "bittensor.keyfile.make_dirs"]], "max_allowed_validators (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.max_allowed_validators"]], "max_allowed_validators() (bittensor.subtensor method)": [[37, "bittensor.subtensor.max_allowed_validators"]], "max_burn (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.max_n"]], "max_n() (bittensor.subtensor method)": [[37, "bittensor.subtensor.max_n"]], "max_regs_per_block (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.max_weight_limit"]], "max_weight_limit() (bittensor.subtensor method)": [[37, "bittensor.subtensor.max_weight_limit"]], "merge() (bittensor.config method)": [[37, "bittensor.config.merge"]], "merge_all() (bittensor.config class method)": [[37, "bittensor.config.merge_all"]], "metadata() (bittensor.metagraph method)": [[37, "bittensor.metagraph.metadata"]], "metagraph (class in bittensor)": [[37, "bittensor.metagraph"]], "metagraph() (bittensor.subtensor method)": [[37, "bittensor.subtensor.metagraph"]], "min_allowed_weights (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.min_allowed_weights"]], "min_allowed_weights() (bittensor.subtensor method)": [[37, "bittensor.subtensor.min_allowed_weights"]], "min_burn (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.modality"]], "n (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.n"]], "name (bittensor.synapse attribute)": [[37, "bittensor.Synapse.name"]], "nays (bittensor.proposalvotedata attribute)": [[37, "bittensor.ProposalVoteData.nays"]], "netuid (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.netuid"]], "netuid (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.netuid"]], "netuid (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.netuid"]], "netuid (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.netuid"]], "network (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.network"]], "network (bittensor.subtensor attribute)": [[37, "bittensor.subtensor.network"]], "neuron_for_uid() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor method)": [[37, "bittensor.subtensor.neurons_lite"]], "new_coldkey() (bittensor.wallet method)": [[37, "bittensor.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet method)": [[37, "bittensor.wallet.new_hotkey"]], "nominate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.nominate"]], "nominators (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.nominators"]], "nonce (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.nonce"]], "numpy() (bittensor.tensor method)": [[37, "bittensor.Tensor.numpy"]], "owner_ss58 (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.owner_ss58"]], "parse_headers_to_inputs() (bittensor.synapse class method)": [[37, "bittensor.Synapse.parse_headers_to_inputs"]], "placeholder1 (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.placeholder1"]], "placeholder2 (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.placeholder2"]], "port (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.port"]], "port (bittensor.prometheusinfo attribute)": [[37, "bittensor.PrometheusInfo.port"]], "port (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.port"]], "preprocess_synapse_for_request() (bittensor.dendrite method)": [[37, "bittensor.dendrite.preprocess_synapse_for_request"], [37, "id79"]], "process_server_response() (bittensor.dendrite method)": [[37, "bittensor.dendrite.process_server_response"], [37, "id80"]], "process_streaming_response() (bittensor.streamingsynapse method)": [[37, "bittensor.StreamingSynapse.process_streaming_response"]], "process_time (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.process_time"]], "prometheus_info (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.protocol"]], "protocol (bittensor.ipinfo attribute)": [[37, "bittensor.IPInfo.protocol"]], "pruning_score (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.pruning_score"]], "pruning_score (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.pruning_score"]], "query() (bittensor.dendrite method)": [[37, "bittensor.dendrite.query"], [37, "id75"]], "query_constant() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_constant"]], "query_identity() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_identity"]], "query_map() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor method)": [[37, "bittensor.subtensor.query_subtensor"]], "rank (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.rank"]], "rank (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.rank"]], "rao (bittensor.balance attribute)": [[37, "bittensor.Balance.rao"], [37, "id14"], [37, "id19"], [37, "id5"]], "rao_unit (bittensor.balance attribute)": [[37, "bittensor.Balance.rao_unit"], [37, "id13"], [37, "id18"], [37, "id4"]], "recreate() (bittensor.wallet method)": [[37, "bittensor.wallet.recreate"]], "regen_coldkey (bittensor.wallet attribute)": [[37, "bittensor.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet attribute)": [[37, "bittensor.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet attribute)": [[37, "bittensor.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet method)": [[37, "bittensor.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet method)": [[37, "bittensor.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet method)": [[37, "bittensor.wallet.regenerate_hotkey"]], "register() (bittensor.subtensor method)": [[37, "bittensor.subtensor.register"]], "register_senate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor method)": [[37, "bittensor.subtensor.register_subnetwork"]], "registration_allowed (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.registrations"]], "required_hash_fields (bittensor.synapse attribute)": [[37, "bittensor.Synapse.required_hash_fields"]], "return_per_1000 (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.return_per_1000"]], "rho (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.rho"]], "rho (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.rho"]], "rho() (bittensor.subtensor method)": [[37, "bittensor.subtensor.rho"]], "root_register() (bittensor.subtensor method)": [[37, "bittensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor method)": [[37, "bittensor.subtensor.root_set_weights"]], "run() (bittensor.cli method)": [[37, "bittensor.cli.run"]], "run_faucet() (bittensor.subtensor method)": [[37, "bittensor.subtensor.run_faucet"]], "save() (bittensor.metagraph method)": [[37, "bittensor.metagraph.save"]], "scaling_law_power (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.scaling_law_power"]], "scaling_law_power() (bittensor.subtensor method)": [[37, "bittensor.subtensor.scaling_law_power"]], "serialize() (bittensor.tensor static method)": [[37, "bittensor.Tensor.serialize"]], "serialized_keypair_to_keyfile_data() (in module bittensor)": [[37, "bittensor.serialized_keypair_to_keyfile_data"]], "serve() (bittensor.axon method)": [[37, "bittensor.axon.serve"]], "serve() (bittensor.subtensor method)": [[37, "bittensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor method)": [[37, "bittensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor method)": [[37, "bittensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor method)": [[37, "bittensor.subtensor.serving_rate_limit"]], "session (bittensor.dendrite property)": [[37, "bittensor.dendrite.session"]], "set_coldkey() (bittensor.wallet method)": [[37, "bittensor.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet method)": [[37, "bittensor.wallet.set_coldkeypub"]], "set_debug() (bittensor.logging class method)": [[37, "bittensor.logging.set_debug"]], "set_delegate_take() (bittensor.subtensor method)": [[37, "bittensor.subtensor.set_delegate_take"]], "set_hotkey() (bittensor.wallet method)": [[37, "bittensor.wallet.set_hotkey"]], "set_hyperparameter() (bittensor.subtensor method)": [[37, "bittensor.subtensor.set_hyperparameter"]], "set_keypair() (bittensor.mockkeyfile method)": [[37, "bittensor.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile method)": [[37, "bittensor.keyfile.set_keypair"]], "set_name_type() (bittensor.synapse method)": [[37, "bittensor.Synapse.set_name_type"]], "set_trace() (bittensor.logging class method)": [[37, "bittensor.logging.set_trace"]], "set_weights() (bittensor.subtensor method)": [[37, "bittensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor static method)": [[37, "bittensor.subtensor.setup_config"]], "shape (bittensor.tensor attribute)": [[37, "bittensor.Tensor.shape"], [37, "id64"]], "shutdown() (bittensor.prioritythreadpoolexecutor method)": [[37, "bittensor.PriorityThreadPoolExecutor.shutdown"]], "signature (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.signature"]], "ss58_address_to_bytes() (in module bittensor)": [[37, "bittensor.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor)": [[37, "bittensor.ss58_to_vec_u8"]], "stake (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.stake"]], "stake (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.stake"]], "stake (bittensor.stakeinfo attribute)": [[37, "bittensor.StakeInfo.stake"]], "stake_dict (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.stake_dict"]], "stake_dict (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.stake_dict"]], "start() (bittensor.axon method)": [[37, "bittensor.axon.start"]], "state_call() (bittensor.subtensor method)": [[37, "bittensor.subtensor.state_call"]], "status_code (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.status_code"]], "status_message (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.status_message"]], "stop() (bittensor.axon method)": [[37, "bittensor.axon.stop"]], "stream_response() (bittensor.streamingsynapse.btstreamingresponse method)": [[37, "bittensor.StreamingSynapse.BTStreamingResponse.stream_response"]], "strtobool() (in module bittensor)": [[37, "bittensor.strtobool"]], "strtobool_with_default() (in module bittensor)": [[37, "bittensor.strtobool_with_default"]], "submit() (bittensor.prioritythreadpoolexecutor method)": [[37, "bittensor.PriorityThreadPoolExecutor.submit"]], "subnet_exists() (bittensor.subtensor method)": [[37, "bittensor.subtensor.subnet_exists"]], "subnetwork_n (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.subnetwork_n"]], "subnetwork_n() (bittensor.subtensor method)": [[37, "bittensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor)": [[37, "bittensor.subtensor"]], "success() (bittensor.logging class method)": [[37, "bittensor.logging.success"]], "synapse_history (bittensor.dendrite attribute)": [[37, "bittensor.dendrite.synapse_history"]], "sync() (bittensor.metagraph method)": [[37, "bittensor.metagraph.sync"]], "synergy_scaling_law_power() (bittensor.subtensor method)": [[37, "bittensor.subtensor.synergy_scaling_law_power"]], "take (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.take"]], "tao (bittensor.balance attribute)": [[37, "bittensor.Balance.tao"], [37, "id15"], [37, "id20"], [37, "id6"]], "tao (bittensor.balance property)": [[37, "id16"], [37, "id2"]], "target_regs_per_interval (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.tempo"]], "tempo (bittensor.subnetinfo attribute)": [[37, "bittensor.SubnetInfo.tempo"]], "tempo() (bittensor.subtensor method)": [[37, "bittensor.subtensor.tempo"]], "tensor() (bittensor.tensor method)": [[37, "bittensor.Tensor.tensor"]], "threshold (bittensor.proposalvotedata attribute)": [[37, "bittensor.ProposalVoteData.threshold"]], "timeout (bittensor.synapse attribute)": [[37, "bittensor.Synapse.timeout"]], "to_headers() (bittensor.synapse method)": [[37, "bittensor.Synapse.to_headers"]], "to_parameter_dict() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.ipinfo method)": [[37, "bittensor.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnethyperparameters method)": [[37, "bittensor.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnetinfo method)": [[37, "bittensor.SubnetInfo.to_parameter_dict"]], "to_string() (bittensor.axoninfo method)": [[37, "bittensor.AxonInfo.to_string"]], "to_string() (bittensor.axon method)": [[37, "bittensor.axon.to_string"]], "to_string() (bittensor.config method)": [[37, "bittensor.config.to_string"]], "token_streamer (bittensor.btstreamingresponsemodel attribute)": [[37, "bittensor.BTStreamingResponseModel.token_streamer"], [37, "id61"]], "tolist() (bittensor.tensor method)": [[37, "bittensor.Tensor.tolist"]], "total_daily_return (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.total_daily_return"]], "total_issuance() (bittensor.subtensor method)": [[37, "bittensor.subtensor.total_issuance"]], "total_size (bittensor.synapse attribute)": [[37, "bittensor.Synapse.total_size"]], "total_stake (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.total_stake"]], "total_stake (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.total_stake"]], "total_stake (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.total_stake"]], "total_stake() (bittensor.subtensor method)": [[37, "bittensor.subtensor.total_stake"]], "trace() (bittensor.logging class method)": [[37, "bittensor.logging.trace"]], "trace() (in module bittensor)": [[37, "bittensor.trace"]], "transfer() (bittensor.subtensor method)": [[37, "bittensor.subtensor.transfer"]], "trust (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.trust"]], "trust (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.trust"]], "turn_console_off() (in module bittensor)": [[37, "bittensor.turn_console_off"]], "turn_console_on() (in module bittensor)": [[37, "bittensor.turn_console_on"]], "tx_rate_limit() (bittensor.subtensor method)": [[37, "bittensor.subtensor.tx_rate_limit"]], "u8_key_to_ss58() (in module bittensor)": [[37, "bittensor.u8_key_to_ss58"]], "uid (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.uid"]], "uid (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.uid"]], "unbiased_topk() (in module bittensor)": [[37, "bittensor.unbiased_topk"]], "undelegate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.undelegate"]], "unit (bittensor.balance attribute)": [[37, "bittensor.Balance.unit"], [37, "id12"], [37, "id17"], [37, "id3"]], "unstake() (bittensor.subtensor method)": [[37, "bittensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor method)": [[37, "bittensor.subtensor.unstake_multiple"]], "update_identity() (bittensor.subtensor method)": [[37, "bittensor.subtensor.update_identity"]], "update_with_kwargs() (bittensor.config method)": [[37, "bittensor.config.update_with_kwargs"]], "uuid (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.uuid"]], "validate_assignment (bittensor.streamingsynapse.config attribute)": [[37, "bittensor.StreamingSynapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.config attribute)": [[37, "bittensor.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.tensor.config attribute)": [[37, "bittensor.Tensor.Config.validate_assignment"]], "validate_assignment (bittensor.terminalinfo.config attribute)": [[37, "bittensor.TerminalInfo.Config.validate_assignment"]], "validate_password() (in module bittensor)": [[37, "bittensor.validate_password"]], "validator_batch_size() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_logits_divergence"]], "validator_permit (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.validator_permit"]], "validator_permit (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.delegateinfo attribute)": [[37, "bittensor.DelegateInfo.validator_permits"]], "validator_prune_len() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor method)": [[37, "bittensor.subtensor.validator_sequence_length"]], "validator_trust (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.validator_trust"]], "validator_trust (bittensor.neuroninfolite attribute)": [[37, "bittensor.NeuronInfoLite.validator_trust"]], "verify_body_integrity() (bittensor.axon method)": [[37, "bittensor.axon.verify_body_integrity"]], "version (bittensor.axoninfo attribute)": [[37, "bittensor.AxonInfo.version"]], "version (bittensor.prometheusinfo attribute)": [[37, "bittensor.PrometheusInfo.version"]], "version (bittensor.terminalinfo attribute)": [[37, "bittensor.TerminalInfo.version"]], "version (bittensor.metagraph attribute)": [[37, "bittensor.metagraph.version"]], "version_checking() (in module bittensor)": [[37, "bittensor.version_checking"]], "version_split (in module bittensor)": [[37, "bittensor.version_split"]], "vote_senate() (bittensor.subtensor method)": [[37, "bittensor.subtensor.vote_senate"]], "wallet (class in bittensor)": [[37, "bittensor.wallet"]], "warning() (bittensor.logging class method)": [[37, "bittensor.logging.warning"]], "weights (bittensor.neuroninfo attribute)": [[37, "bittensor.NeuronInfo.weights"]], "weights() (bittensor.subtensor method)": [[37, "bittensor.subtensor.weights"]], "weights_rate_limit (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.subnethyperparameters attribute)": [[37, "bittensor.SubnetHyperparameters.weights_version"]], "mockkeyfile (class in bittensor.keyfile)": [[38, "bittensor.keyfile.Mockkeyfile"]], "nacl_salt (in module bittensor.keyfile)": [[38, "bittensor.keyfile.NACL_SALT"]], "__repr__() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.__repr__"]], "__repr__() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.__repr__"]], "__str__() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.__str__"]], "__str__() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.__str__"]], "_may_overwrite() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile._may_overwrite"]], "_read_keyfile_data_from_file() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile._read_keyfile_data_from_file"]], "_write_keyfile_data_to_file() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile._write_keyfile_data_to_file"]], "ask_password_to_encrypt() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.ask_password_to_encrypt"]], "bittensor.keyfile": [[38, "module-bittensor.keyfile"]], "check_and_update_encryption() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.check_and_update_encryption"]], "data (bittensor.keyfile.mockkeyfile property)": [[38, "bittensor.keyfile.Mockkeyfile.data"]], "data (bittensor.keyfile.keyfile property)": [[38, "bittensor.keyfile.keyfile.data"]], "decrypt() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.decrypt_keyfile_data"]], "deserialize_keypair_from_keyfile_data() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.deserialize_keypair_from_keyfile_data"]], "encrypt() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.encrypt_keyfile_data"]], "exists_on_device() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.exists_on_device"]], "get_coldkey_password_from_environment() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.get_coldkey_password_from_environment"]], "get_keypair() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.get_keypair"]], "is_encrypted() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.is_encrypted"]], "is_readable() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.is_readable"]], "is_writable() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.is_writable"]], "keyfile (class in bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile"]], "keyfile_data (bittensor.keyfile.keyfile property)": [[38, "bittensor.keyfile.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.keyfile.mockkeyfile property)": [[38, "bittensor.keyfile.Mockkeyfile.keypair"]], "keypair (bittensor.keyfile.keyfile property)": [[38, "bittensor.keyfile.keyfile.keypair"]], "legacy_encrypt_keyfile_data() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.legacy_encrypt_keyfile_data"]], "make_dirs() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.make_dirs"]], "serialized_keypair_to_keyfile_data() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.serialized_keypair_to_keyfile_data"]], "set_keypair() (bittensor.keyfile.mockkeyfile method)": [[38, "bittensor.keyfile.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile.keyfile method)": [[38, "bittensor.keyfile.keyfile.set_keypair"]], "validate_password() (in module bittensor.keyfile)": [[38, "bittensor.keyfile.validate_password"]], "b (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.B"]], "c (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.C"]], "d (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.D"]], "e (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.E"]], "i (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.I"]], "r (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.R"]], "s (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.S"]], "t (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.T"]], "tv (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.Tv"]], "w (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.W"]], "__repr__() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.__repr__"]], "__str__() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.__str__"]], "_assign_neurons() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._assign_neurons"]], "_create_tensor() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._create_tensor"]], "_initialize_subtensor() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._initialize_subtensor"]], "_process_root_weights() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._process_weights_or_bonds"]], "_set_metagraph_attributes() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph._set_weights_and_bonds"]], "addresses (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.addresses"]], "axons (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.axons"]], "bittensor.metagraph": [[39, "module-bittensor.metagraph"]], "block (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.block"]], "coldkeys (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.coldkeys"]], "get_save_dir() (in module bittensor.metagraph)": [[39, "bittensor.metagraph.get_save_dir"]], "hotkeys (bittensor.metagraph.metagraph property)": [[39, "bittensor.metagraph.metagraph.hotkeys"]], "latest_block_path() (in module bittensor.metagraph)": [[39, "bittensor.metagraph.latest_block_path"]], "load() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.load"]], "load_from_path() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.load_from_path"]], "metadata() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.metadata"]], "metagraph (class in bittensor.metagraph)": [[39, "bittensor.metagraph.metagraph"]], "n (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.n"]], "netuid (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.netuid"]], "network (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.network"]], "save() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.save"]], "sync() (bittensor.metagraph.metagraph method)": [[39, "bittensor.metagraph.metagraph.sync"]], "version (bittensor.metagraph.metagraph attribute)": [[39, "bittensor.metagraph.metagraph.version"]], "btstreamingresponsemodel (class in bittensor.stream)": [[40, "bittensor.stream.BTStreamingResponseModel"]], "streamingsynapse (class in bittensor.stream)": [[40, "bittensor.stream.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor.stream)": [[40, "bittensor.stream.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor.stream)": [[40, "bittensor.stream.StreamingSynapse.Config"]], "__call__() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[40, "bittensor.stream.StreamingSynapse.BTStreamingResponse.__call__"]], "bittensor.stream": [[40, "module-bittensor.stream"]], "create_streaming_response() (bittensor.stream.streamingsynapse method)": [[40, "bittensor.stream.StreamingSynapse.create_streaming_response"]], "extract_response_json() (bittensor.stream.streamingsynapse method)": [[40, "bittensor.stream.StreamingSynapse.extract_response_json"]], "process_streaming_response() (bittensor.stream.streamingsynapse method)": [[40, "bittensor.stream.StreamingSynapse.process_streaming_response"]], "stream_response() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[40, "bittensor.stream.StreamingSynapse.BTStreamingResponse.stream_response"]], "token_streamer (bittensor.stream.btstreamingresponsemodel attribute)": [[40, "bittensor.stream.BTStreamingResponseModel.token_streamer"], [40, "id0"]], "validate_assignment (bittensor.stream.streamingsynapse.config attribute)": [[40, "bittensor.stream.StreamingSynapse.Config.validate_assignment"]], "paramwithtypes (class in bittensor.subtensor)": [[41, "bittensor.subtensor.ParamWithTypes"]], "__repr__() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.__repr__"]], "__str__() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.__str__"]], "_do_associate_ips() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_serve_prometheus"]], "_do_set_delegate_take() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_set_delegate_take"]], "_do_set_weights() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_stake"]], "_do_transfer() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor._encode_params"]], "_null_neuron() (bittensor.subtensor.subtensor static method)": [[41, "bittensor.subtensor.subtensor._null_neuron"]], "add_args() (bittensor.subtensor.subtensor class method)": [[41, "bittensor.subtensor.subtensor.add_args"]], "add_stake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.add_stake_multiple"]], "associated_validator_ip_info() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.associated_validator_ip_info"]], "bittensor.subtensor": [[41, "module-bittensor.subtensor"]], "block (bittensor.subtensor.subtensor property)": [[41, "bittensor.subtensor.subtensor.block"]], "blocks_since_epoch() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.blocks_since_epoch"]], "bonds() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.bonds"]], "burn() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.burn"]], "burned_register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.burned_register"]], "chain_endpoint (bittensor.subtensor.subtensor attribute)": [[41, "bittensor.subtensor.subtensor.chain_endpoint"]], "config() (bittensor.subtensor.subtensor static method)": [[41, "bittensor.subtensor.subtensor.config"]], "delegate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.delegate"]], "determine_chain_endpoint_and_network() (bittensor.subtensor.subtensor static method)": [[41, "bittensor.subtensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.difficulty"]], "does_hotkey_exist() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.does_hotkey_exist"]], "get_all_neurons_for_pubkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_block_hash"]], "get_current_block() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_existential_deposit"]], "get_hotkey_owner() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_hotkey_owner"]], "get_netuids_for_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor.subtensor attribute)": [[41, "bittensor.subtensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_senate_members"]], "get_stake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_subnets"]], "get_total_stake_for_coldkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.get_vote_data"]], "help() (bittensor.subtensor.subtensor class method)": [[41, "bittensor.subtensor.subtensor.help"]], "immunity_period() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.immunity_period"]], "incentive() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.incentive"]], "is_hotkey_delegate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.is_hotkey_registered_on_subnet"]], "is_senate_member() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.is_senate_member"]], "kappa() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.kappa"]], "leave_senate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.leave_senate"]], "logger (in module bittensor.subtensor)": [[41, "bittensor.subtensor.logger"]], "max_allowed_validators() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.max_allowed_validators"]], "max_n() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.max_n"]], "max_weight_limit() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.max_weight_limit"]], "metagraph() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.metagraph"]], "min_allowed_weights() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.min_allowed_weights"]], "name (bittensor.subtensor.paramwithtypes attribute)": [[41, "bittensor.subtensor.ParamWithTypes.name"]], "network (bittensor.subtensor.subtensor attribute)": [[41, "bittensor.subtensor.subtensor.network"]], "neuron_for_uid() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.neurons_lite"]], "nominate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.nominate"]], "query_constant() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_constant"]], "query_identity() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_identity"]], "query_map() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.query_subtensor"]], "register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.register"]], "register_senate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.register_subnetwork"]], "rho() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.rho"]], "root_register() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.run_faucet"]], "scaling_law_power() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.scaling_law_power"]], "serve() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.serving_rate_limit"]], "set_delegate_take() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.set_delegate_take"]], "set_hyperparameter() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.set_hyperparameter"]], "set_weights() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor.subtensor static method)": [[41, "bittensor.subtensor.subtensor.setup_config"]], "state_call() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.state_call"]], "subnet_exists() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.subnet_exists"]], "subnetwork_n() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor.subtensor)": [[41, "bittensor.subtensor.subtensor"]], "synergy_scaling_law_power() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.synergy_scaling_law_power"]], "tempo() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.tempo"]], "total_issuance() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.total_issuance"]], "total_stake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.total_stake"]], "transfer() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.transfer"]], "tx_rate_limit() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.tx_rate_limit"]], "type (bittensor.subtensor.paramwithtypes attribute)": [[41, "bittensor.subtensor.ParamWithTypes.type"]], "undelegate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.unstake_multiple"]], "update_identity() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.update_identity"]], "validator_batch_size() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_logits_divergence"]], "validator_prune_len() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.validator_sequence_length"]], "vote_senate() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.vote_senate"]], "weights() (bittensor.subtensor.subtensor method)": [[41, "bittensor.subtensor.subtensor.weights"]], "synapse (class in bittensor.synapse)": [[42, "bittensor.synapse.Synapse"]], "synapse.config (class in bittensor.synapse)": [[42, "bittensor.synapse.Synapse.Config"]], "terminalinfo (class in bittensor.synapse)": [[42, "bittensor.synapse.TerminalInfo"]], "terminalinfo.config (class in bittensor.synapse)": [[42, "bittensor.synapse.TerminalInfo.Config"]], "__setattr__() (bittensor.synapse.synapse method)": [[42, "bittensor.synapse.Synapse.__setattr__"]], "_extract_header_size (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse._extract_header_size"]], "_extract_nonce (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo._extract_process_time"]], "_extract_status_code (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse._extract_total_size"]], "_extract_version (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo._extract_version"]], "axon (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.axon"]], "bittensor.synapse": [[42, "module-bittensor.synapse"]], "body_hash (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.body_hash"]], "cast_float() (in module bittensor.synapse)": [[42, "bittensor.synapse.cast_float"]], "cast_int() (in module bittensor.synapse)": [[42, "bittensor.synapse.cast_int"]], "computed_body_hash (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.computed_body_hash"]], "dendrite (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.dendrite"]], "deserialize() (bittensor.synapse.synapse method)": [[42, "bittensor.synapse.Synapse.deserialize"]], "failed_verification (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.failed_verification"]], "from_headers() (bittensor.synapse.synapse class method)": [[42, "bittensor.synapse.Synapse.from_headers"]], "get_size() (in module bittensor.synapse)": [[42, "bittensor.synapse.get_size"]], "get_total_size() (bittensor.synapse.synapse method)": [[42, "bittensor.synapse.Synapse.get_total_size"]], "header_size (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.header_size"]], "hotkey (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.hotkey"]], "ip (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.ip"]], "is_blacklist (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.is_blacklist"]], "is_failure (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.is_failure"]], "is_success (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.is_success"]], "is_timeout (bittensor.synapse.synapse property)": [[42, "bittensor.synapse.Synapse.is_timeout"]], "name (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.name"]], "nonce (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.nonce"]], "parse_headers_to_inputs() (bittensor.synapse.synapse class method)": [[42, "bittensor.synapse.Synapse.parse_headers_to_inputs"]], "port (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.port"]], "process_time (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.process_time"]], "required_hash_fields (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.required_hash_fields"]], "set_name_type() (bittensor.synapse.synapse method)": [[42, "bittensor.synapse.Synapse.set_name_type"]], "signature (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.signature"]], "status_code (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.status_code"]], "status_message (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.status_message"]], "timeout (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.timeout"]], "to_headers() (bittensor.synapse.synapse method)": [[42, "bittensor.synapse.Synapse.to_headers"]], "total_size (bittensor.synapse.synapse attribute)": [[42, "bittensor.synapse.Synapse.total_size"]], "uuid (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.uuid"]], "validate_assignment (bittensor.synapse.synapse.config attribute)": [[42, "bittensor.synapse.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.terminalinfo.config attribute)": [[42, "bittensor.synapse.TerminalInfo.Config.validate_assignment"]], "version (bittensor.synapse.terminalinfo attribute)": [[42, "bittensor.synapse.TerminalInfo.version"]], "torch_dtypes (in module bittensor.tensor)": [[43, "bittensor.tensor.TORCH_DTYPES"]], "tensor (class in bittensor.tensor)": [[43, "bittensor.tensor.Tensor"], [43, "bittensor.tensor.tensor"]], "tensor.config (class in bittensor.tensor)": [[43, "bittensor.tensor.Tensor.Config"]], "_extract_dtype (bittensor.tensor.tensor attribute)": [[43, "bittensor.tensor.Tensor._extract_dtype"]], "_extract_shape (bittensor.tensor.tensor attribute)": [[43, "bittensor.tensor.Tensor._extract_shape"]], "bittensor.tensor": [[43, "module-bittensor.tensor"]], "buffer (bittensor.tensor.tensor attribute)": [[43, "bittensor.tensor.Tensor.buffer"], [43, "id0"]], "cast_dtype() (in module bittensor.tensor)": [[43, "bittensor.tensor.cast_dtype"]], "cast_shape() (in module bittensor.tensor)": [[43, "bittensor.tensor.cast_shape"]], "deserialize() (bittensor.tensor.tensor method)": [[43, "bittensor.tensor.Tensor.deserialize"]], "dtype (bittensor.tensor.tensor attribute)": [[43, "bittensor.tensor.Tensor.dtype"], [43, "id1"]], "numpy() (bittensor.tensor.tensor method)": [[43, "bittensor.tensor.Tensor.numpy"]], "serialize() (bittensor.tensor.tensor static method)": [[43, "bittensor.tensor.Tensor.serialize"]], "shape (bittensor.tensor.tensor attribute)": [[43, "bittensor.tensor.Tensor.shape"], [43, "id2"]], "tensor() (bittensor.tensor.tensor method)": [[43, "bittensor.tensor.Tensor.tensor"]], "tolist() (bittensor.tensor.tensor method)": [[43, "bittensor.tensor.Tensor.tolist"]], "validate_assignment (bittensor.tensor.tensor.config attribute)": [[43, "bittensor.tensor.Tensor.Config.validate_assignment"]], "brokenthreadpool": [[44, "bittensor.threadpool.BrokenThreadPool"]], "null_entry (in module bittensor.threadpool)": [[44, "bittensor.threadpool.NULL_ENTRY"]], "prioritythreadpoolexecutor (class in bittensor.threadpool)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor"]], "_workitem (class in bittensor.threadpool)": [[44, "bittensor.threadpool._WorkItem"]], "__author__ (in module bittensor.threadpool)": [[44, "bittensor.threadpool.__author__"]], "_adjust_thread_count() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor._adjust_thread_count"]], "_counter (bittensor.threadpool.prioritythreadpoolexecutor attribute)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor._counter"]], "_initializer_failed() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor._initializer_failed"]], "_shutdown (in module bittensor.threadpool)": [[44, "bittensor.threadpool._shutdown"]], "_threads_queues (in module bittensor.threadpool)": [[44, "bittensor.threadpool._threads_queues"]], "_worker() (in module bittensor.threadpool)": [[44, "bittensor.threadpool._worker"]], "add_args() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor.add_args"]], "bittensor.threadpool": [[44, "module-bittensor.threadpool"]], "config() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor.config"]], "is_empty (bittensor.threadpool.prioritythreadpoolexecutor property)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor.is_empty"]], "run() (bittensor.threadpool._workitem method)": [[44, "bittensor.threadpool._WorkItem.run"]], "shutdown() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor.shutdown"]], "submit() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[44, "bittensor.threadpool.PriorityThreadPoolExecutor.submit"]], "axonservecallparams (class in bittensor.types)": [[45, "bittensor.types.AxonServeCallParams"]], "prometheusservecallparams (class in bittensor.types)": [[45, "bittensor.types.PrometheusServeCallParams"]], "bittensor.types": [[45, "module-bittensor.types"]], "ip (bittensor.types.axonservecallparams attribute)": [[45, "bittensor.types.AxonServeCallParams.ip"]], "ip (bittensor.types.prometheusservecallparams attribute)": [[45, "bittensor.types.PrometheusServeCallParams.ip"]], "ip_type (bittensor.types.axonservecallparams attribute)": [[45, "bittensor.types.AxonServeCallParams.ip_type"]], "ip_type (bittensor.types.prometheusservecallparams attribute)": [[45, "bittensor.types.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.types.axonservecallparams attribute)": [[45, "bittensor.types.AxonServeCallParams.netuid"]], "netuid (bittensor.types.prometheusservecallparams attribute)": [[45, "bittensor.types.PrometheusServeCallParams.netuid"]], "port (bittensor.types.axonservecallparams attribute)": [[45, "bittensor.types.AxonServeCallParams.port"]], "port (bittensor.types.prometheusservecallparams attribute)": [[45, "bittensor.types.PrometheusServeCallParams.port"]], "version (bittensor.types.axonservecallparams attribute)": [[45, "bittensor.types.AxonServeCallParams.version"]], "version (bittensor.types.prometheusservecallparams attribute)": [[45, "bittensor.types.PrometheusServeCallParams.version"]], "bittensor.utils._register_cuda": [[46, "module-bittensor.utils._register_cuda"]], "log_cuda_errors() (in module bittensor.utils._register_cuda)": [[46, "bittensor.utils._register_cuda.log_cuda_errors"]], "reset_cuda() (in module bittensor.utils._register_cuda)": [[46, "bittensor.utils._register_cuda.reset_cuda"]], "solve_cuda() (in module bittensor.utils._register_cuda)": [[46, "bittensor.utils._register_cuda.solve_cuda"]], "balance (class in bittensor.utils.balance)": [[47, "bittensor.utils.balance.Balance"]], "__abs__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__abs__"]], "__add__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__add__"]], "__eq__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__eq__"]], "__float__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__float__"], [47, "id6"]], "__floordiv__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__floordiv__"]], "__ge__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__ge__"]], "__gt__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__gt__"]], "__int__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__int__"], [47, "id5"]], "__le__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__le__"]], "__lt__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__lt__"]], "__mul__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__mul__"]], "__ne__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__ne__"]], "__neg__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__neg__"]], "__nonzero__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__nonzero__"]], "__pos__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__pos__"]], "__radd__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__radd__"]], "__repr__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__repr__"]], "__rfloordiv__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rfloordiv__"]], "__rich__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rich__"]], "__rich_rao__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rich_rao__"]], "__rmul__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rmul__"]], "__rsub__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rsub__"]], "__rtruediv__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__rtruediv__"]], "__str__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__str__"]], "__str_rao__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__str_rao__"]], "__sub__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__sub__"]], "__truediv__() (bittensor.utils.balance.balance method)": [[47, "bittensor.utils.balance.Balance.__truediv__"]], "bittensor.utils.balance": [[47, "module-bittensor.utils.balance"]], "from_float() (bittensor.utils.balance.balance static method)": [[47, "bittensor.utils.balance.Balance.from_float"]], "from_rao() (bittensor.utils.balance.balance static method)": [[47, "bittensor.utils.balance.Balance.from_rao"]], "from_tao() (bittensor.utils.balance.balance static method)": [[47, "bittensor.utils.balance.Balance.from_tao"]], "rao (bittensor.utils.balance.balance attribute)": [[47, "bittensor.utils.balance.Balance.rao"], [47, "id3"]], "rao_unit (bittensor.utils.balance.balance attribute)": [[47, "bittensor.utils.balance.Balance.rao_unit"], [47, "id2"]], "tao (bittensor.utils.balance.balance attribute)": [[47, "bittensor.utils.balance.Balance.tao"], [47, "id4"]], "tao (bittensor.utils.balance.balance property)": [[47, "id0"]], "unit (bittensor.utils.balance.balance attribute)": [[47, "bittensor.utils.balance.Balance.unit"], [47, "id1"]], "bittensor.utils.formatting": [[48, "module-bittensor.utils.formatting"]], "get_human_readable() (in module bittensor.utils.formatting)": [[48, "bittensor.utils.formatting.get_human_readable"]], "millify() (in module bittensor.utils.formatting)": [[48, "bittensor.utils.formatting.millify"]], "raopertao (in module bittensor.utils)": [[49, "bittensor.utils.RAOPERTAO"]], "u16_max (in module bittensor.utils)": [[49, "bittensor.utils.U16_MAX"]], "u16_normalized_float() (in module bittensor.utils)": [[49, "bittensor.utils.U16_NORMALIZED_FLOAT"]], "u64_max (in module bittensor.utils)": [[49, "bittensor.utils.U64_MAX"]], "u64_normalized_float() (in module bittensor.utils)": [[49, "bittensor.utils.U64_NORMALIZED_FLOAT"]], "bittensor.utils": [[49, "module-bittensor.utils"]], "create_identity_dict() (in module bittensor.utils)": [[49, "bittensor.utils.create_identity_dict"]], "create_pow() (in module bittensor.utils)": [[49, "bittensor.utils.create_pow"]], "decode_hex_identity_dict() (in module bittensor.utils)": [[49, "bittensor.utils.decode_hex_identity_dict"]], "get_explorer_root_url_by_network_from_map() (in module bittensor.utils)": [[49, "bittensor.utils.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor.utils)": [[49, "bittensor.utils.get_explorer_url_for_network"]], "get_ss58_format() (in module bittensor.utils)": [[49, "bittensor.utils.get_ss58_format"]], "hash() (in module bittensor.utils)": [[49, "bittensor.utils.hash"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils)": [[49, "bittensor.utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils)": [[49, "bittensor.utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils)": [[49, "bittensor.utils.is_valid_ss58_address"]], "ss58_address_to_bytes() (in module bittensor.utils)": [[49, "bittensor.utils.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor.utils)": [[49, "bittensor.utils.ss58_to_vec_u8"]], "strtobool() (in module bittensor.utils)": [[49, "bittensor.utils.strtobool"]], "strtobool_with_default() (in module bittensor.utils)": [[49, "bittensor.utils.strtobool_with_default"]], "u8_key_to_ss58() (in module bittensor.utils)": [[49, "bittensor.utils.u8_key_to_ss58"]], "unbiased_topk() (in module bittensor.utils)": [[49, "bittensor.utils.unbiased_topk"]], "version_checking() (in module bittensor.utils)": [[49, "bittensor.utils.version_checking"]], "externalipnotfound": [[50, "bittensor.utils.networking.ExternalIPNotFound"]], "bittensor.utils.networking": [[50, "module-bittensor.utils.networking"]], "get_external_ip() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.get_external_ip"]], "get_formatted_ws_endpoint_url() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.get_formatted_ws_endpoint_url"]], "int_to_ip() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.int_to_ip"]], "ip__str__() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.ip__str__"]], "ip_to_int() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.ip_to_int"]], "ip_version() (in module bittensor.utils.networking)": [[50, "bittensor.utils.networking.ip_version"]], "cudaexception": [[51, "bittensor.utils.registration.CUDAException"]], "powsolution (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration.POWSolution"]], "registrationstatistics (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration.RegistrationStatistics"]], "registrationstatisticslogger (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger"]], "tpb (bittensor.utils.registration._cudasolver attribute)": [[51, "bittensor.utils.registration._CUDASolver.TPB"]], "_cudasolver (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration._CUDASolver"]], "_solver (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration._Solver"]], "_solverbase (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration._SolverBase"]], "_usingspawnstartmethod (class in bittensor.utils.registration)": [[51, "bittensor.utils.registration._UsingSpawnStartMethod"]], "__enter__() (bittensor.utils.registration._usingspawnstartmethod method)": [[51, "bittensor.utils.registration._UsingSpawnStartMethod.__enter__"]], "__exit__() (bittensor.utils.registration._usingspawnstartmethod method)": [[51, "bittensor.utils.registration._UsingSpawnStartMethod.__exit__"]], "_check_for_newest_block_and_update() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._check_for_newest_block_and_update"]], "_create_seal_hash() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._create_seal_hash"]], "_get_block_with_retry() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._get_block_with_retry"]], "_hash_block_with_hotkey() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._hash_block_with_hotkey"]], "_hex_bytes_to_u8_list() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._hex_bytes_to_u8_list"]], "_registration_diff_pack() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._registration_diff_pack"]], "_registration_diff_unpack() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._registration_diff_unpack"]], "_seal_meets_difficulty() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._seal_meets_difficulty"]], "_solve_for_difficulty_fast() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._solve_for_difficulty_fast"]], "_solve_for_difficulty_fast_cuda() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._solve_for_difficulty_fast_cuda"]], "_solve_for_nonce_block() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._solve_for_nonce_block"]], "_solve_for_nonce_block_cuda() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._solve_for_nonce_block_cuda"]], "_terminate_workers_and_wait_for_exit() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._terminate_workers_and_wait_for_exit"]], "_update_curr_block() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration._update_curr_block"]], "bittensor.utils.registration": [[51, "module-bittensor.utils.registration"]], "block_hash (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.block_hash"]], "block_number (bittensor.utils.registration.powsolution attribute)": [[51, "bittensor.utils.registration.POWSolution.block_number"]], "block_number (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.block_number"]], "check_block (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.check_block"]], "console (bittensor.utils.registration.registrationstatisticslogger attribute)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.console"]], "create_pow() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration.create_pow"]], "create_shared_memory() (bittensor.utils.registration._solverbase static method)": [[51, "bittensor.utils.registration._SolverBase.create_shared_memory"]], "curr_block (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.curr_block"]], "curr_block_num (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.curr_block_num"]], "curr_diff (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.curr_diff"]], "dev_id (bittensor.utils.registration._cudasolver attribute)": [[51, "bittensor.utils.registration._CUDASolver.dev_id"]], "difficulty (bittensor.utils.registration.powsolution attribute)": [[51, "bittensor.utils.registration.POWSolution.difficulty"]], "difficulty (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.difficulty"]], "finished_queue (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.finished_queue"]], "get_cpu_count() (in module bittensor.utils.registration)": [[51, "bittensor.utils.registration.get_cpu_count"]], "get_status_message() (bittensor.utils.registration.registrationstatisticslogger method)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.get_status_message"]], "hash_rate (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.hash_rate"]], "hash_rate_perpetual (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.hash_rate_perpetual"]], "hotkey_bytes (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.hotkey_bytes"]], "is_stale() (bittensor.utils.registration.powsolution method)": [[51, "bittensor.utils.registration.POWSolution.is_stale"]], "limit (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.limit"]], "newblockevent (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.newBlockEvent"]], "nonce (bittensor.utils.registration.powsolution attribute)": [[51, "bittensor.utils.registration.POWSolution.nonce"]], "num_proc (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.num_proc"]], "proc_num (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.proc_num"]], "rounds_total (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.rounds_total"]], "run() (bittensor.utils.registration._cudasolver method)": [[51, "bittensor.utils.registration._CUDASolver.run"]], "run() (bittensor.utils.registration._solver method)": [[51, "bittensor.utils.registration._Solver.run"]], "run() (bittensor.utils.registration._solverbase method)": [[51, "bittensor.utils.registration._SolverBase.run"]], "seal (bittensor.utils.registration.powsolution attribute)": [[51, "bittensor.utils.registration.POWSolution.seal"]], "solution_queue (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.solution_queue"]], "start() (bittensor.utils.registration.registrationstatisticslogger method)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.start"]], "status (bittensor.utils.registration.registrationstatisticslogger attribute)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.status"]], "stop() (bittensor.utils.registration.registrationstatisticslogger method)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.stop"]], "stopevent (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.stopEvent"]], "time_average (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.time_average"]], "time_spent (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.time_spent"]], "time_spent_total (bittensor.utils.registration.registrationstatistics attribute)": [[51, "bittensor.utils.registration.RegistrationStatistics.time_spent_total"]], "update() (bittensor.utils.registration.registrationstatisticslogger method)": [[51, "bittensor.utils.registration.RegistrationStatisticsLogger.update"]], "update_interval (bittensor.utils.registration._solverbase attribute)": [[51, "bittensor.utils.registration._SolverBase.update_interval"]], "amountpersecondrollingaverage (class in bittensor.utils.stats)": [[52, "bittensor.utils.stats.AmountPerSecondRollingAverage"]], "eventspersecondrollingaverage (class in bittensor.utils.stats)": [[52, "bittensor.utils.stats.EventsPerSecondRollingAverage"]], "bittensor.utils.stats": [[52, "module-bittensor.utils.stats"]], "event() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[52, "bittensor.utils.stats.AmountPerSecondRollingAverage.event"]], "event() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[52, "bittensor.utils.stats.EventsPerSecondRollingAverage.event"]], "get() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[52, "bittensor.utils.stats.AmountPerSecondRollingAverage.get"]], "get() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[52, "bittensor.utils.stats.EventsPerSecondRollingAverage.get"]], "timed_rolling_avg (class in bittensor.utils.stats)": [[52, "bittensor.utils.stats.timed_rolling_avg"]], "update() (bittensor.utils.stats.timed_rolling_avg method)": [[52, "bittensor.utils.stats.timed_rolling_avg.update"]], "bittensor.utils.test_utils": [[53, "module-bittensor.utils.test_utils"]], "get_random_unused_port() (in module bittensor.utils.test_utils)": [[53, "bittensor.utils.test_utils.get_random_unused_port"]], "max_tries (in module bittensor.utils.test_utils)": [[53, "bittensor.utils.test_utils.max_tries"]], "bittensor.utils.wallet_utils": [[54, "module-bittensor.utils.wallet_utils"]], "create_identity_dict() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.create_identity_dict"]], "decode_hex_identity_dict() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.decode_hex_identity_dict"]], "get_ss58_format() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.get_ss58_format"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils.wallet_utils)": [[54, "bittensor.utils.wallet_utils.is_valid_ss58_address"]], "u16_max (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.U16_MAX"]], "u32_max (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.U32_MAX"]], "bittensor.utils.weight_utils": [[55, "module-bittensor.utils.weight_utils"]], "convert_bond_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.convert_bond_uids_and_vals_to_tensor"]], "convert_root_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.convert_root_weight_uids_and_vals_to_tensor"]], "convert_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.convert_weight_uids_and_vals_to_tensor"]], "convert_weights_and_uids_for_emit() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.convert_weights_and_uids_for_emit"]], "normalize_max_weight() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.normalize_max_weight"]], "process_weights_for_netuid() (in module bittensor.utils.weight_utils)": [[55, "bittensor.utils.weight_utils.process_weights_for_netuid"]], "__repr__() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.__repr__"]], "__str__() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.__str__"]], "add_args() (bittensor.wallet.wallet class method)": [[56, "bittensor.wallet.wallet.add_args"]], "bittensor.wallet": [[56, "module-bittensor.wallet"]], "coldkey (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.coldkey"]], "coldkey_file (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.coldkey_file"]], "coldkeypub (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.coldkeypub_file"]], "config() (bittensor.wallet.wallet class method)": [[56, "bittensor.wallet.wallet.config"]], "create() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.create_new_hotkey"]], "display_mnemonic_msg() (in module bittensor.wallet)": [[56, "bittensor.wallet.display_mnemonic_msg"]], "get_coldkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.get_coldkey"]], "get_coldkeypub() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.get_coldkeypub"]], "get_hotkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.get_hotkey"]], "help() (bittensor.wallet.wallet class method)": [[56, "bittensor.wallet.wallet.help"]], "hotkey (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.hotkey"]], "hotkey_file (bittensor.wallet.wallet property)": [[56, "bittensor.wallet.wallet.hotkey_file"]], "new_coldkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.new_hotkey"]], "recreate() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.recreate"]], "regen_coldkey (bittensor.wallet.wallet attribute)": [[56, "bittensor.wallet.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet.wallet attribute)": [[56, "bittensor.wallet.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet.wallet attribute)": [[56, "bittensor.wallet.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.regenerate_hotkey"]], "set_coldkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.set_coldkeypub"]], "set_hotkey() (bittensor.wallet.wallet method)": [[56, "bittensor.wallet.wallet.set_hotkey"]], "wallet (class in bittensor.wallet)": [[56, "bittensor.wallet.wallet"]], "openaiminer (class in miner)": [[58, "miner.OpenAIMiner"]], "add_args() (miner.openaiminer class method)": [[58, "miner.OpenAIMiner.add_args"]], "config() (miner.openaiminer method)": [[58, "miner.OpenAIMiner.config"]], "miner": [[58, "module-miner"]], "openai_api_key (in module miner)": [[58, "miner.openai_api_key"]], "prompt() (miner.openaiminer method)": [[58, "miner.OpenAIMiner.prompt"]], "neurons": [[59, "module-neurons"]], "neurons.validators": [[60, "module-neurons.validators"]], "add_args() (neurons.validators.validator.neuron class method)": [[61, "neurons.validators.validator.neuron.add_args"]], "check_config() (neurons.validators.validator.neuron class method)": [[61, "neurons.validators.validator.neuron.check_config"]], "config() (neurons.validators.validator.neuron class method)": [[61, "neurons.validators.validator.neuron.config"]], "main() (in module neurons.validators.validator)": [[61, "neurons.validators.validator.main"]], "metagraph (neurons.validators.validator.neuron attribute)": [[61, "neurons.validators.validator.neuron.metagraph"]], "neuron (class in neurons.validators.validator)": [[61, "neurons.validators.validator.neuron"]], "neurons.validators.validator": [[61, "module-neurons.validators.validator"]], "run() (neurons.validators.validator.neuron method)": [[61, "neurons.validators.validator.neuron.run"]], "subtensor (neurons.validators.validator.neuron attribute)": [[61, "neurons.validators.validator.neuron.subtensor"]], "wallet (neurons.validators.validator.neuron attribute)": [[61, "neurons.validators.validator.neuron.wallet"]], "blacklist() (in module prompting.baseminer.blacklist)": [[62, "prompting.baseminer.blacklist.blacklist"]], "default_blacklist() (in module prompting.baseminer.blacklist)": [[62, "prompting.baseminer.blacklist.default_blacklist"]], "is_prompt_in_cache() (in module prompting.baseminer.blacklist)": [[62, "prompting.baseminer.blacklist.is_prompt_in_cache"]], "prompting.baseminer.blacklist": [[62, "module-prompting.baseminer.blacklist"]], "check_config() (in module prompting.baseminer.config)": [[63, "prompting.baseminer.config.check_config"]], "get_config() (in module prompting.baseminer.config)": [[63, "prompting.baseminer.config.get_config"]], "prompting.baseminer.config": [[63, "module-prompting.baseminer.config"]], "prompting.baseminer": [[64, "module-prompting.baseminer"]], "miner (class in prompting.baseminer.miner)": [[65, "prompting.baseminer.miner.Miner"]], "__enter__() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.__enter__"]], "__exit__() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.__exit__"]], "_prompt() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner._prompt"]], "add_args() (prompting.baseminer.miner.miner class method)": [[65, "prompting.baseminer.miner.Miner.add_args"]], "blacklist() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.blacklist"]], "config() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.config"]], "priority() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.priority"]], "prompt() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.prompt"]], "prompting.baseminer.miner": [[65, "module-prompting.baseminer.miner"]], "run() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.run"]], "run_in_background_thread() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.run_in_background_thread"]], "stop_run_thread() (prompting.baseminer.miner.miner method)": [[65, "prompting.baseminer.miner.Miner.stop_run_thread"]], "default_priority() (in module prompting.baseminer.priority)": [[66, "prompting.baseminer.priority.default_priority"]], "priority() (in module prompting.baseminer.priority)": [[66, "prompting.baseminer.priority.priority"]], "prompting.baseminer.priority": [[66, "module-prompting.baseminer.priority"]], "record_request_timestamps() (in module prompting.baseminer.priority)": [[66, "prompting.baseminer.priority.record_request_timestamps"]], "prompting.baseminer.run": [[67, "module-prompting.baseminer.run"]], "run() (in module prompting.baseminer.run)": [[67, "prompting.baseminer.run.run"]], "prompting.baseminer.set_weights": [[68, "module-prompting.baseminer.set_weights"]], "set_weights() (in module prompting.baseminer.set_weights)": [[68, "prompting.baseminer.set_weights.set_weights"]], "__spec_version__ (in module prompting)": [[69, "prompting.__spec_version__"]], "__version__ (in module prompting)": [[69, "prompting.__version__"]], "prompting": [[69, "module-prompting"]], "version_split (in module prompting)": [[69, "prompting.version_split"]], "prompting (class in prompting.protocol)": [[70, "prompting.protocol.Prompting"]], "prompting.config (class in prompting.protocol)": [[70, "prompting.protocol.Prompting.Config"]], "streamprompting (class in prompting.protocol)": [[70, "prompting.protocol.StreamPrompting"]], "completion (prompting.protocol.prompting attribute)": [[70, "id10"], [70, "prompting.protocol.Prompting.completion"]], "completion (prompting.protocol.streamprompting attribute)": [[70, "prompting.protocol.StreamPrompting.completion"]], "deserialize() (prompting.protocol.prompting method)": [[70, "id11"], [70, "prompting.protocol.Prompting.deserialize"]], "deserialize() (prompting.protocol.streamprompting method)": [[70, "prompting.protocol.StreamPrompting.deserialize"]], "extract_response_json() (prompting.protocol.streamprompting method)": [[70, "prompting.protocol.StreamPrompting.extract_response_json"]], "messages (prompting.protocol.prompting attribute)": [[70, "id9"], [70, "prompting.protocol.Prompting.messages"]], "messages (prompting.protocol.streamprompting attribute)": [[70, "prompting.protocol.StreamPrompting.messages"]], "process_streaming_response() (prompting.protocol.streamprompting method)": [[70, "prompting.protocol.StreamPrompting.process_streaming_response"]], "prompting.protocol": [[70, "module-prompting.protocol"]], "required_hash_fields (prompting.protocol.prompting attribute)": [[70, "prompting.protocol.Prompting.required_hash_fields"]], "required_hash_fields (prompting.protocol.streamprompting attribute)": [[70, "prompting.protocol.StreamPrompting.required_hash_fields"]], "roles (prompting.protocol.prompting attribute)": [[70, "id0"], [70, "prompting.protocol.Prompting.roles"]], "roles (prompting.protocol.streamprompting attribute)": [[70, "prompting.protocol.StreamPrompting.roles"]], "validate_assignment (prompting.protocol.prompting.config attribute)": [[70, "prompting.protocol.Prompting.Config.validate_assignment"]], "add_args() (in module prompting.validators.config)": [[71, "prompting.validators.config.add_args"]], "check_config() (in module prompting.validators.config)": [[71, "prompting.validators.config.check_config"]], "config() (in module prompting.validators.config)": [[71, "prompting.validators.config.config"]], "prompting.validators.config": [[71, "module-prompting.validators.config"]], "characters (prompting.validators.criteria.textlengthunitenum attribute)": [[72, "prompting.validators.criteria.TextLengthUnitEnum.CHARACTERS"]], "contentmatchtypeenum (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.ContentMatchTypeEnum"]], "ends_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[72, "prompting.validators.criteria.ContentMatchTypeEnum.ENDS_WITH"]], "includes (prompting.validators.criteria.contentmatchtypeenum attribute)": [[72, "prompting.validators.criteria.ContentMatchTypeEnum.INCLUDES"]], "layoutmatchtypeenum (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.LayoutMatchTypeEnum"]], "matchcontentcriteria (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.MatchContentCriteria"]], "matchlayoutcriteria (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.MatchLayoutCriteria"]], "matchlengthcriteria (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.MatchLengthCriteria"]], "numbered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[72, "prompting.validators.criteria.LayoutMatchTypeEnum.NUMBERED_LIST"]], "paragraphs (prompting.validators.criteria.textlengthunitenum attribute)": [[72, "prompting.validators.criteria.TextLengthUnitEnum.PARAGRAPHS"]], "sentences (prompting.validators.criteria.textlengthunitenum attribute)": [[72, "prompting.validators.criteria.TextLengthUnitEnum.SENTENCES"]], "starts_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[72, "prompting.validators.criteria.ContentMatchTypeEnum.STARTS_WITH"]], "simpleresponselayoutcriteria (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.SimpleResponseLayoutCriteria"]], "taskcriterion (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.TaskCriterion"]], "textlengthunitenum (class in prompting.validators.criteria)": [[72, "prompting.validators.criteria.TextLengthUnitEnum"]], "unordered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[72, "prompting.validators.criteria.LayoutMatchTypeEnum.UNORDERED_LIST"]], "words (prompting.validators.criteria.textlengthunitenum attribute)": [[72, "prompting.validators.criteria.TextLengthUnitEnum.WORDS"]], "__post_init__() (prompting.validators.criteria.matchcontentcriteria method)": [[72, "prompting.validators.criteria.MatchContentCriteria.__post_init__"]], "_count_sentences() (prompting.validators.criteria.matchlengthcriteria method)": [[72, "prompting.validators.criteria.MatchLengthCriteria._count_sentences"]], "_get_completion_length() (prompting.validators.criteria.matchlengthcriteria method)": [[72, "prompting.validators.criteria.MatchLengthCriteria._get_completion_length"]], "_get_regex_pattern() (prompting.validators.criteria.matchcontentcriteria method)": [[72, "prompting.validators.criteria.MatchContentCriteria._get_regex_pattern"]], "compose_text() (prompting.validators.criteria.matchcontentcriteria method)": [[72, "prompting.validators.criteria.MatchContentCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlayoutcriteria method)": [[72, "prompting.validators.criteria.MatchLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlengthcriteria method)": [[72, "prompting.validators.criteria.MatchLengthCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[72, "prompting.validators.criteria.SimpleResponseLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.taskcriterion method)": [[72, "prompting.validators.criteria.TaskCriterion.compose_text"]], "contentmatchtype (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.contentMatchType"]], "default_text (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.default_text"]], "evaluate() (prompting.validators.criteria.matchcontentcriteria method)": [[72, "prompting.validators.criteria.MatchContentCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlayoutcriteria method)": [[72, "prompting.validators.criteria.MatchLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlengthcriteria method)": [[72, "prompting.validators.criteria.MatchLengthCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[72, "prompting.validators.criteria.SimpleResponseLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.taskcriterion method)": [[72, "prompting.validators.criteria.TaskCriterion.evaluate"]], "layout_type (prompting.validators.criteria.matchlayoutcriteria attribute)": [[72, "prompting.validators.criteria.MatchLayoutCriteria.layout_type"]], "n_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.n_words"]], "negate_match (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.negate_match"]], "penalty (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "id5"], [72, "prompting.validators.criteria.MatchContentCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlayoutcriteria attribute)": [[72, "id8"], [72, "prompting.validators.criteria.MatchLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlengthcriteria attribute)": [[72, "id3"], [72, "prompting.validators.criteria.MatchLengthCriteria.penalty"]], "penalty (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[72, "id6"], [72, "prompting.validators.criteria.SimpleResponseLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.taskcriterion attribute)": [[72, "id1"], [72, "prompting.validators.criteria.TaskCriterion.penalty"]], "prompting.validators.criteria": [[72, "module-prompting.validators.criteria"]], "sampled_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.sampled_words"]], "target_length (prompting.validators.criteria.matchlengthcriteria attribute)": [[72, "prompting.validators.criteria.MatchLengthCriteria.target_length"]], "text (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "id4"], [72, "prompting.validators.criteria.MatchContentCriteria.text"]], "text (prompting.validators.criteria.matchlayoutcriteria attribute)": [[72, "id9"], [72, "prompting.validators.criteria.MatchLayoutCriteria.text"]], "text (prompting.validators.criteria.matchlengthcriteria attribute)": [[72, "id2"], [72, "prompting.validators.criteria.MatchLengthCriteria.text"]], "text (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[72, "id7"], [72, "prompting.validators.criteria.SimpleResponseLayoutCriteria.text"]], "text (prompting.validators.criteria.taskcriterion attribute)": [[72, "id0"], [72, "prompting.validators.criteria.TaskCriterion.text"]], "unit (prompting.validators.criteria.matchlengthcriteria attribute)": [[72, "prompting.validators.criteria.MatchLengthCriteria.unit"]], "words_array (prompting.validators.criteria.matchcontentcriteria attribute)": [[72, "prompting.validators.criteria.MatchContentCriteria.words_array"]], "dataset (class in prompting.validators.dataset)": [[73, "prompting.validators.dataset.Dataset"]], "mockdataset (class in prompting.validators.dataset)": [[73, "prompting.validators.dataset.MockDataset"]], "__next__() (prompting.validators.dataset.dataset method)": [[73, "prompting.validators.dataset.Dataset.__next__"]], "__next__() (prompting.validators.dataset.mockdataset method)": [[73, "prompting.validators.dataset.MockDataset.__next__"]], "prompting.validators.dataset": [[73, "module-prompting.validators.dataset"]], "eventschema (class in prompting.validators.event)": [[74, "prompting.validators.event.EventSchema"]], "best (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.best"]], "blacklist_filter (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.blacklist_filter"]], "blacklist_filter_matched_ngram (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.blacklist_filter_matched_ngram"]], "blacklist_filter_significance_score (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.blacklist_filter_significance_score"]], "block (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.block"]], "completion_status_codes (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.completion_status_codes"]], "completion_status_messages (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.completion_status_messages"]], "completion_times (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.completion_times"]], "completions (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.completions"]], "dahoas_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.dahoas_reward_model"]], "dahoas_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.dahoas_reward_model_normalized"]], "diversity_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.diversity_reward_model"]], "diversity_reward_model_batch (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.diversity_reward_model_batch"]], "diversity_reward_model_historic (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.diversity_reward_model_historic"]], "diversity_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.diversity_reward_model_normalized"]], "dpo_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.dpo_reward_model"]], "dpo_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.dpo_reward_model_normalized"]], "from_dict() (prompting.validators.event.eventschema static method)": [[74, "prompting.validators.event.EventSchema.from_dict"]], "gating_loss (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.gating_loss"]], "keyword_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.keyword_match_penalty_adjusted"]], "keyword_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.keyword_match_penalty_applied"]], "keyword_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.keyword_match_penalty_raw"]], "name (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.name"]], "nsfw_filter (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.nsfw_filter"]], "nsfw_filter_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.nsfw_filter_normalized"]], "nsfw_filter_score (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.nsfw_filter_score"]], "prompt (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.prompt"]], "prompt_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.prompt_reward_model"]], "prompt_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.prompt_reward_model_normalized"]], "prompting.validators.event": [[74, "module-prompting.validators.event"]], "reciprocate_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.reciprocate_reward_model"]], "reciprocate_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.reciprocate_reward_model_normalized"]], "relevance_filter (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.relevance_filter"]], "relevance_filter_bert_score (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.relevance_filter_bert_score"]], "relevance_filter_mpnet_score (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.relevance_filter_mpnet_score"]], "relevance_filter_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.relevance_filter_normalized"]], "rewards (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.rewards"]], "rlhf_reward_model (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.rlhf_reward_model"]], "rlhf_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.rlhf_reward_model_normalized"]], "sentence_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.sentence_match_penalty_adjusted"]], "sentence_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.sentence_match_penalty_applied"]], "sentence_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.sentence_match_penalty_raw"]], "set_weights (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.set_weights"]], "step_length (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.step_length"]], "task_type (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.task_type"]], "task_validation_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.task_validation_penalty_adjusted"]], "task_validation_penalty_applied (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.task_validation_penalty_applied"]], "task_validation_penalty_raw (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.task_validation_penalty_raw"]], "uids (prompting.validators.event.eventschema attribute)": [[74, "prompting.validators.event.EventSchema.uids"]], "forward() (in module prompting.validators.forward)": [[75, "prompting.validators.forward.forward"]], "get_random_uids() (in module prompting.validators.forward)": [[75, "prompting.validators.forward.get_random_uids"]], "prompting.validators.forward": [[75, "module-prompting.validators.forward"]], "run_step() (in module prompting.validators.forward)": [[75, "prompting.validators.forward.run_step"]], "basegatingmodel (class in prompting.validators.gating)": [[76, "prompting.validators.gating.BaseGatingModel"]], "gatingmodel (class in prompting.validators.gating)": [[76, "prompting.validators.gating.GatingModel"]], "sentenceembedgatingmodel (class in prompting.validators.gating)": [[76, "prompting.validators.gating.SentenceEmbedGatingModel"]], "add_args() (prompting.validators.gating.basegatingmodel class method)": [[76, "prompting.validators.gating.BaseGatingModel.add_args"]], "backward() (prompting.validators.gating.basegatingmodel method)": [[76, "prompting.validators.gating.BaseGatingModel.backward"]], "backward() (prompting.validators.gating.gatingmodel method)": [[76, "prompting.validators.gating.GatingModel.backward"]], "backward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[76, "prompting.validators.gating.SentenceEmbedGatingModel.backward"]], "check_config() (prompting.validators.gating.basegatingmodel class method)": [[76, "prompting.validators.gating.BaseGatingModel.check_config"]], "config() (prompting.validators.gating.basegatingmodel class method)": [[76, "prompting.validators.gating.BaseGatingModel.config"]], "forward() (prompting.validators.gating.basegatingmodel method)": [[76, "prompting.validators.gating.BaseGatingModel.forward"]], "forward() (prompting.validators.gating.gatingmodel method)": [[76, "prompting.validators.gating.GatingModel.forward"]], "forward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[76, "prompting.validators.gating.SentenceEmbedGatingModel.forward"]], "mean_pooling() (prompting.validators.gating.sentenceembedgatingmodel method)": [[76, "prompting.validators.gating.SentenceEmbedGatingModel.mean_pooling"]], "prompting.validators.gating": [[76, "module-prompting.validators.gating"]], "resync() (prompting.validators.gating.basegatingmodel method)": [[76, "prompting.validators.gating.BaseGatingModel.resync"]], "resync() (prompting.validators.gating.gatingmodel method)": [[76, "prompting.validators.gating.GatingModel.resync"]], "resync() (prompting.validators.gating.sentenceembedgatingmodel method)": [[76, "prompting.validators.gating.SentenceEmbedGatingModel.resync"]], "__spec_version__ (in module prompting.validators)": [[77, "prompting.validators.__spec_version__"]], "__version__ (in module prompting.validators)": [[77, "prompting.validators.__version__"]], "prompting.validators": [[77, "module-prompting.validators"]], "version_split (in module prompting.validators)": [[77, "prompting.validators.version_split"]], "_ttl_hash_gen() (in module prompting.validators.misc)": [[78, "prompting.validators.misc._ttl_hash_gen"]], "prompting.validators.misc": [[78, "module-prompting.validators.misc"]], "ttl_cache() (in module prompting.validators.misc)": [[78, "prompting.validators.misc.ttl_cache"]], "ttl_get_block() (in module prompting.validators.misc)": [[78, "prompting.validators.misc.ttl_get_block"]], "contentmatchpenaltymodel (class in prompting.validators.penalty.content_match)": [[79, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.content_match.contentmatchpenaltymodel method)": [[79, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.content_match.contentmatchpenaltymodel property)": [[79, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.name"]], "prompting.validators.penalty.content_match": [[79, "module-prompting.validators.penalty.content_match"]], "basepenaltymodel (class in prompting.validators.penalty)": [[80, "prompting.validators.penalty.BasePenaltyModel"]], "contentmatchpenaltymodel (class in prompting.validators.penalty)": [[80, "prompting.validators.penalty.ContentMatchPenaltyModel"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty)": [[80, "prompting.validators.penalty.KeywordMatchPenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty)": [[80, "prompting.validators.penalty.PenaltyModelType"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty)": [[80, "prompting.validators.penalty.TaskValidationPenaltyModel"]], "__repr__() (prompting.validators.penalty.basepenaltymodel method)": [[80, "prompting.validators.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.basepenaltymodel method)": [[80, "prompting.validators.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[80, "prompting.validators.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[80, "prompting.validators.penalty.BasePenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.contentmatchpenaltymodel method)": [[80, "prompting.validators.penalty.ContentMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[80, "prompting.validators.penalty.KeywordMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.taskvalidationpenaltymodel method)": [[80, "prompting.validators.penalty.TaskValidationPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[80, "prompting.validators.penalty.KeywordMatchPenaltyModel.check_exploits_keywords"]], "keyword_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[80, "prompting.validators.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.basepenaltymodel property)": [[80, "prompting.validators.penalty.BasePenaltyModel.name"]], "name (prompting.validators.penalty.contentmatchpenaltymodel property)": [[80, "prompting.validators.penalty.ContentMatchPenaltyModel.name"]], "name (prompting.validators.penalty.keywordmatchpenaltymodel property)": [[80, "prompting.validators.penalty.KeywordMatchPenaltyModel.name"]], "name (prompting.validators.penalty.taskvalidationpenaltymodel property)": [[80, "prompting.validators.penalty.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty": [[80, "module-prompting.validators.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[80, "prompting.validators.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[80, "prompting.validators.penalty.PenaltyModelType.task_validation_penalty"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty.keyword_match)": [[81, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[81, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[81, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.check_exploits_keywords"]], "name (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel property)": [[81, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.name"]], "prompting.validators.penalty.keyword_match": [[81, "module-prompting.validators.penalty.keyword_match"]], "basepenaltymodel (class in prompting.validators.penalty.penalty)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty.penalty)": [[82, "prompting.validators.penalty.penalty.PenaltyModelType"]], "__repr__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel.calculate_penalties"]], "keyword_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[82, "prompting.validators.penalty.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.penalty.basepenaltymodel property)": [[82, "prompting.validators.penalty.penalty.BasePenaltyModel.name"]], "prompting.validators.penalty.penalty": [[82, "module-prompting.validators.penalty.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[82, "prompting.validators.penalty.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[82, "prompting.validators.penalty.penalty.PenaltyModelType.task_validation_penalty"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty.task_validation)": [[83, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel method)": [[83, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel property)": [[83, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty.task_validation": [[83, "module-prompting.validators.penalty.task_validation"]], "answerprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.AnswerPrompt"]], "augmentprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.AugmentPrompt"]], "baseprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.BasePrompt"]], "firewallprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.FirewallPrompt"]], "followupprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.FollowupPrompt"]], "scoringprompt (class in prompting.validators.prompts)": [[84, "prompting.validators.prompts.ScoringPrompt"]], "answer_prompt() (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.answer_prompt"]], "answer_scoring_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.answer_scoring_template"]], "augment_prompt() (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.augment_prompt"]], "augment_request_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.augment_request_template"]], "augment_scoring_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.augment_scoring_template"]], "detected() (prompting.validators.prompts.firewallprompt method)": [[84, "prompting.validators.prompts.FirewallPrompt.detected"]], "extract() (prompting.validators.prompts.baseprompt method)": [[84, "prompting.validators.prompts.BasePrompt.extract"]], "extract_score() (prompting.validators.prompts.scoringprompt method)": [[84, "prompting.validators.prompts.ScoringPrompt.extract_score"]], "find_unique_tags() (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.find_unique_tags"]], "firewall_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.firewall_template"]], "followup_prompt() (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.followup_prompt"]], "followup_request_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.followup_request_template"]], "followup_scoring_template (in module prompting.validators.prompts)": [[84, "prompting.validators.prompts.followup_scoring_template"]], "matches_template() (prompting.validators.prompts.baseprompt method)": [[84, "prompting.validators.prompts.BasePrompt.matches_template"]], "mock_response() (prompting.validators.prompts.firewallprompt static method)": [[84, "prompting.validators.prompts.FirewallPrompt.mock_response"]], "mock_response() (prompting.validators.prompts.scoringprompt static method)": [[84, "prompting.validators.prompts.ScoringPrompt.mock_response"]], "prompting.validators.prompts": [[84, "module-prompting.validators.prompts"]], "text() (prompting.validators.prompts.baseprompt method)": [[84, "prompting.validators.prompts.BasePrompt.text"]], "blacklist (class in prompting.validators.reward.blacklist)": [[85, "prompting.validators.reward.blacklist.Blacklist"]], "blacklistrewardevent (class in prompting.validators.reward.blacklist)": [[85, "prompting.validators.reward.blacklist.BlacklistRewardEvent"]], "_add_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.add"]], "calculate_significance() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.calculate_significance"]], "extract_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.extract_ngrams"]], "get_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.get_significance"]], "matched_ngram (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[85, "prompting.validators.reward.blacklist.BlacklistRewardEvent.matched_ngram"]], "most_common() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.most_significant"]], "name (prompting.validators.reward.blacklist.blacklist property)": [[85, "prompting.validators.reward.blacklist.Blacklist.name"]], "normalize_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.normalize_rewards"]], "prompting.validators.reward.blacklist": [[85, "module-prompting.validators.reward.blacklist"]], "prune() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.prune"]], "reset() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.reset"]], "reward() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.reward"]], "set_counter_to_half() (prompting.validators.reward.blacklist.blacklist method)": [[85, "prompting.validators.reward.blacklist.Blacklist.set_counter_to_half"]], "significance_score (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[85, "prompting.validators.reward.blacklist.BlacklistRewardEvent.significance_score"]], "defaultrewardframeworkconfig (class in prompting.validators.reward.config)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig"]], "rewardmodeltype (class in prompting.validators.reward.config)": [[86, "prompting.validators.reward.config.RewardModelType"]], "blacklist (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.blacklist"]], "dahoas (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.diversity"]], "dpo (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dpo_model_weight"]], "keyword_match (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.keyword_match"]], "nsfw (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.nsfw"]], "prompt (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward.config": [[86, "module-prompting.validators.reward.config"]], "reciprocate (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.relevance_mpnet"]], "rlhf (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[86, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "task_validator (prompting.validators.reward.config.rewardmodeltype attribute)": [[86, "prompting.validators.reward.config.RewardModelType.task_validator"]], "dahoasrewardmodel (class in prompting.validators.reward.dahoas)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel"]], "forward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.forward"]], "get_rewards() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.get_rewards"]], "load_weights() (prompting.validators.reward.dahoas.dahoasrewardmodel static method)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoas.dahoasrewardmodel attribute)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.model_name"]], "name (prompting.validators.reward.dahoas.dahoasrewardmodel property)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.name"]], "prompting.validators.reward.dahoas": [[87, "module-prompting.validators.reward.dahoas"]], "reward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[87, "prompting.validators.reward.dahoas.DahoasRewardModel.reward"]], "diversityrewardevent (class in prompting.validators.reward.diversity)": [[88, "prompting.validators.reward.diversity.DiversityRewardEvent"]], "diversityrewardmodel (class in prompting.validators.reward.diversity)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel"]], "batch (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[88, "prompting.validators.reward.diversity.DiversityRewardEvent.batch"]], "diversity_model_path (prompting.validators.reward.diversity.diversityrewardmodel attribute)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.diversity_model_path"]], "get_batch_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.get_rewards"]], "historic (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[88, "prompting.validators.reward.diversity.DiversityRewardEvent.historic"]], "mean_pooling() (in module prompting.validators.reward.diversity)": [[88, "prompting.validators.reward.diversity.mean_pooling"]], "name (prompting.validators.reward.diversity.diversityrewardmodel property)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.normalize_rewards"]], "prompting.validators.reward.diversity": [[88, "module-prompting.validators.reward.diversity"]], "update_historic_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[88, "prompting.validators.reward.diversity.DiversityRewardModel.update_historic_embeddings"]], "directpreferencerewardmodel (class in prompting.validators.reward.dpo)": [[89, "prompting.validators.reward.dpo.DirectPreferenceRewardModel"]], "get_rewards() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[89, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.get_rewards"]], "name (prompting.validators.reward.dpo.directpreferencerewardmodel property)": [[89, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.name"]], "prompting.validators.reward.dpo": [[89, "module-prompting.validators.reward.dpo"]], "reward_model_name (prompting.validators.reward.dpo.directpreferencerewardmodel attribute)": [[89, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[89, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_single"]], "baserewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.BaseRewardModel"]], "blacklist (class in prompting.validators.reward)": [[90, "prompting.validators.reward.Blacklist"]], "dahoasrewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.DahoasRewardModel"]], "defaultrewardframeworkconfig (class in prompting.validators.reward)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig"]], "directpreferencerewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.DirectPreferenceRewardModel"]], "diversityrewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.DiversityRewardModel"]], "nsfwrewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.NSFWRewardModel"]], "openassistantrewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.OpenAssistantRewardModel"]], "promptrewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.PromptRewardModel"]], "reciprocaterewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.ReciprocateRewardModel"]], "relevancerewardmodel (class in prompting.validators.reward)": [[90, "prompting.validators.reward.RelevanceRewardModel"]], "rewardmodeltype (class in prompting.validators.reward)": [[90, "prompting.validators.reward.RewardModelType"]], "__repr__() (prompting.validators.reward.baserewardmodel method)": [[90, "prompting.validators.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.baserewardmodel method)": [[90, "prompting.validators.reward.BaseRewardModel.__str__"]], "_add_ngrams() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.add"]], "apply() (prompting.validators.reward.baserewardmodel method)": [[90, "prompting.validators.reward.BaseRewardModel.apply"]], "blacklist (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.blacklist"]], "calculate_significance() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.calculate_significance"]], "dahoas (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.diversity"]], "diversity_model_path (prompting.validators.reward.diversityrewardmodel attribute)": [[90, "prompting.validators.reward.DiversityRewardModel.diversity_model_path"]], "dpo (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig.dpo_model_weight"]], "extract_ngrams() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.extract_ngrams"]], "forward() (prompting.validators.reward.dahoasrewardmodel method)": [[90, "prompting.validators.reward.DahoasRewardModel.forward"]], "get_batch_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.baserewardmodel method)": [[90, "prompting.validators.reward.BaseRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.get_rewards"]], "get_rewards() (prompting.validators.reward.dahoasrewardmodel method)": [[90, "prompting.validators.reward.DahoasRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.directpreferencerewardmodel method)": [[90, "prompting.validators.reward.DirectPreferenceRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[90, "prompting.validators.reward.NSFWRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.openassistantrewardmodel method)": [[90, "prompting.validators.reward.OpenAssistantRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.promptrewardmodel method)": [[90, "prompting.validators.reward.PromptRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.reciprocaterewardmodel method)": [[90, "prompting.validators.reward.ReciprocateRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[90, "prompting.validators.reward.RelevanceRewardModel.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.get_significance"]], "keyword_match (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.keyword_match"]], "load_weights() (prompting.validators.reward.dahoasrewardmodel static method)": [[90, "prompting.validators.reward.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoasrewardmodel attribute)": [[90, "prompting.validators.reward.DahoasRewardModel.model_name"]], "most_common() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.most_significant"]], "name (prompting.validators.reward.baserewardmodel property)": [[90, "prompting.validators.reward.BaseRewardModel.name"]], "name (prompting.validators.reward.blacklist property)": [[90, "prompting.validators.reward.Blacklist.name"]], "name (prompting.validators.reward.dahoasrewardmodel property)": [[90, "prompting.validators.reward.DahoasRewardModel.name"]], "name (prompting.validators.reward.directpreferencerewardmodel property)": [[90, "prompting.validators.reward.DirectPreferenceRewardModel.name"]], "name (prompting.validators.reward.diversityrewardmodel property)": [[90, "prompting.validators.reward.DiversityRewardModel.name"]], "name (prompting.validators.reward.nsfwrewardmodel property)": [[90, "prompting.validators.reward.NSFWRewardModel.name"]], "name (prompting.validators.reward.openassistantrewardmodel property)": [[90, "prompting.validators.reward.OpenAssistantRewardModel.name"]], "name (prompting.validators.reward.promptrewardmodel property)": [[90, "prompting.validators.reward.PromptRewardModel.name"]], "name (prompting.validators.reward.reciprocaterewardmodel property)": [[90, "prompting.validators.reward.ReciprocateRewardModel.name"]], "name (prompting.validators.reward.relevancerewardmodel property)": [[90, "prompting.validators.reward.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.baserewardmodel method)": [[90, "prompting.validators.reward.BaseRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[90, "prompting.validators.reward.NSFWRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[90, "prompting.validators.reward.RelevanceRewardModel.normalize_rewards"]], "nsfw (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.nsfw"]], "nsfw_filter_model_path (prompting.validators.reward.nsfwrewardmodel attribute)": [[90, "prompting.validators.reward.NSFWRewardModel.nsfw_filter_model_path"]], "prompt (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward": [[90, "module-prompting.validators.reward"]], "prune() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.prune"]], "reciprocate (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.relevance_mpnet"]], "reset() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.reset"]], "revision (prompting.validators.reward.reciprocaterewardmodel attribute)": [[90, "prompting.validators.reward.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.reward"]], "reward() (prompting.validators.reward.dahoasrewardmodel method)": [[90, "prompting.validators.reward.DahoasRewardModel.reward"]], "reward() (prompting.validators.reward.nsfwrewardmodel method)": [[90, "prompting.validators.reward.NSFWRewardModel.reward"]], "reward() (prompting.validators.reward.promptrewardmodel method)": [[90, "prompting.validators.reward.PromptRewardModel.reward"]], "reward() (prompting.validators.reward.reciprocaterewardmodel method)": [[90, "prompting.validators.reward.ReciprocateRewardModel.reward"]], "reward() (prompting.validators.reward.relevancerewardmodel method)": [[90, "prompting.validators.reward.RelevanceRewardModel.reward"]], "reward_model_name (prompting.validators.reward.directpreferencerewardmodel attribute)": [[90, "prompting.validators.reward.DirectPreferenceRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.openassistantrewardmodel attribute)": [[90, "prompting.validators.reward.OpenAssistantRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.promptrewardmodel attribute)": [[90, "prompting.validators.reward.PromptRewardModel.reward_model_name"]], "reward_model_path (prompting.validators.reward.reciprocaterewardmodel attribute)": [[90, "prompting.validators.reward.ReciprocateRewardModel.reward_model_path"]], "reward_single() (prompting.validators.reward.directpreferencerewardmodel method)": [[90, "prompting.validators.reward.DirectPreferenceRewardModel.reward_single"]], "reward_single() (prompting.validators.reward.openassistantrewardmodel method)": [[90, "prompting.validators.reward.OpenAssistantRewardModel.reward_single"]], "rlhf (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[90, "prompting.validators.reward.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "set_counter_to_half() (prompting.validators.reward.blacklist method)": [[90, "prompting.validators.reward.Blacklist.set_counter_to_half"]], "task_validator (prompting.validators.reward.rewardmodeltype attribute)": [[90, "prompting.validators.reward.RewardModelType.task_validator"]], "update_historic_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[90, "prompting.validators.reward.DiversityRewardModel.update_historic_embeddings"]], "nsfwrewardevent (class in prompting.validators.reward.nsfw)": [[91, "prompting.validators.reward.nsfw.NSFWRewardEvent"]], "nsfwrewardmodel (class in prompting.validators.reward.nsfw)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel"]], "get_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel.get_rewards"]], "name (prompting.validators.reward.nsfw.nsfwrewardmodel property)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel.normalize_rewards"]], "nsfw_filter_model_path (prompting.validators.reward.nsfw.nsfwrewardmodel attribute)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel.nsfw_filter_model_path"]], "prompting.validators.reward.nsfw": [[91, "module-prompting.validators.reward.nsfw"]], "reward() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[91, "prompting.validators.reward.nsfw.NSFWRewardModel.reward"]], "score (prompting.validators.reward.nsfw.nsfwrewardevent attribute)": [[91, "prompting.validators.reward.nsfw.NSFWRewardEvent.score"]], "openassistantrewardmodel (class in prompting.validators.reward.open_assistant)": [[92, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel"]], "get_rewards() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[92, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.get_rewards"]], "name (prompting.validators.reward.open_assistant.openassistantrewardmodel property)": [[92, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.name"]], "prompting.validators.reward.open_assistant": [[92, "module-prompting.validators.reward.open_assistant"]], "reward_model_name (prompting.validators.reward.open_assistant.openassistantrewardmodel attribute)": [[92, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[92, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_single"]], "promptrewardmodel (class in prompting.validators.reward.prompt)": [[93, "prompting.validators.reward.prompt.PromptRewardModel"]], "get_rewards() (prompting.validators.reward.prompt.promptrewardmodel method)": [[93, "prompting.validators.reward.prompt.PromptRewardModel.get_rewards"]], "name (prompting.validators.reward.prompt.promptrewardmodel property)": [[93, "prompting.validators.reward.prompt.PromptRewardModel.name"]], "prompting.validators.reward.prompt": [[93, "module-prompting.validators.reward.prompt"]], "reward() (prompting.validators.reward.prompt.promptrewardmodel method)": [[93, "prompting.validators.reward.prompt.PromptRewardModel.reward"]], "reward_model_name (prompting.validators.reward.prompt.promptrewardmodel attribute)": [[93, "prompting.validators.reward.prompt.PromptRewardModel.reward_model_name"]], "reciprocaterewardmodel (class in prompting.validators.reward.reciprocate)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel"]], "get_rewards() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.get_rewards"]], "name (prompting.validators.reward.reciprocate.reciprocaterewardmodel property)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.name"]], "prompting.validators.reward.reciprocate": [[94, "module-prompting.validators.reward.reciprocate"]], "revision (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward"]], "reward_model_path (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[94, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward_model_path"]], "bertrelevancerewardmodel (class in prompting.validators.reward.relevance)": [[95, "prompting.validators.reward.relevance.BertRelevanceRewardModel"]], "mpnetrelevencemodel (class in prompting.validators.reward.relevance)": [[95, "prompting.validators.reward.relevance.MpnetRelevenceModel"]], "relevancerewardevent (class in prompting.validators.reward.relevance)": [[95, "prompting.validators.reward.relevance.RelevanceRewardEvent"]], "relevancerewardmodel (class in prompting.validators.reward.relevance)": [[95, "prompting.validators.reward.relevance.RelevanceRewardModel"]], "bert_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[95, "prompting.validators.reward.relevance.RelevanceRewardEvent.bert_score"]], "diversity_model_path (prompting.validators.reward.relevance.mpnetrelevencemodel attribute)": [[95, "prompting.validators.reward.relevance.MpnetRelevenceModel.diversity_model_path"]], "get_embedding() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[95, "prompting.validators.reward.relevance.BertRelevanceRewardModel.get_embedding"]], "get_embeddings() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[95, "prompting.validators.reward.relevance.MpnetRelevenceModel.get_embeddings"]], "get_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[95, "prompting.validators.reward.relevance.RelevanceRewardModel.get_rewards"]], "mean_pooling() (in module prompting.validators.reward.relevance)": [[95, "prompting.validators.reward.relevance.mean_pooling"]], "mpnet_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[95, "prompting.validators.reward.relevance.RelevanceRewardEvent.mpnet_score"]], "name (prompting.validators.reward.relevance.bertrelevancerewardmodel property)": [[95, "prompting.validators.reward.relevance.BertRelevanceRewardModel.name"]], "name (prompting.validators.reward.relevance.mpnetrelevencemodel property)": [[95, "prompting.validators.reward.relevance.MpnetRelevenceModel.name"]], "name (prompting.validators.reward.relevance.relevancerewardmodel property)": [[95, "prompting.validators.reward.relevance.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[95, "prompting.validators.reward.relevance.RelevanceRewardModel.normalize_rewards"]], "prompting.validators.reward.relevance": [[95, "module-prompting.validators.reward.relevance"]], "relevance_model_path (prompting.validators.reward.relevance.bertrelevancerewardmodel attribute)": [[95, "prompting.validators.reward.relevance.BertRelevanceRewardModel.relevance_model_path"]], "reward() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[95, "prompting.validators.reward.relevance.BertRelevanceRewardModel.reward"]], "reward() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[95, "prompting.validators.reward.relevance.MpnetRelevenceModel.reward"]], "reward() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[95, "prompting.validators.reward.relevance.RelevanceRewardModel.reward"]], "baserewardevent (class in prompting.validators.reward.reward)": [[96, "prompting.validators.reward.reward.BaseRewardEvent"]], "baserewardmodel (class in prompting.validators.reward.reward)": [[96, "prompting.validators.reward.reward.BaseRewardModel"]], "__repr__() (prompting.validators.reward.reward.baserewardmodel method)": [[96, "prompting.validators.reward.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.reward.baserewardmodel method)": [[96, "prompting.validators.reward.reward.BaseRewardModel.__str__"]], "apply() (prompting.validators.reward.reward.baserewardmodel method)": [[96, "prompting.validators.reward.reward.BaseRewardModel.apply"]], "get_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[96, "prompting.validators.reward.reward.BaseRewardModel.get_rewards"]], "name (prompting.validators.reward.reward.baserewardmodel property)": [[96, "prompting.validators.reward.reward.BaseRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[96, "prompting.validators.reward.reward.BaseRewardModel.normalize_rewards"]], "normalized_reward (prompting.validators.reward.reward.baserewardevent attribute)": [[96, "prompting.validators.reward.reward.BaseRewardEvent.normalized_reward"]], "parse_reward_events() (prompting.validators.reward.reward.baserewardevent static method)": [[96, "prompting.validators.reward.reward.BaseRewardEvent.parse_reward_events"]], "prompting.validators.reward.reward": [[96, "module-prompting.validators.reward.reward"]], "reward (prompting.validators.reward.reward.baserewardevent attribute)": [[96, "prompting.validators.reward.reward.BaseRewardEvent.reward"]], "questionanswertask (class in prompting.validators.tasks)": [[97, "prompting.validators.tasks.QuestionAnswerTask"]], "questiongenerationtask (class in prompting.validators.tasks)": [[97, "prompting.validators.tasks.QuestionGenerationTask"]], "summarytask (class in prompting.validators.tasks)": [[97, "prompting.validators.tasks.SummaryTask"]], "task (class in prompting.validators.tasks)": [[97, "prompting.validators.tasks.Task"]], "base_text (prompting.validators.tasks.task attribute)": [[97, "prompting.validators.tasks.Task.base_text"]], "compose_prompt() (prompting.validators.tasks.questionanswertask method)": [[97, "prompting.validators.tasks.QuestionAnswerTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.questiongenerationtask method)": [[97, "prompting.validators.tasks.QuestionGenerationTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.summarytask method)": [[97, "prompting.validators.tasks.SummaryTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.task method)": [[97, "prompting.validators.tasks.Task.compose_prompt"]], "create_qa_task() (in module prompting.validators.tasks)": [[97, "prompting.validators.tasks.create_qa_task"]], "create_qg_task() (in module prompting.validators.tasks)": [[97, "prompting.validators.tasks.create_qg_task"]], "create_summarization_task() (in module prompting.validators.tasks)": [[97, "prompting.validators.tasks.create_summarization_task"]], "criteria (prompting.validators.tasks.task attribute)": [[97, "prompting.validators.tasks.Task.criteria"]], "prompting.validators.tasks": [[97, "module-prompting.validators.tasks"]], "task_name (prompting.validators.tasks.task attribute)": [[97, "prompting.validators.tasks.Task.task_name"]], "task_type (prompting.validators.tasks.task attribute)": [[97, "prompting.validators.tasks.Task.task_type"]], "check_uid_availability() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.check_uid_availability"]], "checkpoint() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.checkpoint"]], "init_wandb() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.init_wandb"]], "load_state() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.load_state"]], "prompting.validators.utils": [[98, "module-prompting.validators.utils"]], "reinit_wandb() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.reinit_wandb"]], "resync_linear_layer() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.resync_linear_layer"]], "resync_metagraph() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.resync_metagraph"]], "save_state() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.save_state"]], "should_checkpoint() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.should_checkpoint"]], "should_reinit_wandb() (in module prompting.validators.utils)": [[98, "prompting.validators.utils.should_reinit_wandb"]], "prompting.validators.weights": [[99, "module-prompting.validators.weights"]], "set_weights() (in module prompting.validators.weights)": [[99, "prompting.validators.weights.set_weights"]], "should_set_weights() (in module prompting.validators.weights)": [[99, "prompting.validators.weights.should_set_weights"]]}})