Search.setIndex({"docnames": ["genfiles/bittensor", "genfiles/bittensor.axon", "genfiles/bittensor.chain_data", "genfiles/bittensor.config", "genfiles/bittensor.dendrite", "genfiles/bittensor.errors", "genfiles/bittensor.extrinsics", "genfiles/bittensor.extrinsics.delegation", "genfiles/bittensor.extrinsics.log_utilities", "genfiles/bittensor.extrinsics.network", "genfiles/bittensor.extrinsics.prometheus", "genfiles/bittensor.extrinsics.registration", "genfiles/bittensor.extrinsics.root", "genfiles/bittensor.extrinsics.senate", "genfiles/bittensor.extrinsics.serving", "genfiles/bittensor.extrinsics.set_weights", "genfiles/bittensor.extrinsics.staking", "genfiles/bittensor.extrinsics.transfer", "genfiles/bittensor.extrinsics.unstaking", "genfiles/bittensor.keyfile", "genfiles/bittensor.logging", "genfiles/bittensor.metagraph", "genfiles/bittensor.stream", "genfiles/bittensor.subtensor", "genfiles/bittensor.synapse", "genfiles/bittensor.tensor", "genfiles/bittensor.threadpool", "genfiles/bittensor.types", "genfiles/bittensor.utils", "genfiles/bittensor.utils.balance", "genfiles/bittensor.utils.formatting", "genfiles/bittensor.utils.networking", "genfiles/bittensor.utils.registration", "genfiles/bittensor.utils.stats", "genfiles/bittensor.utils.test_utils", "genfiles/bittensor.utils.wallet_utils", "genfiles/bittensor.utils.weight_utils", "genfiles/bittensor.wallet", "genfiles/modules", "index"], "filenames": ["genfiles/bittensor.rst", "genfiles/bittensor.axon.rst", "genfiles/bittensor.chain_data.rst", "genfiles/bittensor.config.rst", "genfiles/bittensor.dendrite.rst", "genfiles/bittensor.errors.rst", "genfiles/bittensor.extrinsics.rst", "genfiles/bittensor.extrinsics.delegation.rst", "genfiles/bittensor.extrinsics.log_utilities.rst", "genfiles/bittensor.extrinsics.network.rst", "genfiles/bittensor.extrinsics.prometheus.rst", "genfiles/bittensor.extrinsics.registration.rst", "genfiles/bittensor.extrinsics.root.rst", "genfiles/bittensor.extrinsics.senate.rst", "genfiles/bittensor.extrinsics.serving.rst", "genfiles/bittensor.extrinsics.set_weights.rst", "genfiles/bittensor.extrinsics.staking.rst", "genfiles/bittensor.extrinsics.transfer.rst", "genfiles/bittensor.extrinsics.unstaking.rst", "genfiles/bittensor.keyfile.rst", "genfiles/bittensor.logging.rst", "genfiles/bittensor.metagraph.rst", "genfiles/bittensor.stream.rst", "genfiles/bittensor.subtensor.rst", "genfiles/bittensor.synapse.rst", "genfiles/bittensor.tensor.rst", "genfiles/bittensor.threadpool.rst", "genfiles/bittensor.types.rst", "genfiles/bittensor.utils.rst", "genfiles/bittensor.utils.balance.rst", "genfiles/bittensor.utils.formatting.rst", "genfiles/bittensor.utils.networking.rst", "genfiles/bittensor.utils.registration.rst", "genfiles/bittensor.utils.stats.rst", "genfiles/bittensor.utils.test_utils.rst", "genfiles/bittensor.utils.wallet_utils.rst", "genfiles/bittensor.utils.weight_utils.rst", "genfiles/bittensor.wallet.rst", "genfiles/modules.rst", "index.rst"], "titles": ["bittensor package", "bittensor.axon module", "bittensor.chain_data module", "bittensor.config module", "bittensor.dendrite module", "bittensor.errors module", "bittensor.extrinsics package", "bittensor.extrinsics.delegation module", "bittensor.extrinsics.log_utilities module", "bittensor.extrinsics.network module", "bittensor.extrinsics.prometheus module", "bittensor.extrinsics.registration module", "bittensor.extrinsics.root module", "bittensor.extrinsics.senate module", "bittensor.extrinsics.serving module", "bittensor.extrinsics.set_weights module", "bittensor.extrinsics.staking module", "bittensor.extrinsics.transfer module", "bittensor.extrinsics.unstaking module", "bittensor.keyfile module", "bittensor.logging module", "bittensor.metagraph module", "bittensor.stream module", "bittensor.subtensor module", "bittensor.synapse module", "bittensor.tensor module", "bittensor.threadpool module", "bittensor.types module", "bittensor.utils package", "bittensor.utils.balance module", "bittensor.utils.formatting module", "bittensor.utils.networking module", "bittensor.utils.registration module", "bittensor.utils.stats module", "bittensor.utils.test_utils module", "bittensor.utils.wallet_utils module", "bittensor.utils.weight_utils module", "bittensor.wallet module", "bittensor", "Welcome to Bittensor API Documentation"], "terms": {"extrins": [0, 39], "util": [0, 1, 23, 39], "u16_normalized_float": [0, 28, 39], "u64_normalized_float": [0, 28, 39], "get_explorer_root_url_by_network_from_map": [0, 28, 39], "get_explorer_url_for_network": [0, 28, 39], "hash": [0, 1, 24, 28, 39], "ss58_address_to_byt": [0, 28, 39], "ss58_to_vec_u8": [0, 28, 39], "strtobool": [0, 28, 39], "strtobool_with_default": [0, 28, 39], "u8_key_to_ss58": [0, 28, 39], "unbiased_topk": [0, 28, 39], "version_check": [0, 28, 39], "axon": [0, 4, 14, 21, 23, 24, 27, 39], "modul": [0, 6, 28, 39], "axonmiddlewar": [0, 1, 39], "fastapithreadedserv": [0, 1, 39], "chain_data": [0, 39], "axoninfo": [0, 1, 2, 4, 23, 39], "chaindatatyp": [0, 2, 39], "delegateinfo": [0, 2, 23, 39], "ipinfo": [0, 2, 23, 39], "neuroninfo": [0, 2, 23, 39], "neuroninfolit": [0, 2, 23, 39], "prometheusinfo": [0, 2, 39], "proposalvotedata": [0, 2, 23, 39], "stakeinfo": [0, 2, 23, 39], "subnethyperparamet": [0, 2, 23, 39], "subnetinfo": [0, 2, 23, 39], "from_scale_encod": [0, 2, 39], "from_scale_encoding_using_type_str": [0, 2, 39], "config": [0, 1, 20, 22, 23, 24, 25, 26, 37, 39], "defaultconfig": [0, 3, 39], "invalidconfigfil": [0, 3, 39], "dendrit": [0, 24, 39], "error": [0, 1, 4, 16, 20, 25, 32, 37, 39], "chainconnectionerror": [0, 5, 39], "chainerror": [0, 5, 39], "chainqueryerror": [0, 5, 39], "chaintransactionerror": [0, 5, 39], "keyfileerror": [0, 5, 19, 37, 39], "nominationerror": [0, 5, 39], "notdelegateerror": [0, 5, 7, 16, 39], "notregisterederror": [0, 5, 7, 16, 39], "registrationerror": [0, 5, 39], "stakeerror": [0, 5, 39], "transfererror": [0, 5, 39], "unstakeerror": [0, 5, 39], "keyfil": [0, 5, 37, 39], "mockkeyfil": [0, 19, 39], "ask_password_to_encrypt": [0, 19, 39], "decrypt_keyfile_data": [0, 19, 39], "deserialize_keypair_from_keyfile_data": [0, 19, 39], "encrypt_keyfile_data": [0, 19, 39], "get_coldkey_password_from_environ": [0, 19, 39], "keyfile_data_encryption_method": [0, 19, 39], "keyfile_data_is_encrypt": [0, 19, 39], "keyfile_data_is_encrypted_ans": [0, 19, 39], "keyfile_data_is_encrypted_legaci": [0, 19, 39], "keyfile_data_is_encrypted_nacl": [0, 19, 39], "legacy_encrypt_keyfile_data": [0, 19, 39], "serialized_keypair_to_keyfile_data": [0, 19, 39], "validate_password": [0, 19, 39], "log": [0, 1, 4, 11, 32, 39], "metagraph": [0, 23, 36, 37, 39], "get_save_dir": [0, 21, 39], "latest_block_path": [0, 21, 39], "stream": [0, 4, 39], "btstreamingresponsemodel": [0, 22, 39], "streamingsynaps": [0, 4, 22, 39], "subtensor": [0, 1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 32, 36, 39], "paramwithtyp": [0, 23, 39], "synaps": [0, 1, 4, 22, 39], "terminalinfo": [0, 24, 39], "cast_float": [0, 24, 39], "cast_int": [0, 24, 39], "get_siz": [0, 24, 39], "tensor": [0, 2, 24, 28, 36, 39], "cast_dtyp": [0, 25, 39], "cast_shap": [0, 25, 39], "threadpool": [0, 39], "brokenthreadpool": [0, 26, 39], "prioritythreadpoolexecutor": [0, 26, 39], "type": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 28, 29, 31, 32, 36, 37, 39], "axonservecallparam": [0, 27, 39], "prometheusservecallparam": [0, 27, 39], "wallet": [0, 1, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 29, 32, 39], "display_mnemonic_msg": [0, 37, 39], "creat": [1, 19, 22, 24, 28, 32, 37], "init": 1, "whcih": 1, "servic": 1, "forward": [1, 4], "backward": 1, "request": [1, 4, 24], "from": [1, 2, 3, 4, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 31, 36, 37], "other": [1, 4, 26, 37], "neuron": [1, 2, 4, 5, 15, 21, 23, 36], "class": [1, 2, 3, 4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 32, 33, 37], "arg": [1, 3, 4, 21, 22, 24, 25, 26, 31], "ani": [1, 2, 3, 4, 5, 9, 16, 18, 21, 22, 24, 25, 32], "kwarg": [1, 3, 4, 21, 22, 24, 25, 26, 37], "base": [1, 2, 3, 4, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37], "basehttpmiddlewar": 1, "handl": [1, 4, 22, 23, 31], "entir": [1, 4], "process": [1, 4, 11, 21, 22, 25, 32], "It": [1, 4, 19, 22, 26, 29], "fill": [1, 4], "necessari": 1, "inform": [1, 4, 11, 21], "manag": [1, 3, 4, 22, 37], "messag": [1, 4, 37], "verif": [1, 24], "blacklist": [1, 24], "check": [1, 4, 19, 20, 24, 31, 32, 35, 37], "run": [1, 11, 23, 26, 32, 37], "prioriti": [1, 26, 37], "function": [1, 4, 22, 24, 28], "thi": [1, 2, 4, 17, 19, 22, 23, 24, 26, 29, 32, 37, 39], "also": [1, 4, 22, 37], "updat": [1, 4, 11, 19, 21, 32, 33], "header": [1, 4, 22, 24], "respons": [1, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22], "async": [1, 4, 22], "i": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 35, 36, 37], "paramet": [1, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 37], "The": [1, 4, 7, 11, 14, 18, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 37], "instanc": [1, 4, 24, 26], "repres": [1, 4, 19, 21, 24, 25, 26, 29], "rais": [1, 4, 5, 7, 16, 19, 25, 26, 28, 31, 32, 37], "except": [1, 3, 5, 11, 19, 25, 26, 31, 32], "If": [1, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 32], "dispatch": 1, "starlett": [1, 22], "call_next": 1, "middlewar": 1, "requestresponseendpoint": 1, "incom": 1, "call": [1, 4, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 22, 26, 27], "after": [1, 4, 22, 26, 36], "return": [1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37], "postprocess": 1, "start_tim": 1, "float": [1, 2, 4, 7, 12, 15, 16, 17, 18, 23, 24, 28, 29, 32, 33, 36], "perform": [1, 29], "post": 1, "oper": [1, 19, 29, 36, 37], "starlet": 1, "start": [1, 2, 32], "time": [1, 21, 26, 33], "preprocess": [1, 4], "gener": [1, 4, 22, 37], "state": [1, 4, 21], "object": [1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 33, 37], "execut": [1, 26], "A": [1, 3, 4, 22, 24, 26, 29, 32, 33], "determin": [1, 4, 23], "urgenc": 1, "compar": 1, "param": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 29, 31, 32, 36, 37], "out": [1, 20], "verifi": [1, 19], "fail": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 26, 31], "server": [1, 4, 22], "install_signal_handl": 1, "is_run": 1, "bool": [1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 35, 37], "fals": [1, 2, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 28, 32, 35, 37], "run_in_thread": 1, "should_exit": 1, "stop": [1, 32], "none": [1, 2, 4, 7, 10, 11, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 32, 36, 37], "port": [1, 2, 10, 14, 23, 27, 31], "int": [1, 2, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37], "ip": [1, 2, 4, 10, 14, 21, 23, 27, 31], "str": [1, 2, 3, 4, 7, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 35, 37], "external_ip": [1, 4, 31], "external_port": 1, "max_work": [1, 26], "an": [1, 2, 4, 5, 10, 14, 19, 22, 24, 25, 28, 29, 31, 32, 37], "form": [1, 31], "core": [1, 31, 32], "part": 1, "": [1, 4, 11, 16, 21, 22, 24, 32, 37], "serv": [1, 2, 6, 10, 23, 27], "reli": 1, "heavili": 1, "underli": 1, "fastapi": [1, 4], "router": [1, 31], "which": [1, 3, 12, 15, 22, 23, 24, 37], "endpoint": [1, 2, 4, 10, 14, 23, 31], "differ": [1, 3, 20, 24, 29, 32], "method": [1, 4, 22, 23, 24, 26, 29], "ar": [1, 4, 5, 19, 23, 24, 25, 26, 28, 37], "equip": 1, "deal": 1, "scenario": [1, 4, 19], "network": [1, 4, 6, 10, 12, 14, 21, 22, 23, 28, 36], "face": [1, 31], "accept": [1, 20, 26, 37], "multipl": [1, 4, 32], "argument": [1, 20, 23, 26, 37], "like": [1, 23], "configur": [1, 3], "address": [1, 4, 7, 16, 17, 18, 21, 23, 28, 35, 37], "bind": 1, "extern": [1, 4, 31], "max": [1, 36], "worker": [1, 26], "kei": [1, 12, 15, 17, 19, 23, 28, 35, 37], "involv": 1, "applic": [1, 22], "includ": [1, 4, 9, 13, 16, 18, 22], "attach": 1, "offer": 1, "flexibl": 1, "specifi": [1, 4, 7, 16, 18, 21, 23], "custom": [1, 24], "rule": 1, "priorit": 1, "against": [1, 19], "encapsul": [1, 4, 22], "add": [1, 3, 16, 23, 24], "command": 1, "line": [1, 32], "user": [1, 2, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 37], "friendli": 1, "interact": [1, 23, 29], "program": 1, "support": [1, 19], "defin": [1, 19], "behavior": [1, 24], "intern": [1, 4, 22], "mechan": 1, "thread": [1, 11, 26, 32], "pool": 1, "concurr": [1, 4], "us": [1, 4, 5, 11, 14, 16, 18, 19, 21, 22, 23, 24, 26, 32, 37], "level": 1, "exampl": [1, 4], "usag": [1, 4], "python": [1, 39], "import": 1, "mysyanps": 1, "input": [1, 2, 4, 19, 24, 37], "1": [1, 2, 26, 28, 33, 36], "output": 1, "def": 1, "appli": 1, "logic": [1, 22, 24], "2": [1, 2], "verify_my_synaps": 1, "option": [1, 4, 7, 19, 21, 23, 24, 25, 32, 37], "fucntion": 1, "blacklist_my_synaps": 1, "non": [1, 5, 19, 24, 37], "true": [1, 2, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 32, 35, 37], "prioritize_my_synap": 1, "0": [1, 2, 4, 11, 12, 14, 15, 23, 28, 31, 32, 33, 36], "initi": [1, 4, 21, 22, 26], "my_axon": 1, "my_config": 1, "my_wallet": 1, "9090": 1, "192": [1, 10, 14], "203": 1, "113": 1, "7070": 1, "forward_fn": 1, "forward_my_synaps": 1, "verify_fn": 1, "blacklist_fn": 1, "priority_fn": 1, "forward_my_synapse_2": 1, "verify_my_synapse_2": 1, "blacklist_my_synapse_2": 1, "prioritize_my_synape_2": 1, "netuid": [1, 2, 9, 10, 11, 12, 14, 15, 21, 23, 27, 32, 36], "classmethod": [1, 2, 3, 20, 23, 24, 26, 37], "add_arg": [1, 20, 23, 26, 37], "parser": [1, 20, 23, 26, 37], "argumentpars": [1, 20, 23, 26, 37], "prefix": [1, 20, 23, 24, 26, 37], "axonserv": 1, "specif": [1, 9, 20, 22, 24, 26, 37], "argpars": [1, 37], "ad": [1, 24], "name": [1, 2, 9, 19, 21, 23, 24, 28, 37], "default": [1, 3, 4, 16, 18, 19, 23, 24, 28, 32, 37], "environ": [1, 19, 32], "variabl": [1, 19, 24], "valu": [1, 2, 3, 9, 12, 15, 21, 23, 24, 25, 28, 31, 33, 36], "callabl": [1, 22, 26, 28], "regist": [1, 5, 7, 9, 11, 12, 13, 16, 23, 32], "api": 1, "first": [1, 16, 24], "when": [1, 4, 5, 24, 26, 28, 31, 32], "access": [1, 4, 24, 37], "should": [1, 4, 11, 22, 23, 24, 32, 37], "have": [1, 24, 26], "least": 1, "one": [1, 3, 4, 26], "filter": [1, 20], "undesir": 1, "take": [1, 2, 3, 22, 28], "same": [1, 32, 37], "boolean": [1, 3, 28], "mean": [1, 24, 32], "rank": [1, 2, 21], "numer": 1, "sort": [1, 28], "self": [1, 3, 4, 24, 33], "default_verifi": 1, "note": [1, 4, 31, 37], "design": [1, 4, 19, 22], "receiv": [1, 4], "assertionerror": 1, "doe": [1, 19, 23, 24, 28, 32], "signatur": [1, 22], "yoursynaps": 1, "potenti": 1, "chain": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27, 36], "check_config": [1, 20], "hold": [1, 37], "set": [1, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 34, 37], "rang": [1, 31], "1024": 1, "65535": 1, "pars": [1, 4, 22, 24], "authent": 1, "digit": 1, "ensur": [1, 4, 22], "wa": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24], "tamper": 1, "sent": [1, 22], "expect": [1, 4, 22], "sender": 1, "receiver_hotkei": 1, "doesn": 1, "t": [1, 3, 21, 28], "match": 1, "nonc": [1, 11, 32], "larger": 1, "than": [1, 36], "previou": 1, "success": [1, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24], "given": [1, 12, 15, 23, 24, 25, 26, 28, 29, 32, 35], "assum": 1, "asymmetr": 1, "encrypt": [1, 19, 37], "algorithm": 1, "where": [1, 4, 19, 29], "sign": [1, 4], "privat": 1, "public": [1, 17, 23, 37], "help": [1, 20, 23, 37], "print": [1, 4, 19, 20, 23, 32, 37], "text": 1, "list": [1, 2, 3, 4, 11, 12, 15, 16, 18, 21, 23, 25, 28, 32, 36, 37], "descript": 1, "stdout": [1, 20, 23, 37], "info": [1, 2, 20, 23], "associ": [1, 2, 23, 26], "pass": [1, 7, 12, 15, 16, 19, 22, 23, 31, 36, 37], "connect": [1, 4, 5, 23], "subnet": [1, 2, 11, 23, 32, 36], "uid": [1, 2, 9, 10, 12, 14, 15, 16, 18, 21, 23, 36], "grpc": 1, "mark": 1, "verify_body_integr": 1, "asynchron": [1, 4, 22], "integr": 1, "bodi": [1, 22, 24], "requir": [1, 5, 19, 22, 31, 32, 37], "field": [1, 24], "correspond": [1, 12, 15], "provid": [1, 4, 19, 22, 24, 29, 39], "critic": 1, "payload": 1, "ha": [1, 2, 3, 4, 22], "been": [1, 3, 4, 22, 24, 26], "alter": 1, "dure": [1, 4], "transmiss": 1, "establish": [1, 4], "trust": [1, 2, 21], "secur": 1, "between": [1, 11, 29, 36], "contain": [1, 4, 22, 37], "both": 1, "dictionari": [1, 2, 21, 24], "all": [1, 3, 4, 16, 18, 23, 26, 31], "comparison": [1, 29], "indic": [1, 3, 4, 19, 24, 28], "intact": 1, "dict": [1, 2, 4, 21, 22, 23, 24, 28, 32, 37], "jsonrespons": 1, "400": 1, "statu": [1, 24, 32], "code": [1, 24, 37], "issu": 1, "detail": 1, "mismatch": 1, "depend": 1, "rout": 1, "app": 1, "some_endpoint": 1, "body_dict": 1, "avail": 1, "onli": [1, 37], "version": [2, 12, 15, 19, 21, 27, 31], "ip_typ": [2, 27, 31], "hotkei": [2, 5, 7, 12, 15, 16, 18, 21, 23, 37], "coldkei": [2, 16, 18, 21, 23, 37], "protocol": [2, 14, 23], "4": [2, 10, 14, 31], "placeholder1": [2, 14, 23], "placeholder2": [2, 14, 23], "from_neuron_info": 2, "neuron_info": 2, "convert": [2, 24, 28, 29, 36], "axon_info": 2, "from_parameter_dict": 2, "parameter_dict": 2, "torch": [2, 12, 15, 21, 23, 25, 28, 36], "nn": [2, 21], "parameterdict": 2, "ip_str": [2, 31], "whole": 2, "string": [2, 3, 4, 19, 24, 25, 28, 29, 31, 37], "properti": [2, 4, 19, 21, 23, 24, 26, 29, 37], "is_serv": 2, "to_parameter_dict": 2, "qualnam": 2, "boundari": 2, "enum": 2, "3": [2, 11, 23, 31, 32], "delegatedinfo": 2, "5": 2, "7": 2, "6": [2, 31], "8": [2, 28], "hotkey_ss58": [2, 16, 18, 23], "total_stak": [2, 21, 23], "balanc": [2, 7, 16, 17, 18, 23, 28, 37], "nomin": [2, 5, 23], "tupl": [2, 23, 36, 37], "owner_ss58": 2, "validator_permit": [2, 21], "registr": [2, 5, 6, 28], "return_per_1000": 2, "total_daily_return": 2, "dataclass": 2, "deleg": [2, 5, 6, 16, 23], "delegated_list_from_vec_u8": 2, "vec_u8": 2, "amount": [2, 7, 16, 17, 18, 23, 29, 33], "stake": [2, 5, 6, 7, 17, 18, 21, 23, 37], "fix_decoded_valu": 2, "decod": [2, 23], "fix": 2, "from_vec_u8": 2, "list_from_vec_u8": 2, "encod": [2, 24, 28], "can": [2, 4, 22, 26, 37], "activ": [2, 21], "stake_dict": 2, "emiss": [2, 21], "incent": [2, 21, 23], "consensu": [2, 21], "validator_trust": [2, 21], "dividend": [2, 21], "last_upd": [2, 21], "weight": [2, 12, 15, 21, 23, 36, 37], "bond": [2, 21, 23, 36], "prometheus_info": 2, "pruning_scor": 2, "is_nul": 2, "metadata": [2, 21, 23], "neuron_info_decod": 2, "from_weights_bonds_and_neuron_lit": 2, "neuron_lit": 2, "weights_as_dict": 2, "bonds_as_dict": 2, "without": [2, 4, 19], "block": [2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 28, 32], "prometheu": [2, 6, 27], "prometheus_info_decod": 2, "typeddict": [2, 23, 27], "ay": 2, "end": 2, "index": [2, 23, 28], "nai": 2, "threshold": 2, "coldkey_ss58": [2, 23], "list_of_tuple_from_vec_u8": 2, "rho": [2, 23], "kappa": [2, 23], "immunity_period": [2, 23], "min_allowed_weight": [2, 23], "max_weight_limit": [2, 23], "tempo": [2, 23], "min_difficulti": 2, "max_difficulti": 2, "weights_vers": 2, "weights_rate_limit": 2, "adjustment_interv": 2, "activity_cutoff": 2, "registration_allow": 2, "target_regs_per_interv": 2, "min_burn": 2, "max_burn": 2, "bonds_moving_avg": 2, "max_regs_per_block": 2, "hyperparamet": [2, 9], "difficulti": [2, 23, 32], "max_allowed_valid": [2, 23], "scaling_law_pow": [2, 23], "subnetwork_n": [2, 23], "max_n": [2, 23], "blocks_since_epoch": [2, 23], "modal": 2, "connection_requir": 2, "emission_valu": 2, "burn": [2, 23], "byte": [2, 19, 23, 28, 32, 35, 37], "scalecodec": [2, 23], "scalebyt": 2, "type_nam": 2, "is_vec": 2, "is_opt": 2, "type_str": 2, "implement": [3, 4, 22, 24, 26, 37], "get": [3, 4, 11, 20, 21, 24, 26, 28, 33, 37], "In": [3, 4, 24, 31], "place": [3, 32], "yamlerror": 3, "defaultmunch": 3, "copi": 3, "is_set": 3, "param_nam": 3, "whether": [3, 21, 37], "still": 3, "merg": [3, 4], "b": [3, 21], "current": [3, 19, 21, 23, 24, 32], "anoth": 3, "merge_al": 3, "conflict": 3, "last": [3, 21, 33], "preced": 3, "to_str": 3, "item": [3, 24], "update_with_kwarg": 3, "inherit": [4, 24], "pytorch": 4, "abstract": [4, 22], "client": [4, 22], "brain": 4, "analogi": 4, "signal": 4, "case": 4, "here": 4, "send": [4, 22], "those": 4, "reciev": [4, 17], "keypair": [4, 19, 37], "make": [4, 17], "http": [4, 24], "local": [4, 23, 31], "system": [4, 19], "synapse_histori": 4, "histor": 4, "__str__": 4, "represent": [4, 14, 24, 31, 36], "__repr__": 4, "act": 4, "fallback": 4, "queri": [4, 5, 23], "synchron": [4, 21], "target": 4, "timeout": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 28], "12": [4, 37], "deseri": [4, 19, 22, 24, 25], "run_async": 4, "collat": 4, "target_axon": 4, "call_stream": 4, "asyncgener": 4, "yield": 4, "chunk": [4, 22], "befor": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 32], "final": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24], "element": [4, 25], "preprocess_synapse_for_request": 4, "target_axon_info": 4, "build": 4, "process_server_respons": 4, "server_respons": 4, "json_respons": 4, "local_synaps": 4, "close_sess": 4, "close": 4, "aiohttp": 4, "session": 4, "aclose_sess": 4, "work": [4, 32], "recommend": 4, "context": [4, 19, 24], "aysnc": 4, "d": [4, 21], "ping": 4, "howev": 4, "you": [4, 5], "abl": 4, "safe": [4, 26, 37], "similar": 4, "within": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 32], "relat": [4, 5], "resourc": [4, 26], "releas": 4, "await": [4, 22], "dendrite_inst": 4, "pydant": [4, 22], "basemodel": [4, 22, 24, 25], "data": [4, 19, 22, 23, 25], "through": [4, 37], "wait": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 26], "union": [4, 7, 11, 12, 15, 16, 17, 18, 25, 32, 35, 37], "new": [4, 9, 24, 32, 37], "maximum": [4, 11], "durat": 4, "second": [4, 33], "back": [4, 20, 22], "each": [4, 16, 18, 23, 37], "larg": 4, "piec": 4, "transmit": 4, "arbitrari": 4, "exhaust": 4, "manner": 4, "ti": 4, "longer": 4, "need": [4, 19], "typic": [4, 22, 24], "cleanup": 4, "phase": 4, "bittenst": 4, "bridg": 4, "sequenti": 4, "them": [4, 22, 37], "off": [4, 28], "unifi": 4, "format": [4, 20, 22, 23, 28, 31, 35], "iter": 4, "over": 4, "individu": 4, "For": [4, 24], "dendrt": 4, "singl": 4, "otherwis": [4, 24, 26, 35], "its": [4, 24], "json": [4, 22, 37], "attribut": 4, "silent": 4, "ignor": [4, 19], "automat": 4, "upon": 4, "complet": [4, 26], "clientsess": 4, "alreadi": [4, 32], "instanti": [4, 22], "baseexcept": 5, "transact": [5, 7], "thrown": 5, "corrupt": [5, 19, 37], "writabl": [5, 19], "readabl": [5, 19], "password": [5, 19, 37], "decrypt": [5, 19, 37], "invalid": [5, 25], "try": 5, "transfer": [5, 6, 23, 37], "unstak": [5, 6, 7, 23, 37], "delegate_extrins": [6, 7], "nominate_extrins": [6, 7], "undelegate_extrins": [6, 7], "log_util": 6, "register_subnetwork_extrins": [6, 9], "set_hyperparameter_extrins": [6, 9], "prometheus_extrins": [6, 10], "maxattemptsexcept": [6, 11], "maxsuccessexcept": [6, 11], "burned_register_extrins": [6, 11], "register_extrins": [6, 11], "run_faucet_extrins": [6, 11], "root": [6, 23, 28, 36], "root_register_extrins": [6, 12], "set_root_weights_extrins": [6, 12], "senat": 6, "leave_senate_extrins": [6, 13], "register_senate_extrins": [6, 13], "vote_senate_extrins": [6, 13], "serve_axon_extrins": [6, 14], "serve_extrins": [6, 14], "set_weight": [6, 23], "set_weights_extrins": [6, 15], "add_stake_extrins": [6, 16], "add_stake_multiple_extrins": [6, 16], "transfer_extrins": [6, 17], "unstake_extrins": [6, 18], "unstake_multiple_extrins": [6, 18], "delegate_ss58": [7, 23], "wait_for_inclus": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "wait_for_fin": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "prompt": [7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "ss58": [7, 16, 18, 23, 28, 35, 37], "interpret": [7, 16, 17, 18], "tao": [7, 11, 16, 17, 18, 23, 29, 37], "enter": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 37], "confirm": [7, 9, 11, 12, 13, 14, 15, 16, 17, 18], "proceed": [7, 9, 11, 12, 13, 14, 15, 16, 17, 18], "flag": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23], "unclud": [7, 10, 11, 12, 14, 15, 16, 17, 18], "we": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 31], "did": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "inclus": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "becom": [7, 23], "un": 7, "subnetwork": 9, "subscrib": [10, 14, 37], "substensor": [10, 14], "host": [10, 14], "e": [10, 14, 21, 23, 37], "122": [10, 14], "31": [10, 14], "number": [10, 11, 14, 21, 23, 28, 32, 33, 36, 37], "9221": [10, 14], "recycl": [11, 23], "max_allowed_attempt": [11, 23], "output_in_plac": [11, 23, 32], "cuda": [11, 23, 32], "dev_id": [11, 23, 32], "tpb": [11, 23, 32], "256": [11, 23, 24, 32], "num_process": [11, 23, 32], "update_interv": [11, 23, 32], "log_verbos": [11, 23, 32], "attempt": [11, 24, 31], "devic": [11, 19, 32, 37], "id": [11, 24, 32], "per": [11, 32, 33], "solv": [11, 32], "more": [11, 32], "continu": 11, "pow": [11, 29, 32], "faucet": 11, "test": [11, 19, 23], "net": 11, "longtensor": [12, 15, 23, 28, 36], "floattensor": [12, 15, 21, 23, 36], "version_kei": [12, 15, 23], "account": [12, 15, 16, 17, 23, 28], "subent": [12, 15], "must": [12, 15, 22, 31, 37], "valid": [12, 15, 19, 21, 22, 23, 31, 35], "remov": [13, 18, 23], "vote": [13, 23], "proposal_hash": [13, 23], "proposal_idx": [13, 23], "being": [14, 22], "placehold": 14, "futur": [14, 26], "uint64": 15, "destin": [15, 17, 23, 35, 36], "common": [16, 18, 23], "dest": [17, 23], "keep_al": 17, "fund": [17, 23, 37], "ss58_address": [17, 23, 28, 35, 37], "ed25519": [17, 35], "keep": [17, 37], "aliv": 17, "abov": 17, "existenti": [17, 23], "deposit": [17, 23], "path": [19, 21, 37], "mock": 19, "exist": [19, 23, 32, 37], "simul": 19, "actual": 19, "filesystem": 19, "store": [19, 29], "treat": 19, "serial": [19, 24, 25], "check_and_update_encrypt": 19, "no_prompt": 19, "print_result": 19, "do": 19, "anyth": [19, 28], "sinc": [19, 33], "valueerror": [19, 28, 32], "alwai": 19, "exists_on_devic": 19, "although": 19, "file": [19, 37], "get_keypair": 19, "is_encrypt": 19, "is_read": 19, "read": 19, "is_writ": 19, "written": 19, "make_dir": 19, "directori": [19, 21], "noth": 19, "set_keypair": 19, "overwrit": [19, 37], "rtype": [19, 23, 31, 37], "keyfile_data": 19, "coldkey_nam": 19, "ansibl": 19, "vault": 19, "ask": 19, "cold": 19, "retriev": [19, 22, 24], "decrypted_data": 19, "incorrect": [19, 37], "substrateinterfac": [19, 23, 37], "load": [19, 21, 37], "cannot": [19, 31], "construct": [19, 24], "encrypted_data": 19, "found": 19, "interfac": [19, 22], "substrat": [19, 23], "result": [19, 24], "skip": 19, "most": 19, "nacl": 19, "els": [19, 28], "under": [19, 37], "on_devic": 19, "thei": 19, "write": 19, "forc": 19, "encryption_method": 19, "is_ans": 19, "legaci": 19, "is_legaci": 19, "is_nacl": 19, "polici": 19, "meet": 19, "standard": 20, "debug": 20, "trace": 20, "record_log": 20, "logging_dir": 20, "fro": 20, "sufix": 20, "get_level": 20, "log_filt": 20, "record": 20, "log_formatt": 20, "accord": [20, 22], "extra": 20, "log_save_filt": 20, "log_save_formatt": 20, "set_debug": 20, "debug_on": 20, "cl": 20, "set_trac": 20, "trace_on": 20, "warn": [20, 37], "dir_path": 21, "latest": [21, 23], "neural": 21, "graph": 21, "n": [21, 28, 30, 36], "total": [21, 24], "permit": 21, "c": 21, "r": 21, "tv": 21, "w": [21, 31], "load_from_path": 21, "save": [21, 37], "sync": [21, 23], "lite": [21, 23], "model": 22, "token": [22, 23, 37], "streamer": 22, "btstreamingrespons": 22, "content": [22, 28], "conform": 22, "clear": 22, "token_stream": 22, "asgi": 22, "abc": 22, "subclass": [22, 24], "extract": [22, 24], "streamingrespons": 22, "special": 22, "intend": [22, 24], "directli": [22, 24], "modifi": 22, "develop": 22, "instead": 22, "create_streaming_respons": 22, "stream_respons": 22, "appropri": [22, 24], "event": [22, 33], "validate_assign": [22, 24, 25], "readi": 22, "extract_response_json": 22, "structur": 22, "process_streaming_respons": 22, "accumul": 22, "_mock": 23, "factori": 23, "By": [23, 24], "finnei": 23, "main": 23, "add_stak": 23, "add_stake_multipl": 23, "associated_validator_ip_info": 23, "g": 23, "validator_ip_info": 23, "burned_regist": 23, "static": [23, 25, 29], "determine_chain_endpoint_and_network": 23, "chain_endpoint": 23, "choic": 23, "overrid": 23, "does_hotkey_exist": 23, "get_all_neurons_for_pubkei": 23, "get_all_subnet_netuid": 23, "get_all_subnets_info": 23, "get_all_uids_for_hotkei": 23, "get_axon_info": 23, "get_bal": 23, "42": 23, "get_block_hash": 23, "block_id": 23, "get_current_block": 23, "blocknumb": 23, "block_numb": [23, 32], "get_delegate_by_hotkei": 23, "get_delegate_tak": 23, "get_deleg": 23, "get_emission_value_by_subnet": 23, "get_existential_deposit": 23, "get_hotkey_own": 23, "get_netuids_for_hotkei": 23, "get_neuron_for_pubkey_and_subnet": 23, "get_nominators_for_hotkei": 23, "get_prometheus_info": 23, "get_proposal_call_data": 23, "genericcal": 23, "get_proposal_hash": 23, "get_proposal_vote_data": 23, "get_propos": 23, "get_senate_memb": 23, "get_stak": 23, "get_stake_for_coldkey_and_hotkei": 23, "get_stake_info_for_coldkei": 23, "coldkey_ss58_list": 23, "get_subnet_burn_cost": 23, "get_subnet_connection_requir": 23, "netuid_0": 23, "netuid_1": 23, "get_subnet_hyperparamet": 23, "get_subnet_info": 23, "get_subnet_mod": 23, "get_subnet_own": 23, "get_subnet": 23, "get_total_stake_for_coldkei": 23, "get_total_stake_for_hotkei": 23, "get_total_subnet": 23, "get_transfer_fe": 23, "get_uid_for_hotkey_on_subnet": 23, "get_vote_data": 23, "i_map": 23, "is_hotkey_deleg": 23, "is_hotkey_regist": 23, "is_hotkey_registered_ani": 23, "is_hotkey_registered_on_subnet": 23, "is_senate_memb": 23, "leave_sen": 23, "neuron_for_uid": 23, "particular": 23, "neuron_for_uid_lit": 23, "neuron_for_wallet": 23, "neuron_has_validator_permit": 23, "pull": 23, "neurons_lit": 23, "query_const": 23, "module_nam": 23, "constant_nam": 23, "query_map": 23, "query_map_subtensor": 23, "querymapresult": 23, "query_modul": 23, "query_runtime_api": 23, "runtime_api": 23, "scale": 23, "query_subtensor": 23, "register_sen": 23, "register_subnetwork": 23, "root_regist": 23, "root_set_weight": 23, "run_faucet": 23, "serve_axon": 23, "serve_prometheu": 23, "serving_rate_limit": 23, "set_hyperparamet": 23, "620": 23, "setup_config": 23, "state_cal": 23, "subnet_exist": 23, "synergy_scaling_law_pow": 23, "total_issu": 23, "tx_rate_limit": 23, "undeleg": 23, "unstake_multipl": 23, "validator_batch_s": 23, "validator_epoch_length": 23, "validator_epochs_per_reset": 23, "validator_exclude_quantil": 23, "validator_logits_diverg": 23, "validator_prune_len": 23, "validator_sequence_length": 23, "vote_sen": 23, "body_hash": 24, "comput": 24, "sha3": 24, "compris": 24, "required_fields_hash": 24, "concaten": 24, "hexadecim": 24, "overridden": 24, "superclass": 24, "simpli": 24, "itself": 24, "own": 24, "desir": 24, "failed_verif": 24, "401": 24, "unauthor": 24, "from_head": 24, "get_total_s": 24, "size": 24, "calcul": 24, "assign": 24, "total_s": 24, "is_blacklist": 24, "403": 24, "forbidden": 24, "is_failur": 24, "failur": 24, "200": 24, "would": 24, "is_success": 24, "is_timeout": 24, "408": 24, "parse_headers_to_input": 24, "input_obj": 24, "identifi": 24, "transform": 24, "remain": 24, "set_name_typ": 24, "to_head": 24, "taken": 24, "further": 24, "raw": [24, 25], "integ": [24, 29, 31, 36], "obj": 24, "seen": 24, "recurs": 24, "find": 24, "travers": 24, "everi": 24, "sum": [24, 36], "buffer": 25, "dtype": 25, "shape": 25, "encount": 25, "numpi": 25, "ndarrai": 25, "tolist": 25, "cast": 25, "threadpoolexecutor": 26, "brokenexecutor": 26, "maxsiz": 26, "thread_name_prefix": 26, "initarg": 26, "executor": 26, "queue": 26, "is_empti": 26, "shutdown": 26, "clean": 26, "up": 26, "sever": 26, "until": 26, "finish": 26, "reclaim": 26, "cancel_futur": 26, "cancel": 26, "pend": 26, "submit": 26, "fn": 26, "schedul": 26, "x": [28, 36], "network_map": 28, "explor": 28, "url": [28, 31], "map": [28, 31], "Or": 28, "block_hash": [28, 32], "known": 28, "utf": 28, "val": 28, "liter": 28, "supress": 28, "truth": 28, "y": [28, 36], "ye": 28, "f": 28, "empti": 28, "u8_kei": 28, "u8": 28, "k": 28, "dim": 28, "largest": 28, "select": 28, "topk": 28, "bia": 28, "lower": 28, "equal": [28, 32], "15": 28, "get_human_read": [28, 30], "millifi": [28, 30], "externalipnotfound": [28, 31], "get_external_ip": [28, 31], "get_formatted_ws_endpoint_url": [28, 31], "int_to_ip": [28, 31], "ip__str__": [28, 31], "ip_to_int": [28, 31], "ip_vers": [28, 31], "cudaexcept": [28, 32], "powsolut": [28, 32], "registrationstatist": [28, 32], "registrationstatisticslogg": [28, 32], "create_pow": [28, 32], "get_cpu_count": [28, 32], "stat": [28, 32], "amountpersecondrollingaverag": [28, 33], "eventspersecondrollingaverag": [28, 33], "timed_rolling_avg": [28, 33], "test_util": 28, "get_random_unused_port": [28, 34], "wallet_util": 28, "get_ss58_format": [28, 35], "is_valid_bittensor_address_or_public_kei": [28, 35], "is_valid_ed25519_pubkei": [28, 35], "is_valid_ss58_address": [28, 35], "weight_util": 28, "convert_bond_uids_and_vals_to_tensor": [28, 36], "convert_root_weight_uids_and_vals_to_tensor": [28, 36], "convert_weight_uids_and_vals_to_tensor": [28, 36], "convert_weights_and_uids_for_emit": [28, 36], "normalize_max_weight": [28, 36], "process_weights_for_netuid": [28, 36], "rao": 29, "wai": [29, 37], "two": 29, "unit": 29, "well": 29, "arithmet": 29, "symbol": 29, "rao_unit": 29, "give": 29, "from_float": 29, "10": 29, "9": 29, "from_rao": 29, "from_tao": 29, "\u03c1": 29, "\u03c4": 29, "num": 30, "suffix": 30, "h": 30, "attain": 31, "your": [31, 37], "curl": 31, "urllib": 31, "ipifi": 31, "aw": 31, "endpoint_url": 31, "websocket": 31, "lack": 31, "thereof": 31, "left": 31, "unchang": 31, "wss": 31, "formatted_endpoint_url": 31, "int_val": 31, "uniqu": 31, "4028237e": 31, "38": 31, "int128": 31, "Of": 31, "ipv4": 31, "ipv6": 31, "str_val": 31, "tyep": 31, "netaddr": 31, "addrformaterror": 31, "either": [31, 37], "occur": 32, "seal": 32, "solut": 32, "problem": 32, "is_stal": 32, "stale": 32, "time_spent_tot": 32, "rounds_tot": 32, "time_averag": 32, "time_sp": 32, "hash_rate_perpetu": 32, "hash_rat": 32, "statist": 32, "consol": 32, "rich": 32, "get_status_messag": 32, "verbos": 32, "proof": 32, "progress": 32, "32": 32, "cpu": 32, "exponenti": 33, "move": 33, "averag": 33, "initial_valu": 33, "alpha": 33, "count": 33, "quantiti": 33, "new_valu": 33, "allocated_port": 34, "public_kei": [35, 37], "convers": 36, "row": 36, "row_bond": 36, "invers": 36, "row_weight": 36, "u32": 36, "max_int_weight": 36, "weight_val": 36, "weight_uid": 36, "limit": 36, "normal": 36, "so": 36, "greater": 36, "max_valu": 36, "exclude_quantil": 36, "key_typ": 37, "displai": 37, "mnemon": 37, "mainten": 37, "primari": 37, "node": 37, "hand": 37, "link": 37, "colkei": 37, "cryptokeyerror": 37, "incorrec": 37, "coldkey_fil": 37, "coldkeypub": 37, "txt": 37, "colkeypub": 37, "coldkeypub_fil": 37, "coldkey_use_password": 37, "hotkey_use_password": 37, "create_coldkey_from_uri": 37, "uri": 37, "use_password": 37, "suppress": 37, "suri": 37, "alic": 37, "bob": 37, "protect": 37, "Will": 37, "newli": 37, "create_hotkey_from_uri": 37, "create_if_non_exist": 37, "create_new_coldkei": 37, "n_word": 37, "disk": 37, "word": 37, "create_new_hotkei": 37, "get_coldkei": 37, "get_coldkeypub": 37, "get_hotkei": 37, "hotkey_fil": 37, "new_coldkei": 37, "new_hotkei": 37, "recreat": 37, "regen_coldkei": 37, "regener": 37, "seed": 37, "space": 37, "separ": 37, "hex": 37, "restor": 37, "backup": 37, "json_data": 37, "passphras": 37, "order": 37, "regen_coldkeypub": 37, "re": 37, "regen_hotkei": 37, "regenerate_coldkei": 37, "regenerate_coldkeypub": 37, "regenerate_hotkei": 37, "set_coldkei": 37, "set_coldkeypub": 37, "set_hotkei": 37, "packag": [38, 39], "subpackag": [38, 39], "submodul": [38, 39], "section": 39, "search": 39, "page": 39}, "objects": {"bittensor": [[1, 0, 0, "-", "axon"], [2, 0, 0, "-", "chain_data"], [3, 0, 0, "-", "config"], [4, 0, 0, "-", "dendrite"], [5, 0, 0, "-", "errors"], [6, 0, 0, "-", "extrinsics"], [19, 0, 0, "-", "keyfile"], [20, 0, 0, "-", "logging"], [21, 0, 0, "-", "metagraph"], [22, 0, 0, "-", "stream"], [23, 0, 0, "-", "subtensor"], [24, 0, 0, "-", "synapse"], [25, 0, 0, "-", "tensor"], [26, 0, 0, "-", "threadpool"], [27, 0, 0, "-", "types"], [28, 0, 0, "-", "utils"], [37, 0, 0, "-", "wallet"]], "bittensor.axon": [[1, 1, 1, "", "AxonMiddleware"], [1, 1, 1, "", "FastAPIThreadedServer"], [1, 1, 1, "", "axon"]], "bittensor.axon.AxonMiddleware": [[1, 2, 1, "", "blacklist"], [1, 2, 1, "", "dispatch"], [1, 2, 1, "", "postprocess"], [1, 2, 1, "", "preprocess"], [1, 2, 1, "", "priority"], [1, 2, 1, "", "run"], [1, 2, 1, "", "verify"]], "bittensor.axon.FastAPIThreadedServer": [[1, 2, 1, "", "install_signal_handlers"], [1, 3, 1, "", "is_running"], [1, 2, 1, "", "run_in_thread"], [1, 3, 1, "", "should_exit"], [1, 2, 1, "", "start"], [1, 2, 1, "", "stop"]], "bittensor.axon.axon": [[1, 2, 1, "", "add_args"], [1, 2, 1, "", "attach"], [1, 2, 1, "", "check_config"], [1, 2, 1, "", "config"], [1, 2, 1, "", "default_verify"], [1, 2, 1, "", "help"], [1, 2, 1, "", "info"], [1, 2, 1, "", "serve"], [1, 2, 1, "", "start"], [1, 2, 1, "", "stop"], [1, 2, 1, "", "verify_body_integrity"]], "bittensor.chain_data": [[2, 1, 1, "", "AxonInfo"], [2, 1, 1, "", "ChainDataType"], [2, 1, 1, "", "DelegateInfo"], [2, 1, 1, "", "IPInfo"], [2, 1, 1, "", "NeuronInfo"], [2, 1, 1, "", "NeuronInfoLite"], [2, 1, 1, "", "PrometheusInfo"], [2, 1, 1, "", "ProposalVoteData"], [2, 1, 1, "", "StakeInfo"], [2, 1, 1, "", "SubnetHyperparameters"], [2, 1, 1, "", "SubnetInfo"], [2, 5, 1, "", "from_scale_encoding"], [2, 5, 1, "", "from_scale_encoding_using_type_string"]], "bittensor.chain_data.AxonInfo": [[2, 3, 1, "", "coldkey"], [2, 2, 1, "", "from_neuron_info"], [2, 2, 1, "", "from_parameter_dict"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "ip"], [2, 2, 1, "", "ip_str"], [2, 3, 1, "", "ip_type"], [2, 4, 1, "", "is_serving"], [2, 3, 1, "", "placeholder1"], [2, 3, 1, "", "placeholder2"], [2, 3, 1, "", "port"], [2, 3, 1, "", "protocol"], [2, 2, 1, "", "to_parameter_dict"], [2, 3, 1, "", "version"]], "bittensor.chain_data.ChainDataType": [[2, 3, 1, "", "DelegateInfo"], [2, 3, 1, "", "DelegatedInfo"], [2, 3, 1, "", "IPInfo"], [2, 3, 1, "", "NeuronInfo"], [2, 3, 1, "", "NeuronInfoLite"], [2, 3, 1, "", "StakeInfo"], [2, 3, 1, "", "SubnetHyperparameters"], [2, 3, 1, "", "SubnetInfo"]], "bittensor.chain_data.DelegateInfo": [[2, 2, 1, "", "delegated_list_from_vec_u8"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey_ss58"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "nominators"], [2, 3, 1, "", "owner_ss58"], [2, 3, 1, "", "registrations"], [2, 3, 1, "", "return_per_1000"], [2, 3, 1, "", "take"], [2, 3, 1, "", "total_daily_return"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "validator_permits"]], "bittensor.chain_data.IPInfo": [[2, 2, 1, "", "encode"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "ip"], [2, 3, 1, "", "ip_type"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "protocol"], [2, 2, 1, "", "to_parameter_dict"]], "bittensor.chain_data.NeuronInfo": [[2, 3, 1, "", "active"], [2, 3, 1, "", "axon_info"], [2, 3, 1, "", "bonds"], [2, 3, 1, "", "coldkey"], [2, 3, 1, "", "consensus"], [2, 3, 1, "", "dividends"], [2, 3, 1, "", "emission"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 2, 1, "", "from_weights_bonds_and_neuron_lite"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "incentive"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "last_update"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "prometheus_info"], [2, 3, 1, "", "pruning_score"], [2, 3, 1, "", "rank"], [2, 3, 1, "", "stake"], [2, 3, 1, "", "stake_dict"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "trust"], [2, 3, 1, "", "uid"], [2, 3, 1, "", "validator_permit"], [2, 3, 1, "", "validator_trust"], [2, 3, 1, "", "weights"]], "bittensor.chain_data.NeuronInfoLite": [[2, 3, 1, "", "active"], [2, 3, 1, "", "axon_info"], [2, 3, 1, "", "coldkey"], [2, 3, 1, "", "consensus"], [2, 3, 1, "", "dividends"], [2, 3, 1, "", "emission"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey"], [2, 3, 1, "", "incentive"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "last_update"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "prometheus_info"], [2, 3, 1, "", "pruning_score"], [2, 3, 1, "", "rank"], [2, 3, 1, "", "stake"], [2, 3, 1, "", "stake_dict"], [2, 3, 1, "", "total_stake"], [2, 3, 1, "", "trust"], [2, 3, 1, "", "uid"], [2, 3, 1, "", "validator_permit"], [2, 3, 1, "", "validator_trust"]], "bittensor.chain_data.PrometheusInfo": [[2, 3, 1, "", "block"], [2, 2, 1, "", "fix_decoded_values"], [2, 3, 1, "", "ip"], [2, 3, 1, "", "ip_type"], [2, 3, 1, "", "port"], [2, 3, 1, "", "version"]], "bittensor.chain_data.ProposalVoteData": [[2, 3, 1, "", "ayes"], [2, 3, 1, "", "end"], [2, 3, 1, "", "index"], [2, 3, 1, "", "nays"], [2, 3, 1, "", "threshold"]], "bittensor.chain_data.StakeInfo": [[2, 3, 1, "", "coldkey_ss58"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "hotkey_ss58"], [2, 2, 1, "", "list_from_vec_u8"], [2, 2, 1, "", "list_of_tuple_from_vec_u8"], [2, 3, 1, "", "stake"]], "bittensor.chain_data.SubnetHyperparameters": [[2, 3, 1, "", "activity_cutoff"], [2, 3, 1, "", "adjustment_interval"], [2, 3, 1, "", "bonds_moving_avg"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "immunity_period"], [2, 3, 1, "", "kappa"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "max_burn"], [2, 3, 1, "", "max_difficulty"], [2, 3, 1, "", "max_regs_per_block"], [2, 3, 1, "", "max_weight_limit"], [2, 3, 1, "", "min_allowed_weights"], [2, 3, 1, "", "min_burn"], [2, 3, 1, "", "min_difficulty"], [2, 3, 1, "", "registration_allowed"], [2, 3, 1, "", "rho"], [2, 3, 1, "", "target_regs_per_interval"], [2, 3, 1, "", "tempo"], [2, 2, 1, "", "to_parameter_dict"], [2, 3, 1, "", "weights_rate_limit"], [2, 3, 1, "", "weights_version"]], "bittensor.chain_data.SubnetInfo": [[2, 3, 1, "", "blocks_since_epoch"], [2, 3, 1, "", "burn"], [2, 3, 1, "", "connection_requirements"], [2, 3, 1, "", "difficulty"], [2, 3, 1, "", "emission_value"], [2, 2, 1, "", "fix_decoded_values"], [2, 2, 1, "", "from_parameter_dict"], [2, 2, 1, "", "from_vec_u8"], [2, 3, 1, "", "immunity_period"], [2, 3, 1, "", "kappa"], [2, 2, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "max_allowed_validators"], [2, 3, 1, "", "max_n"], [2, 3, 1, "", "max_weight_limit"], [2, 3, 1, "", "min_allowed_weights"], [2, 3, 1, "", "modality"], [2, 3, 1, "", "netuid"], [2, 3, 1, "", "owner_ss58"], [2, 3, 1, "", "rho"], [2, 3, 1, "", "scaling_law_power"], [2, 3, 1, "", "subnetwork_n"], [2, 3, 1, "", "tempo"], [2, 2, 1, "", "to_parameter_dict"]], "bittensor.config": [[3, 1, 1, "", "DefaultConfig"], [3, 6, 1, "", "InvalidConfigFile"], [3, 1, 1, "", "config"]], "bittensor.config.DefaultConfig": [[3, 2, 1, "", "default"]], "bittensor.config.config": [[3, 2, 1, "", "copy"], [3, 2, 1, "", "is_set"], [3, 2, 1, "", "merge"], [3, 2, 1, "", "merge_all"], [3, 2, 1, "", "to_string"], [3, 2, 1, "", "update_with_kwargs"]], "bittensor.dendrite": [[4, 1, 1, "", "dendrite"]], "bittensor.dendrite.dendrite": [[4, 2, 1, "", "__repr__"], [4, 2, 1, "", "__str__"], [4, 2, 1, "id0", "aclose_session"], [4, 2, 1, "id1", "call"], [4, 2, 1, "id2", "call_stream"], [4, 2, 1, "id3", "close_session"], [4, 3, 1, "", "external_ip"], [4, 2, 1, "id4", "forward"], [4, 3, 1, "", "keypair"], [4, 2, 1, "id5", "preprocess_synapse_for_request"], [4, 2, 1, "id6", "process_server_response"], [4, 2, 1, "id7", "query"], [4, 4, 1, "", "session"], [4, 3, 1, "", "synapse_history"]], "bittensor.errors": [[5, 6, 1, "", "ChainConnectionError"], [5, 6, 1, "", "ChainError"], [5, 6, 1, "", "ChainQueryError"], [5, 6, 1, "", "ChainTransactionError"], [5, 6, 1, "", "KeyFileError"], [5, 6, 1, "", "NominationError"], [5, 6, 1, "", "NotDelegateError"], [5, 6, 1, "", "NotRegisteredError"], [5, 6, 1, "", "RegistrationError"], [5, 6, 1, "", "StakeError"], [5, 6, 1, "", "TransferError"], [5, 6, 1, "", "UnstakeError"]], "bittensor.extrinsics": [[7, 0, 0, "-", "delegation"], [9, 0, 0, "-", "network"], [10, 0, 0, "-", "prometheus"], [11, 0, 0, "-", "registration"], [12, 0, 0, "-", "root"], [13, 0, 0, "-", "senate"], [14, 0, 0, "-", "serving"], [15, 0, 0, "-", "set_weights"], [16, 0, 0, "-", "staking"], [17, 0, 0, "-", "transfer"], [18, 0, 0, "-", "unstaking"]], "bittensor.extrinsics.delegation": [[7, 5, 1, "", "delegate_extrinsic"], [7, 5, 1, "", "nominate_extrinsic"], [7, 5, 1, "", "undelegate_extrinsic"]], "bittensor.extrinsics.network": [[9, 5, 1, "", "register_subnetwork_extrinsic"], [9, 5, 1, "", "set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[10, 5, 1, "", "prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[11, 6, 1, "", "MaxAttemptsException"], [11, 6, 1, "", "MaxSuccessException"], [11, 5, 1, "", "burned_register_extrinsic"], [11, 5, 1, "", "register_extrinsic"], [11, 5, 1, "", "run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[12, 5, 1, "", "root_register_extrinsic"], [12, 5, 1, "", "set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[13, 5, 1, "", "leave_senate_extrinsic"], [13, 5, 1, "", "register_senate_extrinsic"], [13, 5, 1, "", "vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[14, 5, 1, "", "serve_axon_extrinsic"], [14, 5, 1, "", "serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[15, 5, 1, "", "set_weights_extrinsic"]], "bittensor.extrinsics.staking": [[16, 5, 1, "", "add_stake_extrinsic"], [16, 5, 1, "", "add_stake_multiple_extrinsic"]], "bittensor.extrinsics.transfer": [[17, 5, 1, "", "transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[18, 5, 1, "", "unstake_extrinsic"], [18, 5, 1, "", "unstake_multiple_extrinsic"]], "bittensor.keyfile": [[19, 1, 1, "", "Mockkeyfile"], [19, 5, 1, "", "ask_password_to_encrypt"], [19, 5, 1, "", "decrypt_keyfile_data"], [19, 5, 1, "", "deserialize_keypair_from_keyfile_data"], [19, 5, 1, "", "encrypt_keyfile_data"], [19, 5, 1, "", "get_coldkey_password_from_environment"], [19, 1, 1, "", "keyfile"], [19, 5, 1, "", "keyfile_data_encryption_method"], [19, 5, 1, "", "keyfile_data_is_encrypted"], [19, 5, 1, "", "keyfile_data_is_encrypted_ansible"], [19, 5, 1, "", "keyfile_data_is_encrypted_legacy"], [19, 5, 1, "", "keyfile_data_is_encrypted_nacl"], [19, 5, 1, "", "legacy_encrypt_keyfile_data"], [19, 5, 1, "", "serialized_keypair_to_keyfile_data"], [19, 5, 1, "", "validate_password"]], "bittensor.keyfile.Mockkeyfile": [[19, 2, 1, "", "check_and_update_encryption"], [19, 4, 1, "", "data"], [19, 2, 1, "", "decrypt"], [19, 2, 1, "", "encrypt"], [19, 2, 1, "", "exists_on_device"], [19, 2, 1, "", "get_keypair"], [19, 2, 1, "", "is_encrypted"], [19, 2, 1, "", "is_readable"], [19, 2, 1, "", "is_writable"], [19, 4, 1, "", "keypair"], [19, 2, 1, "", "make_dirs"], [19, 2, 1, "", "set_keypair"]], "bittensor.keyfile.keyfile": [[19, 2, 1, "", "check_and_update_encryption"], [19, 4, 1, "", "data"], [19, 2, 1, "", "decrypt"], [19, 2, 1, "", "encrypt"], [19, 2, 1, "", "exists_on_device"], [19, 2, 1, "", "get_keypair"], [19, 2, 1, "", "is_encrypted"], [19, 2, 1, "", "is_readable"], [19, 2, 1, "", "is_writable"], [19, 4, 1, "", "keyfile_data"], [19, 4, 1, "", "keypair"], [19, 2, 1, "", "make_dirs"], [19, 2, 1, "", "set_keypair"]], "bittensor.logging": [[20, 1, 1, "", "logging"]], "bittensor.logging.logging": [[20, 2, 1, "", "add_args"], [20, 2, 1, "", "check_config"], [20, 2, 1, "", "config"], [20, 2, 1, "", "debug"], [20, 2, 1, "", "error"], [20, 2, 1, "", "get_level"], [20, 2, 1, "", "help"], [20, 2, 1, "", "info"], [20, 2, 1, "", "log_filter"], [20, 2, 1, "", "log_formatter"], [20, 2, 1, "", "log_save_filter"], [20, 2, 1, "", "log_save_formatter"], [20, 2, 1, "", "set_debug"], [20, 2, 1, "", "set_trace"], [20, 2, 1, "", "success"], [20, 2, 1, "", "trace"], [20, 2, 1, "", "warning"]], "bittensor.metagraph": [[21, 5, 1, "", "get_save_dir"], [21, 5, 1, "", "latest_block_path"], [21, 1, 1, "", "metagraph"]], "bittensor.metagraph.metagraph": [[21, 4, 1, "", "B"], [21, 4, 1, "", "C"], [21, 4, 1, "", "D"], [21, 4, 1, "", "E"], [21, 4, 1, "", "I"], [21, 4, 1, "", "R"], [21, 4, 1, "", "S"], [21, 4, 1, "", "T"], [21, 4, 1, "", "Tv"], [21, 4, 1, "", "W"], [21, 3, 1, "", "active"], [21, 4, 1, "", "addresses"], [21, 3, 1, "", "axons"], [21, 3, 1, "", "block"], [21, 3, 1, "", "bonds"], [21, 4, 1, "", "coldkeys"], [21, 3, 1, "", "consensus"], [21, 3, 1, "", "dividends"], [21, 3, 1, "", "emission"], [21, 4, 1, "", "hotkeys"], [21, 3, 1, "", "incentive"], [21, 3, 1, "", "last_update"], [21, 2, 1, "", "load"], [21, 2, 1, "", "load_from_path"], [21, 2, 1, "", "metadata"], [21, 3, 1, "", "n"], [21, 3, 1, "", "netuid"], [21, 3, 1, "", "network"], [21, 3, 1, "", "ranks"], [21, 2, 1, "", "save"], [21, 3, 1, "", "stake"], [21, 2, 1, "", "sync"], [21, 3, 1, "", "total_stake"], [21, 3, 1, "", "trust"], [21, 3, 1, "", "uids"], [21, 3, 1, "", "validator_permit"], [21, 3, 1, "", "validator_trust"], [21, 3, 1, "", "version"], [21, 3, 1, "", "weights"]], "bittensor.stream": [[22, 1, 1, "", "BTStreamingResponseModel"], [22, 1, 1, "", "StreamingSynapse"]], "bittensor.stream.BTStreamingResponseModel": [[22, 3, 1, "id0", "token_streamer"]], "bittensor.stream.StreamingSynapse": [[22, 1, 1, "", "BTStreamingResponse"], [22, 1, 1, "", "Config"], [22, 2, 1, "", "create_streaming_response"], [22, 2, 1, "", "extract_response_json"], [22, 2, 1, "", "process_streaming_response"]], "bittensor.stream.StreamingSynapse.BTStreamingResponse": [[22, 2, 1, "", "stream_response"]], "bittensor.stream.StreamingSynapse.Config": [[22, 3, 1, "", "validate_assignment"]], "bittensor.subtensor": [[23, 1, 1, "", "ParamWithTypes"], [23, 1, 1, "", "subtensor"]], "bittensor.subtensor.ParamWithTypes": [[23, 3, 1, "", "name"], [23, 3, 1, "", "type"]], "bittensor.subtensor.subtensor": [[23, 2, 1, "", "add_args"], [23, 2, 1, "", "add_stake"], [23, 2, 1, "", "add_stake_multiple"], [23, 2, 1, "", "associated_validator_ip_info"], [23, 4, 1, "", "block"], [23, 2, 1, "", "blocks_since_epoch"], [23, 2, 1, "", "bonds"], [23, 2, 1, "", "burn"], [23, 2, 1, "", "burned_register"], [23, 2, 1, "", "config"], [23, 2, 1, "", "delegate"], [23, 2, 1, "", "determine_chain_endpoint_and_network"], [23, 2, 1, "", "difficulty"], [23, 2, 1, "", "does_hotkey_exist"], [23, 2, 1, "", "get_all_neurons_for_pubkey"], [23, 2, 1, "", "get_all_subnet_netuids"], [23, 2, 1, "", "get_all_subnets_info"], [23, 2, 1, "", "get_all_uids_for_hotkey"], [23, 2, 1, "", "get_axon_info"], [23, 2, 1, "", "get_balance"], [23, 2, 1, "", "get_balances"], [23, 2, 1, "", "get_block_hash"], [23, 2, 1, "", "get_current_block"], [23, 2, 1, "", "get_delegate_by_hotkey"], [23, 2, 1, "", "get_delegate_take"], [23, 2, 1, "", "get_delegated"], [23, 2, 1, "", "get_delegates"], [23, 2, 1, "", "get_emission_value_by_subnet"], [23, 2, 1, "", "get_existential_deposit"], [23, 2, 1, "", "get_hotkey_owner"], [23, 2, 1, "", "get_netuids_for_hotkey"], [23, 2, 1, "", "get_neuron_for_pubkey_and_subnet"], [23, 2, 1, "", "get_nominators_for_hotkey"], [23, 2, 1, "", "get_prometheus_info"], [23, 2, 1, "", "get_proposal_call_data"], [23, 2, 1, "", "get_proposal_hashes"], [23, 2, 1, "", "get_proposal_vote_data"], [23, 2, 1, "", "get_proposals"], [23, 2, 1, "", "get_senate_members"], [23, 2, 1, "", "get_stake"], [23, 2, 1, "", "get_stake_for_coldkey_and_hotkey"], [23, 2, 1, "", "get_stake_info_for_coldkey"], [23, 2, 1, "", "get_stake_info_for_coldkeys"], [23, 2, 1, "", "get_subnet_burn_cost"], [23, 2, 1, "", "get_subnet_connection_requirement"], [23, 2, 1, "", "get_subnet_connection_requirements"], [23, 2, 1, "", "get_subnet_hyperparameters"], [23, 2, 1, "", "get_subnet_info"], [23, 2, 1, "", "get_subnet_modality"], [23, 2, 1, "", "get_subnet_owner"], [23, 2, 1, "", "get_subnets"], [23, 2, 1, "", "get_total_stake_for_coldkey"], [23, 2, 1, "", "get_total_stake_for_hotkey"], [23, 2, 1, "", "get_total_subnets"], [23, 2, 1, "", "get_transfer_fee"], [23, 2, 1, "", "get_uid_for_hotkey_on_subnet"], [23, 2, 1, "", "get_vote_data"], [23, 2, 1, "", "help"], [23, 2, 1, "", "immunity_period"], [23, 2, 1, "", "incentive"], [23, 2, 1, "", "is_hotkey_delegate"], [23, 2, 1, "", "is_hotkey_registered"], [23, 2, 1, "", "is_hotkey_registered_any"], [23, 2, 1, "", "is_hotkey_registered_on_subnet"], [23, 2, 1, "", "is_senate_member"], [23, 2, 1, "", "kappa"], [23, 2, 1, "", "leave_senate"], [23, 2, 1, "", "max_allowed_validators"], [23, 2, 1, "", "max_n"], [23, 2, 1, "", "max_weight_limit"], [23, 2, 1, "", "metagraph"], [23, 2, 1, "", "min_allowed_weights"], [23, 2, 1, "", "neuron_for_uid"], [23, 2, 1, "", "neuron_for_uid_lite"], [23, 2, 1, "", "neuron_for_wallet"], [23, 2, 1, "", "neuron_has_validator_permit"], [23, 2, 1, "", "neurons"], [23, 2, 1, "", "neurons_lite"], [23, 2, 1, "", "nominate"], [23, 2, 1, "", "query_constant"], [23, 2, 1, "", "query_map"], [23, 2, 1, "", "query_map_subtensor"], [23, 2, 1, "", "query_module"], [23, 2, 1, "", "query_runtime_api"], [23, 2, 1, "", "query_subtensor"], [23, 2, 1, "", "register"], [23, 2, 1, "", "register_senate"], [23, 2, 1, "", "register_subnetwork"], [23, 2, 1, "", "rho"], [23, 2, 1, "", "root_register"], [23, 2, 1, "", "root_set_weights"], [23, 2, 1, "", "run_faucet"], [23, 2, 1, "", "scaling_law_power"], [23, 2, 1, "", "serve"], [23, 2, 1, "", "serve_axon"], [23, 2, 1, "", "serve_prometheus"], [23, 2, 1, "", "serving_rate_limit"], [23, 2, 1, "", "set_hyperparameter"], [23, 2, 1, "", "set_weights"], [23, 2, 1, "", "setup_config"], [23, 2, 1, "", "state_call"], [23, 2, 1, "", "subnet_exists"], [23, 2, 1, "", "subnetwork_n"], [23, 2, 1, "", "synergy_scaling_law_power"], [23, 2, 1, "", "tempo"], [23, 2, 1, "", "total_issuance"], [23, 2, 1, "", "total_stake"], [23, 2, 1, "", "transfer"], [23, 2, 1, "", "tx_rate_limit"], [23, 2, 1, "", "undelegate"], [23, 2, 1, "", "unstake"], [23, 2, 1, "", "unstake_multiple"], [23, 2, 1, "", "validator_batch_size"], [23, 2, 1, "", "validator_epoch_length"], [23, 2, 1, "", "validator_epochs_per_reset"], [23, 2, 1, "", "validator_exclude_quantile"], [23, 2, 1, "", "validator_logits_divergence"], [23, 2, 1, "", "validator_prune_len"], [23, 2, 1, "", "validator_sequence_length"], [23, 2, 1, "", "vote_senate"], [23, 2, 1, "", "weights"]], "bittensor.synapse": [[24, 1, 1, "", "Synapse"], [24, 1, 1, "", "TerminalInfo"], [24, 5, 1, "", "cast_float"], [24, 5, 1, "", "cast_int"], [24, 5, 1, "", "get_size"]], "bittensor.synapse.Synapse": [[24, 1, 1, "", "Config"], [24, 4, 1, "", "body_hash"], [24, 2, 1, "", "deserialize"], [24, 4, 1, "", "failed_verification"], [24, 2, 1, "", "from_headers"], [24, 2, 1, "", "get_total_size"], [24, 4, 1, "", "is_blacklist"], [24, 4, 1, "", "is_failure"], [24, 4, 1, "", "is_success"], [24, 4, 1, "", "is_timeout"], [24, 2, 1, "", "parse_headers_to_inputs"], [24, 2, 1, "", "set_name_type"], [24, 2, 1, "", "to_headers"]], "bittensor.synapse.Synapse.Config": [[24, 3, 1, "", "validate_assignment"]], "bittensor.synapse.TerminalInfo": [[24, 1, 1, "", "Config"]], "bittensor.synapse.TerminalInfo.Config": [[24, 3, 1, "", "validate_assignment"]], "bittensor.tensor": [[25, 1, 1, "", "Tensor"], [25, 5, 1, "", "cast_dtype"], [25, 5, 1, "", "cast_shape"], [25, 1, 1, "", "tensor"]], "bittensor.tensor.Tensor": [[25, 1, 1, "", "Config"], [25, 3, 1, "", "buffer"], [25, 2, 1, "", "deserialize"], [25, 3, 1, "", "dtype"], [25, 2, 1, "", "numpy"], [25, 2, 1, "", "serialize"], [25, 3, 1, "", "shape"], [25, 2, 1, "", "tensor"], [25, 2, 1, "", "tolist"]], "bittensor.tensor.Tensor.Config": [[25, 3, 1, "", "validate_assignment"]], "bittensor.threadpool": [[26, 6, 1, "", "BrokenThreadPool"], [26, 1, 1, "", "PriorityThreadPoolExecutor"]], "bittensor.threadpool.PriorityThreadPoolExecutor": [[26, 2, 1, "", "add_args"], [26, 2, 1, "", "config"], [26, 4, 1, "", "is_empty"], [26, 2, 1, "", "shutdown"], [26, 2, 1, "", "submit"]], "bittensor.types": [[27, 1, 1, "", "AxonServeCallParams"], [27, 1, 1, "", "PrometheusServeCallParams"]], "bittensor.types.AxonServeCallParams": [[27, 3, 1, "", "ip"], [27, 3, 1, "", "ip_type"], [27, 3, 1, "", "netuid"], [27, 3, 1, "", "port"], [27, 3, 1, "", "version"]], "bittensor.types.PrometheusServeCallParams": [[27, 3, 1, "", "ip"], [27, 3, 1, "", "ip_type"], [27, 3, 1, "", "netuid"], [27, 3, 1, "", "port"], [27, 3, 1, "", "version"]], "bittensor.utils": [[28, 5, 1, "", "U16_NORMALIZED_FLOAT"], [28, 5, 1, "", "U64_NORMALIZED_FLOAT"], [29, 0, 0, "-", "balance"], [30, 0, 0, "-", "formatting"], [28, 5, 1, "", "get_explorer_root_url_by_network_from_map"], [28, 5, 1, "", "get_explorer_url_for_network"], [28, 5, 1, "", "hash"], [31, 0, 0, "-", "networking"], [32, 0, 0, "-", "registration"], [28, 5, 1, "", "ss58_address_to_bytes"], [28, 5, 1, "", "ss58_to_vec_u8"], [33, 0, 0, "-", "stats"], [28, 5, 1, "", "strtobool"], [28, 5, 1, "", "strtobool_with_default"], [34, 0, 0, "-", "test_utils"], [28, 5, 1, "", "u8_key_to_ss58"], [28, 5, 1, "", "unbiased_topk"], [28, 5, 1, "", "version_checking"], [35, 0, 0, "-", "wallet_utils"], [36, 0, 0, "-", "weight_utils"]], "bittensor.utils.balance": [[29, 1, 1, "", "Balance"]], "bittensor.utils.balance.Balance": [[29, 2, 1, "", "from_float"], [29, 2, 1, "", "from_rao"], [29, 2, 1, "", "from_tao"], [29, 3, 1, "id0", "rao"], [29, 3, 1, "id1", "rao_unit"], [29, 4, 1, "id2", "tao"], [29, 3, 1, "id3", "unit"]], "bittensor.utils.formatting": [[30, 5, 1, "", "get_human_readable"], [30, 5, 1, "", "millify"]], "bittensor.utils.networking": [[31, 6, 1, "", "ExternalIPNotFound"], [31, 5, 1, "", "get_external_ip"], [31, 5, 1, "", "get_formatted_ws_endpoint_url"], [31, 5, 1, "", "int_to_ip"], [31, 5, 1, "", "ip__str__"], [31, 5, 1, "", "ip_to_int"], [31, 5, 1, "", "ip_version"]], "bittensor.utils.registration": [[32, 6, 1, "", "CUDAException"], [32, 1, 1, "", "POWSolution"], [32, 1, 1, "", "RegistrationStatistics"], [32, 1, 1, "", "RegistrationStatisticsLogger"], [32, 5, 1, "", "create_pow"], [32, 5, 1, "", "get_cpu_count"]], "bittensor.utils.registration.POWSolution": [[32, 3, 1, "", "block_number"], [32, 3, 1, "", "difficulty"], [32, 2, 1, "", "is_stale"], [32, 3, 1, "", "nonce"], [32, 3, 1, "", "seal"]], "bittensor.utils.registration.RegistrationStatistics": [[32, 3, 1, "", "block_hash"], [32, 3, 1, "", "block_number"], [32, 3, 1, "", "difficulty"], [32, 3, 1, "", "hash_rate"], [32, 3, 1, "", "hash_rate_perpetual"], [32, 3, 1, "", "rounds_total"], [32, 3, 1, "", "time_average"], [32, 3, 1, "", "time_spent"], [32, 3, 1, "", "time_spent_total"]], "bittensor.utils.registration.RegistrationStatisticsLogger": [[32, 3, 1, "", "console"], [32, 2, 1, "", "get_status_message"], [32, 2, 1, "", "start"], [32, 3, 1, "", "status"], [32, 2, 1, "", "stop"], [32, 2, 1, "", "update"]], "bittensor.utils.stats": [[33, 1, 1, "", "AmountPerSecondRollingAverage"], [33, 1, 1, "", "EventsPerSecondRollingAverage"], [33, 1, 1, "", "timed_rolling_avg"]], "bittensor.utils.stats.AmountPerSecondRollingAverage": [[33, 2, 1, "", "event"], [33, 2, 1, "", "get"]], "bittensor.utils.stats.EventsPerSecondRollingAverage": [[33, 2, 1, "", "event"], [33, 2, 1, "", "get"]], "bittensor.utils.stats.timed_rolling_avg": [[33, 2, 1, "", "update"]], "bittensor.utils.test_utils": [[34, 5, 1, "", "get_random_unused_port"]], "bittensor.utils.wallet_utils": [[35, 5, 1, "", "get_ss58_format"], [35, 5, 1, "", "is_valid_bittensor_address_or_public_key"], [35, 5, 1, "", "is_valid_ed25519_pubkey"], [35, 5, 1, "", "is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[36, 5, 1, "", "convert_bond_uids_and_vals_to_tensor"], [36, 5, 1, "", "convert_root_weight_uids_and_vals_to_tensor"], [36, 5, 1, "", "convert_weight_uids_and_vals_to_tensor"], [36, 5, 1, "", "convert_weights_and_uids_for_emit"], [36, 5, 1, "", "normalize_max_weight"], [36, 5, 1, "", "process_weights_for_netuid"]], "bittensor.wallet": [[37, 5, 1, "", "display_mnemonic_msg"], [37, 1, 1, "", "wallet"]], "bittensor.wallet.wallet": [[37, 2, 1, "", "add_args"], [37, 4, 1, "", "coldkey"], [37, 4, 1, "", "coldkey_file"], [37, 4, 1, "", "coldkeypub"], [37, 4, 1, "", "coldkeypub_file"], [37, 2, 1, "", "config"], [37, 2, 1, "", "create"], [37, 2, 1, "", "create_coldkey_from_uri"], [37, 2, 1, "", "create_hotkey_from_uri"], [37, 2, 1, "", "create_if_non_existent"], [37, 2, 1, "", "create_new_coldkey"], [37, 2, 1, "", "create_new_hotkey"], [37, 2, 1, "", "get_coldkey"], [37, 2, 1, "", "get_coldkeypub"], [37, 2, 1, "", "get_hotkey"], [37, 2, 1, "", "help"], [37, 4, 1, "", "hotkey"], [37, 4, 1, "", "hotkey_file"], [37, 2, 1, "", "new_coldkey"], [37, 2, 1, "", "new_hotkey"], [37, 2, 1, "", "recreate"], [37, 2, 1, "", "regen_coldkey"], [37, 2, 1, "", "regen_coldkeypub"], [37, 2, 1, "", "regen_hotkey"], [37, 2, 1, "", "regenerate_coldkey"], [37, 2, 1, "", "regenerate_coldkeypub"], [37, 2, 1, "", "regenerate_hotkey"], [37, 2, 1, "", "set_coldkey"], [37, 2, 1, "", "set_coldkeypub"], [37, 2, 1, "", "set_hotkey"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"bittensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "packag": [0, 6, 28], "subpackag": 0, "submodul": [0, 6, 28], "axon": 1, "modul": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37], "chain_data": 2, "config": 3, "dendrit": 4, "error": 5, "extrins": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "deleg": 7, "log_util": 8, "network": [9, 31], "prometheu": 10, "registr": [11, 32], "root": 12, "senat": 13, "serv": 14, "set_weight": 15, "stake": 16, "transfer": 17, "unstak": 18, "keyfil": 19, "log": 20, "metagraph": 21, "stream": 22, "subtensor": 23, "synaps": 24, "tensor": 25, "threadpool": 26, "type": 27, "util": [28, 29, 30, 31, 32, 33, 34, 35, 36], "balanc": 29, "format": 30, "stat": 33, "test_util": 34, "wallet_util": 35, "weight_util": 36, "wallet": 37, "welcom": 39, "api": 39, "document": 39, "index": 39}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Welcome to Bittensor API Documentation": [[39, "welcome-to-bittensor-api-documentation"]], "Index": [[39, "index"]], "bittensor package": [[0, "bittensor-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"], [6, "submodules"], [28, "submodules"]], "bittensor.axon module": [[1, "module-bittensor.axon"]], "bittensor.chain_data module": [[2, "module-bittensor.chain_data"]], "bittensor.config module": [[3, "module-bittensor.config"]], "bittensor.dendrite module": [[4, "module-bittensor.dendrite"]], "bittensor.errors module": [[5, "module-bittensor.errors"]], "bittensor.extrinsics package": [[6, "module-bittensor.extrinsics"]], "bittensor.extrinsics.delegation module": [[7, "module-bittensor.extrinsics.delegation"]], "bittensor.extrinsics.log_utilities module": [[8, "bittensor-extrinsics-log-utilities-module"]], "bittensor.extrinsics.network module": [[9, "module-bittensor.extrinsics.network"]], "bittensor.extrinsics.prometheus module": [[10, "module-bittensor.extrinsics.prometheus"]], "bittensor.extrinsics.registration module": [[11, "module-bittensor.extrinsics.registration"]], "bittensor.extrinsics.root module": [[12, "module-bittensor.extrinsics.root"]], "bittensor.extrinsics.senate module": [[13, "module-bittensor.extrinsics.senate"]], "bittensor.extrinsics.serving module": [[14, "module-bittensor.extrinsics.serving"]], "bittensor.extrinsics.set_weights module": [[15, "module-bittensor.extrinsics.set_weights"]], "bittensor.extrinsics.staking module": [[16, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer module": [[17, "module-bittensor.extrinsics.transfer"]], "bittensor.extrinsics.unstaking module": [[18, "module-bittensor.extrinsics.unstaking"]], "bittensor.keyfile module": [[19, "module-bittensor.keyfile"]], "bittensor.logging module": [[20, "module-bittensor.logging"]], "bittensor.metagraph module": [[21, "module-bittensor.metagraph"]], "bittensor.stream module": [[22, "module-bittensor.stream"]], "bittensor.subtensor module": [[23, "module-bittensor.subtensor"]], "bittensor.synapse module": [[24, "module-bittensor.synapse"]], "bittensor.tensor module": [[25, "module-bittensor.tensor"]], "bittensor.threadpool module": [[26, "module-bittensor.threadpool"]], "bittensor.types module": [[27, "module-bittensor.types"]], "bittensor.utils package": [[28, "module-bittensor.utils"]], "bittensor.utils.balance module": [[29, "module-bittensor.utils.balance"]], "bittensor.utils.formatting module": [[30, "module-bittensor.utils.formatting"]], "bittensor.utils.networking module": [[31, "module-bittensor.utils.networking"]], "bittensor.utils.registration module": [[32, "module-bittensor.utils.registration"]], "bittensor.utils.stats module": [[33, "module-bittensor.utils.stats"]], "bittensor.utils.test_utils module": [[34, "module-bittensor.utils.test_utils"]], "bittensor.utils.wallet_utils module": [[35, "module-bittensor.utils.wallet_utils"]], "bittensor.utils.weight_utils module": [[36, "module-bittensor.utils.weight_utils"]], "bittensor.wallet module": [[37, "module-bittensor.wallet"]], "bittensor": [[38, "bittensor"]]}, "indexentries": {"axonmiddleware (class in bittensor.axon)": [[1, "bittensor.axon.AxonMiddleware"]], "fastapithreadedserver (class in bittensor.axon)": [[1, "bittensor.axon.FastAPIThreadedServer"]], "add_args() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.add_args"]], "attach() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.attach"]], "axon (class in bittensor.axon)": [[1, "bittensor.axon.axon"]], "bittensor.axon": [[1, "module-bittensor.axon"]], "blacklist() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.blacklist"]], "check_config() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.check_config"]], "config() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.config"]], "default_verify() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.default_verify"]], "dispatch() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.dispatch"]], "help() (bittensor.axon.axon class method)": [[1, "bittensor.axon.axon.help"]], "info() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.info"]], "install_signal_handlers() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.install_signal_handlers"]], "is_running (bittensor.axon.fastapithreadedserver attribute)": [[1, "bittensor.axon.FastAPIThreadedServer.is_running"]], "module": [[1, "module-bittensor.axon"], [2, "module-bittensor.chain_data"], [3, "module-bittensor.config"], [4, "module-bittensor.dendrite"], [5, "module-bittensor.errors"], [6, "module-bittensor.extrinsics"], [7, "module-bittensor.extrinsics.delegation"], [9, "module-bittensor.extrinsics.network"], [10, "module-bittensor.extrinsics.prometheus"], [11, "module-bittensor.extrinsics.registration"], [12, "module-bittensor.extrinsics.root"], [13, "module-bittensor.extrinsics.senate"], [14, "module-bittensor.extrinsics.serving"], [15, "module-bittensor.extrinsics.set_weights"], [16, "module-bittensor.extrinsics.staking"], [17, "module-bittensor.extrinsics.transfer"], [18, "module-bittensor.extrinsics.unstaking"], [19, "module-bittensor.keyfile"], [20, "module-bittensor.logging"], [21, "module-bittensor.metagraph"], [22, "module-bittensor.stream"], [23, "module-bittensor.subtensor"], [24, "module-bittensor.synapse"], [25, "module-bittensor.tensor"], [26, "module-bittensor.threadpool"], [27, "module-bittensor.types"], [28, "module-bittensor.utils"], [29, "module-bittensor.utils.balance"], [30, "module-bittensor.utils.formatting"], [31, "module-bittensor.utils.networking"], [32, "module-bittensor.utils.registration"], [33, "module-bittensor.utils.stats"], [34, "module-bittensor.utils.test_utils"], [35, "module-bittensor.utils.wallet_utils"], [36, "module-bittensor.utils.weight_utils"], [37, "module-bittensor.wallet"]], "postprocess() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.postprocess"]], "preprocess() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.preprocess"]], "priority() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.priority"]], "run() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.run"]], "run_in_thread() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.run_in_thread"]], "serve() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.serve"]], "should_exit (bittensor.axon.fastapithreadedserver attribute)": [[1, "bittensor.axon.FastAPIThreadedServer.should_exit"]], "start() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.start"]], "start() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.start"]], "stop() (bittensor.axon.fastapithreadedserver method)": [[1, "bittensor.axon.FastAPIThreadedServer.stop"]], "stop() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.stop"]], "verify() (bittensor.axon.axonmiddleware method)": [[1, "bittensor.axon.AxonMiddleware.verify"]], "verify_body_integrity() (bittensor.axon.axon method)": [[1, "bittensor.axon.axon.verify_body_integrity"]], "axoninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.AxonInfo"]], "chaindatatype (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ChainDataType"]], "delegateinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.DelegateInfo"]], "delegatedinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegatedInfo"]], "ipinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.IPInfo"]], "ipinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.IPInfo"]], "neuroninfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfo"]], "neuroninfolite (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfoLite"]], "prometheusinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.PrometheusInfo"]], "proposalvotedata (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalVoteData"]], "stakeinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.StakeInfo"]], "subnethyperparameters (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetHyperparameters"]], "subnetinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetInfo"]], "active (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.active"]], "active (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.active"]], "activity_cutoff (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.activity_cutoff"]], "adjustment_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.adjustment_interval"]], "axon_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.axon_info"]], "axon_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.axon_info"]], "ayes (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.ayes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "block (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.block"]], "blocks_since_epoch (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.blocks_since_epoch"]], "bonds (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.bonds"]], "bonds_moving_avg (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.bonds_moving_avg"]], "burn (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.burn"]], "coldkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.coldkey"]], "coldkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.coldkey_ss58"]], "connection_requirements (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.connection_requirements"]], "consensus (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.consensus"]], "consensus (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.consensus"]], "delegated_list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.delegated_list_from_vec_u8"]], "difficulty (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.difficulty"]], "dividends (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.dividends"]], "dividends (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.dividends"]], "emission (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.emission"]], "emission (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.emission"]], "emission_value (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.emission_value"]], "encode() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.encode"]], "end (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.end"]], "fix_decoded_values() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.prometheusinfo class method)": [[2, "bittensor.chain_data.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.fix_decoded_values"]], "from_neuron_info() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding_using_type_string"]], "from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "hotkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.hotkey"]], "hotkey_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.hotkey_ss58"]], "immunity_period (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.immunity_period"]], "incentive (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.incentive"]], "incentive (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.incentive"]], "index (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.index"]], "ip (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip"]], "ip (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip"]], "ip (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip"]], "ip_str() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.ip_str"]], "ip_type (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip_type"]], "ip_type (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip_type"]], "ip_type (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip_type"]], "is_null (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.is_null"]], "is_null (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.is_null"]], "is_serving (bittensor.chain_data.axoninfo property)": [[2, "bittensor.chain_data.AxonInfo.is_serving"]], "kappa (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.kappa"]], "kappa (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.kappa"]], "last_update (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.last_update"]], "last_update (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.last_update"]], "list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_of_tuple_from_vec_u8"]], "max_allowed_validators (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_allowed_validators"]], "max_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_n"]], "max_regs_per_block (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_weight_limit"]], "min_allowed_weights (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.min_allowed_weights"]], "min_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.modality"]], "nays (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.nays"]], "netuid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.netuid"]], "netuid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.netuid"]], "netuid (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.netuid"]], "nominators (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.nominators"]], "owner_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.owner_ss58"]], "placeholder1 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder1"]], "placeholder2 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder2"]], "port (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.port"]], "port (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.port"]], "prometheus_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.protocol"]], "protocol (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.protocol"]], "pruning_score (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.pruning_score"]], "pruning_score (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.pruning_score"]], "rank (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.rank"]], "rank (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.rank"]], "registration_allowed (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.registrations"]], "return_per_1000 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.return_per_1000"]], "rho (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.rho"]], "rho (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.rho"]], "scaling_law_power (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.scaling_law_power"]], "stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake"]], "stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake"]], "stake (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.stake"]], "stake_dict (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake_dict"]], "stake_dict (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake_dict"]], "subnetwork_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.subnetwork_n"]], "take (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.take"]], "target_regs_per_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.tempo"]], "tempo (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.tempo"]], "threshold (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.threshold"]], "to_parameter_dict() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnethyperparameters method)": [[2, "bittensor.chain_data.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnetinfo method)": [[2, "bittensor.chain_data.SubnetInfo.to_parameter_dict"]], "total_daily_return (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_daily_return"]], "total_stake (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.total_stake"]], "trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.trust"]], "trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.trust"]], "uid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.uid"]], "uid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.uid"]], "validator_permit (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_permit"]], "validator_permit (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.validator_permits"]], "validator_trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_trust"]], "validator_trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_trust"]], "version (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.version"]], "version (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.version"]], "weights (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.weights"]], "weights_rate_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_version"]], "defaultconfig (class in bittensor.config)": [[3, "bittensor.config.DefaultConfig"]], "invalidconfigfile": [[3, "bittensor.config.InvalidConfigFile"]], "bittensor.config": [[3, "module-bittensor.config"]], "config (class in bittensor.config)": [[3, "bittensor.config.config"]], "copy() (bittensor.config.config method)": [[3, "bittensor.config.config.copy"]], "default() (bittensor.config.defaultconfig class method)": [[3, "bittensor.config.DefaultConfig.default"]], "is_set() (bittensor.config.config method)": [[3, "bittensor.config.config.is_set"]], "merge() (bittensor.config.config method)": [[3, "bittensor.config.config.merge"]], "merge_all() (bittensor.config.config class method)": [[3, "bittensor.config.config.merge_all"]], "to_string() (bittensor.config.config method)": [[3, "bittensor.config.config.to_string"]], "update_with_kwargs() (bittensor.config.config method)": [[3, "bittensor.config.config.update_with_kwargs"]], "__repr__() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.__repr__"]], "__str__() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.__str__"]], "aclose_session() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.aclose_session"], [4, "id0"]], "bittensor.dendrite": [[4, "module-bittensor.dendrite"]], "call() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.call"], [4, "id1"]], "call_stream() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.call_stream"], [4, "id2"]], "close_session() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.close_session"], [4, "id3"]], "dendrite (class in bittensor.dendrite)": [[4, "bittensor.dendrite.dendrite"]], "external_ip (bittensor.dendrite.dendrite attribute)": [[4, "bittensor.dendrite.dendrite.external_ip"]], "forward() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.forward"], [4, "id4"]], "keypair (bittensor.dendrite.dendrite attribute)": [[4, "bittensor.dendrite.dendrite.keypair"]], "preprocess_synapse_for_request() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.preprocess_synapse_for_request"], [4, "id5"]], "process_server_response() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.process_server_response"], [4, "id6"]], "query() (bittensor.dendrite.dendrite method)": [[4, "bittensor.dendrite.dendrite.query"], [4, "id7"]], "session (bittensor.dendrite.dendrite property)": [[4, "bittensor.dendrite.dendrite.session"]], "synapse_history (bittensor.dendrite.dendrite attribute)": [[4, "bittensor.dendrite.dendrite.synapse_history"]], "chainconnectionerror": [[5, "bittensor.errors.ChainConnectionError"]], "chainerror": [[5, "bittensor.errors.ChainError"]], "chainqueryerror": [[5, "bittensor.errors.ChainQueryError"]], "chaintransactionerror": [[5, "bittensor.errors.ChainTransactionError"]], "keyfileerror": [[5, "bittensor.errors.KeyFileError"]], "nominationerror": [[5, "bittensor.errors.NominationError"]], "notdelegateerror": [[5, "bittensor.errors.NotDelegateError"]], "notregisterederror": [[5, "bittensor.errors.NotRegisteredError"]], "registrationerror": [[5, "bittensor.errors.RegistrationError"]], "stakeerror": [[5, "bittensor.errors.StakeError"]], "transfererror": [[5, "bittensor.errors.TransferError"]], "unstakeerror": [[5, "bittensor.errors.UnstakeError"]], "bittensor.errors": [[5, "module-bittensor.errors"]], "bittensor.extrinsics": [[6, "module-bittensor.extrinsics"]], "bittensor.extrinsics.delegation": [[7, "module-bittensor.extrinsics.delegation"]], "delegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[7, "bittensor.extrinsics.delegation.delegate_extrinsic"]], "nominate_extrinsic() (in module bittensor.extrinsics.delegation)": [[7, "bittensor.extrinsics.delegation.nominate_extrinsic"]], "undelegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[7, "bittensor.extrinsics.delegation.undelegate_extrinsic"]], "bittensor.extrinsics.network": [[9, "module-bittensor.extrinsics.network"]], "register_subnetwork_extrinsic() (in module bittensor.extrinsics.network)": [[9, "bittensor.extrinsics.network.register_subnetwork_extrinsic"]], "set_hyperparameter_extrinsic() (in module bittensor.extrinsics.network)": [[9, "bittensor.extrinsics.network.set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[10, "module-bittensor.extrinsics.prometheus"]], "prometheus_extrinsic() (in module bittensor.extrinsics.prometheus)": [[10, "bittensor.extrinsics.prometheus.prometheus_extrinsic"]], "maxattemptsexception": [[11, "bittensor.extrinsics.registration.MaxAttemptsException"]], "maxsuccessexception": [[11, "bittensor.extrinsics.registration.MaxSuccessException"]], "bittensor.extrinsics.registration": [[11, "module-bittensor.extrinsics.registration"]], "burned_register_extrinsic() (in module bittensor.extrinsics.registration)": [[11, "bittensor.extrinsics.registration.burned_register_extrinsic"]], "register_extrinsic() (in module bittensor.extrinsics.registration)": [[11, "bittensor.extrinsics.registration.register_extrinsic"]], "run_faucet_extrinsic() (in module bittensor.extrinsics.registration)": [[11, "bittensor.extrinsics.registration.run_faucet_extrinsic"]], "bittensor.extrinsics.root": [[12, "module-bittensor.extrinsics.root"]], "root_register_extrinsic() (in module bittensor.extrinsics.root)": [[12, "bittensor.extrinsics.root.root_register_extrinsic"]], "set_root_weights_extrinsic() (in module bittensor.extrinsics.root)": [[12, "bittensor.extrinsics.root.set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[13, "module-bittensor.extrinsics.senate"]], "leave_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[13, "bittensor.extrinsics.senate.leave_senate_extrinsic"]], "register_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[13, "bittensor.extrinsics.senate.register_senate_extrinsic"]], "vote_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[13, "bittensor.extrinsics.senate.vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[14, "module-bittensor.extrinsics.serving"]], "serve_axon_extrinsic() (in module bittensor.extrinsics.serving)": [[14, "bittensor.extrinsics.serving.serve_axon_extrinsic"]], "serve_extrinsic() (in module bittensor.extrinsics.serving)": [[14, "bittensor.extrinsics.serving.serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[15, "module-bittensor.extrinsics.set_weights"]], "set_weights_extrinsic() (in module bittensor.extrinsics.set_weights)": [[15, "bittensor.extrinsics.set_weights.set_weights_extrinsic"]], "add_stake_extrinsic() (in module bittensor.extrinsics.staking)": [[16, "bittensor.extrinsics.staking.add_stake_extrinsic"]], "add_stake_multiple_extrinsic() (in module bittensor.extrinsics.staking)": [[16, "bittensor.extrinsics.staking.add_stake_multiple_extrinsic"]], "bittensor.extrinsics.staking": [[16, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[17, "module-bittensor.extrinsics.transfer"]], "transfer_extrinsic() (in module bittensor.extrinsics.transfer)": [[17, "bittensor.extrinsics.transfer.transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[18, "module-bittensor.extrinsics.unstaking"]], "unstake_extrinsic() (in module bittensor.extrinsics.unstaking)": [[18, "bittensor.extrinsics.unstaking.unstake_extrinsic"]], "unstake_multiple_extrinsic() (in module bittensor.extrinsics.unstaking)": [[18, "bittensor.extrinsics.unstaking.unstake_multiple_extrinsic"]], "mockkeyfile (class in bittensor.keyfile)": [[19, "bittensor.keyfile.Mockkeyfile"]], "ask_password_to_encrypt() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.ask_password_to_encrypt"]], "bittensor.keyfile": [[19, "module-bittensor.keyfile"]], "check_and_update_encryption() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.check_and_update_encryption"]], "data (bittensor.keyfile.mockkeyfile property)": [[19, "bittensor.keyfile.Mockkeyfile.data"]], "data (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.data"]], "decrypt() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.decrypt_keyfile_data"]], "deserialize_keypair_from_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.deserialize_keypair_from_keyfile_data"]], "encrypt() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.encrypt_keyfile_data"]], "exists_on_device() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.exists_on_device"]], "get_coldkey_password_from_environment() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.get_coldkey_password_from_environment"]], "get_keypair() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.get_keypair"]], "is_encrypted() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_encrypted"]], "is_readable() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_readable"]], "is_writable() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.is_writable"]], "keyfile (class in bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile"]], "keyfile_data (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.keyfile.mockkeyfile property)": [[19, "bittensor.keyfile.Mockkeyfile.keypair"]], "keypair (bittensor.keyfile.keyfile property)": [[19, "bittensor.keyfile.keyfile.keypair"]], "legacy_encrypt_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.legacy_encrypt_keyfile_data"]], "make_dirs() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.make_dirs"]], "serialized_keypair_to_keyfile_data() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.serialized_keypair_to_keyfile_data"]], "set_keypair() (bittensor.keyfile.mockkeyfile method)": [[19, "bittensor.keyfile.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile.keyfile method)": [[19, "bittensor.keyfile.keyfile.set_keypair"]], "validate_password() (in module bittensor.keyfile)": [[19, "bittensor.keyfile.validate_password"]], "add_args() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.add_args"]], "bittensor.logging": [[20, "module-bittensor.logging"]], "check_config() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.check_config"]], "config() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.config"]], "debug() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.debug"]], "error() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.error"]], "get_level() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.get_level"]], "help() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.help"]], "info() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.info"]], "log_filter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_filter"]], "log_formatter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_formatter"]], "log_save_filter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.log_save_formatter"]], "logging (class in bittensor.logging)": [[20, "bittensor.logging.logging"]], "set_debug() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.set_debug"]], "set_trace() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.set_trace"]], "success() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.success"]], "trace() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.trace"]], "warning() (bittensor.logging.logging class method)": [[20, "bittensor.logging.logging.warning"]], "b (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.B"]], "c (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.C"]], "d (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.D"]], "e (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.E"]], "i (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.I"]], "r (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.R"]], "s (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.S"]], "t (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.T"]], "tv (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.Tv"]], "w (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.W"]], "active (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.active"]], "addresses (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.addresses"]], "axons (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.axons"]], "bittensor.metagraph": [[21, "module-bittensor.metagraph"]], "block (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.block"]], "bonds (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.bonds"]], "coldkeys (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.coldkeys"]], "consensus (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.consensus"]], "dividends (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.dividends"]], "emission (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.emission"]], "get_save_dir() (in module bittensor.metagraph)": [[21, "bittensor.metagraph.get_save_dir"]], "hotkeys (bittensor.metagraph.metagraph property)": [[21, "bittensor.metagraph.metagraph.hotkeys"]], "incentive (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.incentive"]], "last_update (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.last_update"]], "latest_block_path() (in module bittensor.metagraph)": [[21, "bittensor.metagraph.latest_block_path"]], "load() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.load"]], "load_from_path() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.load_from_path"]], "metadata() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.metadata"]], "metagraph (class in bittensor.metagraph)": [[21, "bittensor.metagraph.metagraph"]], "n (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.n"]], "netuid (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.netuid"]], "network (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.network"]], "ranks (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.ranks"]], "save() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.save"]], "stake (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.stake"]], "sync() (bittensor.metagraph.metagraph method)": [[21, "bittensor.metagraph.metagraph.sync"]], "total_stake (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.total_stake"]], "trust (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.trust"]], "uids (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.uids"]], "validator_permit (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.validator_permit"]], "validator_trust (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.validator_trust"]], "version (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.version"]], "weights (bittensor.metagraph.metagraph attribute)": [[21, "bittensor.metagraph.metagraph.weights"]], "btstreamingresponsemodel (class in bittensor.stream)": [[22, "bittensor.stream.BTStreamingResponseModel"]], "streamingsynapse (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor.stream)": [[22, "bittensor.stream.StreamingSynapse.Config"]], "bittensor.stream": [[22, "module-bittensor.stream"]], "create_streaming_response() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.create_streaming_response"]], "extract_response_json() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.extract_response_json"]], "process_streaming_response() (bittensor.stream.streamingsynapse method)": [[22, "bittensor.stream.StreamingSynapse.process_streaming_response"]], "stream_response() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[22, "bittensor.stream.StreamingSynapse.BTStreamingResponse.stream_response"]], "token_streamer (bittensor.stream.btstreamingresponsemodel attribute)": [[22, "bittensor.stream.BTStreamingResponseModel.token_streamer"], [22, "id0"]], "validate_assignment (bittensor.stream.streamingsynapse.config attribute)": [[22, "bittensor.stream.StreamingSynapse.Config.validate_assignment"]], "paramwithtypes (class in bittensor.subtensor)": [[23, "bittensor.subtensor.ParamWithTypes"]], "add_args() (bittensor.subtensor.subtensor class method)": [[23, "bittensor.subtensor.subtensor.add_args"]], "add_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.add_stake_multiple"]], "associated_validator_ip_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.associated_validator_ip_info"]], "bittensor.subtensor": [[23, "module-bittensor.subtensor"]], "block (bittensor.subtensor.subtensor property)": [[23, "bittensor.subtensor.subtensor.block"]], "blocks_since_epoch() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.blocks_since_epoch"]], "bonds() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.bonds"]], "burn() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.burn"]], "burned_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.burned_register"]], "config() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.config"]], "delegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.delegate"]], "determine_chain_endpoint_and_network() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.difficulty"]], "does_hotkey_exist() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.does_hotkey_exist"]], "get_all_neurons_for_pubkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_block_hash"]], "get_current_block() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_existential_deposit"]], "get_hotkey_owner() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_hotkey_owner"]], "get_netuids_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_senate_members"]], "get_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_subnets"]], "get_total_stake_for_coldkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.get_vote_data"]], "help() (bittensor.subtensor.subtensor class method)": [[23, "bittensor.subtensor.subtensor.help"]], "immunity_period() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.immunity_period"]], "incentive() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.incentive"]], "is_hotkey_delegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_hotkey_registered_on_subnet"]], "is_senate_member() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.is_senate_member"]], "kappa() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.kappa"]], "leave_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.leave_senate"]], "max_allowed_validators() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_allowed_validators"]], "max_n() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_n"]], "max_weight_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.max_weight_limit"]], "metagraph() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.metagraph"]], "min_allowed_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.min_allowed_weights"]], "name (bittensor.subtensor.paramwithtypes attribute)": [[23, "bittensor.subtensor.ParamWithTypes.name"]], "neuron_for_uid() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.neurons_lite"]], "nominate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.nominate"]], "query_constant() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_constant"]], "query_map() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.query_subtensor"]], "register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register"]], "register_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.register_subnetwork"]], "rho() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.rho"]], "root_register() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.run_faucet"]], "scaling_law_power() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.scaling_law_power"]], "serve() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.serving_rate_limit"]], "set_hyperparameter() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.set_hyperparameter"]], "set_weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor.subtensor static method)": [[23, "bittensor.subtensor.subtensor.setup_config"]], "state_call() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.state_call"]], "subnet_exists() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.subnet_exists"]], "subnetwork_n() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor.subtensor)": [[23, "bittensor.subtensor.subtensor"]], "synergy_scaling_law_power() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.synergy_scaling_law_power"]], "tempo() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.tempo"]], "total_issuance() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.total_issuance"]], "total_stake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.total_stake"]], "transfer() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.transfer"]], "tx_rate_limit() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.tx_rate_limit"]], "type (bittensor.subtensor.paramwithtypes attribute)": [[23, "bittensor.subtensor.ParamWithTypes.type"]], "undelegate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.unstake_multiple"]], "validator_batch_size() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_logits_divergence"]], "validator_prune_len() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.validator_sequence_length"]], "vote_senate() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.vote_senate"]], "weights() (bittensor.subtensor.subtensor method)": [[23, "bittensor.subtensor.subtensor.weights"]], "synapse (class in bittensor.synapse)": [[24, "bittensor.synapse.Synapse"]], "synapse.config (class in bittensor.synapse)": [[24, "bittensor.synapse.Synapse.Config"]], "terminalinfo (class in bittensor.synapse)": [[24, "bittensor.synapse.TerminalInfo"]], "terminalinfo.config (class in bittensor.synapse)": [[24, "bittensor.synapse.TerminalInfo.Config"]], "bittensor.synapse": [[24, "module-bittensor.synapse"]], "body_hash (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.body_hash"]], "cast_float() (in module bittensor.synapse)": [[24, "bittensor.synapse.cast_float"]], "cast_int() (in module bittensor.synapse)": [[24, "bittensor.synapse.cast_int"]], "deserialize() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.deserialize"]], "failed_verification (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.failed_verification"]], "from_headers() (bittensor.synapse.synapse class method)": [[24, "bittensor.synapse.Synapse.from_headers"]], "get_size() (in module bittensor.synapse)": [[24, "bittensor.synapse.get_size"]], "get_total_size() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.get_total_size"]], "is_blacklist (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_blacklist"]], "is_failure (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_failure"]], "is_success (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_success"]], "is_timeout (bittensor.synapse.synapse property)": [[24, "bittensor.synapse.Synapse.is_timeout"]], "parse_headers_to_inputs() (bittensor.synapse.synapse class method)": [[24, "bittensor.synapse.Synapse.parse_headers_to_inputs"]], "set_name_type() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.set_name_type"]], "to_headers() (bittensor.synapse.synapse method)": [[24, "bittensor.synapse.Synapse.to_headers"]], "validate_assignment (bittensor.synapse.synapse.config attribute)": [[24, "bittensor.synapse.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.terminalinfo.config attribute)": [[24, "bittensor.synapse.TerminalInfo.Config.validate_assignment"]], "tensor (class in bittensor.tensor)": [[25, "bittensor.tensor.Tensor"], [25, "bittensor.tensor.tensor"]], "tensor.config (class in bittensor.tensor)": [[25, "bittensor.tensor.Tensor.Config"]], "bittensor.tensor": [[25, "module-bittensor.tensor"]], "buffer (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.buffer"]], "cast_dtype() (in module bittensor.tensor)": [[25, "bittensor.tensor.cast_dtype"]], "cast_shape() (in module bittensor.tensor)": [[25, "bittensor.tensor.cast_shape"]], "deserialize() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.deserialize"]], "dtype (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.dtype"]], "numpy() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.numpy"]], "serialize() (bittensor.tensor.tensor static method)": [[25, "bittensor.tensor.Tensor.serialize"]], "shape (bittensor.tensor.tensor attribute)": [[25, "bittensor.tensor.Tensor.shape"]], "tensor() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.tensor"]], "tolist() (bittensor.tensor.tensor method)": [[25, "bittensor.tensor.Tensor.tolist"]], "validate_assignment (bittensor.tensor.tensor.config attribute)": [[25, "bittensor.tensor.Tensor.Config.validate_assignment"]], "brokenthreadpool": [[26, "bittensor.threadpool.BrokenThreadPool"]], "prioritythreadpoolexecutor (class in bittensor.threadpool)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor"]], "add_args() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.add_args"]], "bittensor.threadpool": [[26, "module-bittensor.threadpool"]], "config() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.config"]], "is_empty (bittensor.threadpool.prioritythreadpoolexecutor property)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.is_empty"]], "shutdown() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.shutdown"]], "submit() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[26, "bittensor.threadpool.PriorityThreadPoolExecutor.submit"]], "axonservecallparams (class in bittensor.types)": [[27, "bittensor.types.AxonServeCallParams"]], "prometheusservecallparams (class in bittensor.types)": [[27, "bittensor.types.PrometheusServeCallParams"]], "bittensor.types": [[27, "module-bittensor.types"]], "ip (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.ip"]], "ip (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.ip"]], "ip_type (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.ip_type"]], "ip_type (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.netuid"]], "netuid (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.netuid"]], "port (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.port"]], "port (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.port"]], "version (bittensor.types.axonservecallparams attribute)": [[27, "bittensor.types.AxonServeCallParams.version"]], "version (bittensor.types.prometheusservecallparams attribute)": [[27, "bittensor.types.PrometheusServeCallParams.version"]], "u16_normalized_float() (in module bittensor.utils)": [[28, "bittensor.utils.U16_NORMALIZED_FLOAT"]], "u64_normalized_float() (in module bittensor.utils)": [[28, "bittensor.utils.U64_NORMALIZED_FLOAT"]], "bittensor.utils": [[28, "module-bittensor.utils"]], "get_explorer_root_url_by_network_from_map() (in module bittensor.utils)": [[28, "bittensor.utils.get_explorer_root_url_by_network_from_map"]], "get_explorer_url_for_network() (in module bittensor.utils)": [[28, "bittensor.utils.get_explorer_url_for_network"]], "hash() (in module bittensor.utils)": [[28, "bittensor.utils.hash"]], "ss58_address_to_bytes() (in module bittensor.utils)": [[28, "bittensor.utils.ss58_address_to_bytes"]], "ss58_to_vec_u8() (in module bittensor.utils)": [[28, "bittensor.utils.ss58_to_vec_u8"]], "strtobool() (in module bittensor.utils)": [[28, "bittensor.utils.strtobool"]], "strtobool_with_default() (in module bittensor.utils)": [[28, "bittensor.utils.strtobool_with_default"]], "u8_key_to_ss58() (in module bittensor.utils)": [[28, "bittensor.utils.u8_key_to_ss58"]], "unbiased_topk() (in module bittensor.utils)": [[28, "bittensor.utils.unbiased_topk"]], "version_checking() (in module bittensor.utils)": [[28, "bittensor.utils.version_checking"]], "balance (class in bittensor.utils.balance)": [[29, "bittensor.utils.balance.Balance"]], "bittensor.utils.balance": [[29, "module-bittensor.utils.balance"]], "from_float() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_float"]], "from_rao() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_rao"]], "from_tao() (bittensor.utils.balance.balance static method)": [[29, "bittensor.utils.balance.Balance.from_tao"]], "rao (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.rao"], [29, "id0"]], "rao_unit (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.rao_unit"], [29, "id1"]], "tao (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.tao"]], "tao (bittensor.utils.balance.balance property)": [[29, "id2"]], "unit (bittensor.utils.balance.balance attribute)": [[29, "bittensor.utils.balance.Balance.unit"], [29, "id3"]], "bittensor.utils.formatting": [[30, "module-bittensor.utils.formatting"]], "get_human_readable() (in module bittensor.utils.formatting)": [[30, "bittensor.utils.formatting.get_human_readable"]], "millify() (in module bittensor.utils.formatting)": [[30, "bittensor.utils.formatting.millify"]], "externalipnotfound": [[31, "bittensor.utils.networking.ExternalIPNotFound"]], "bittensor.utils.networking": [[31, "module-bittensor.utils.networking"]], "get_external_ip() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.get_external_ip"]], "get_formatted_ws_endpoint_url() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.get_formatted_ws_endpoint_url"]], "int_to_ip() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.int_to_ip"]], "ip__str__() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.ip__str__"]], "ip_to_int() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.ip_to_int"]], "ip_version() (in module bittensor.utils.networking)": [[31, "bittensor.utils.networking.ip_version"]], "cudaexception": [[32, "bittensor.utils.registration.CUDAException"]], "powsolution (class in bittensor.utils.registration)": [[32, "bittensor.utils.registration.POWSolution"]], "registrationstatistics (class in bittensor.utils.registration)": [[32, "bittensor.utils.registration.RegistrationStatistics"]], "registrationstatisticslogger (class in bittensor.utils.registration)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger"]], "bittensor.utils.registration": [[32, "module-bittensor.utils.registration"]], "block_hash (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.block_hash"]], "block_number (bittensor.utils.registration.powsolution attribute)": [[32, "bittensor.utils.registration.POWSolution.block_number"]], "block_number (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.block_number"]], "console (bittensor.utils.registration.registrationstatisticslogger attribute)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.console"]], "create_pow() (in module bittensor.utils.registration)": [[32, "bittensor.utils.registration.create_pow"]], "difficulty (bittensor.utils.registration.powsolution attribute)": [[32, "bittensor.utils.registration.POWSolution.difficulty"]], "difficulty (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.difficulty"]], "get_cpu_count() (in module bittensor.utils.registration)": [[32, "bittensor.utils.registration.get_cpu_count"]], "get_status_message() (bittensor.utils.registration.registrationstatisticslogger method)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.get_status_message"]], "hash_rate (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.hash_rate"]], "hash_rate_perpetual (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.hash_rate_perpetual"]], "is_stale() (bittensor.utils.registration.powsolution method)": [[32, "bittensor.utils.registration.POWSolution.is_stale"]], "nonce (bittensor.utils.registration.powsolution attribute)": [[32, "bittensor.utils.registration.POWSolution.nonce"]], "rounds_total (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.rounds_total"]], "seal (bittensor.utils.registration.powsolution attribute)": [[32, "bittensor.utils.registration.POWSolution.seal"]], "start() (bittensor.utils.registration.registrationstatisticslogger method)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.start"]], "status (bittensor.utils.registration.registrationstatisticslogger attribute)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.status"]], "stop() (bittensor.utils.registration.registrationstatisticslogger method)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.stop"]], "time_average (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.time_average"]], "time_spent (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.time_spent"]], "time_spent_total (bittensor.utils.registration.registrationstatistics attribute)": [[32, "bittensor.utils.registration.RegistrationStatistics.time_spent_total"]], "update() (bittensor.utils.registration.registrationstatisticslogger method)": [[32, "bittensor.utils.registration.RegistrationStatisticsLogger.update"]], "amountpersecondrollingaverage (class in bittensor.utils.stats)": [[33, "bittensor.utils.stats.AmountPerSecondRollingAverage"]], "eventspersecondrollingaverage (class in bittensor.utils.stats)": [[33, "bittensor.utils.stats.EventsPerSecondRollingAverage"]], "bittensor.utils.stats": [[33, "module-bittensor.utils.stats"]], "event() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[33, "bittensor.utils.stats.AmountPerSecondRollingAverage.event"]], "event() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[33, "bittensor.utils.stats.EventsPerSecondRollingAverage.event"]], "get() (bittensor.utils.stats.amountpersecondrollingaverage method)": [[33, "bittensor.utils.stats.AmountPerSecondRollingAverage.get"]], "get() (bittensor.utils.stats.eventspersecondrollingaverage method)": [[33, "bittensor.utils.stats.EventsPerSecondRollingAverage.get"]], "timed_rolling_avg (class in bittensor.utils.stats)": [[33, "bittensor.utils.stats.timed_rolling_avg"]], "update() (bittensor.utils.stats.timed_rolling_avg method)": [[33, "bittensor.utils.stats.timed_rolling_avg.update"]], "bittensor.utils.test_utils": [[34, "module-bittensor.utils.test_utils"]], "get_random_unused_port() (in module bittensor.utils.test_utils)": [[34, "bittensor.utils.test_utils.get_random_unused_port"]], "bittensor.utils.wallet_utils": [[35, "module-bittensor.utils.wallet_utils"]], "get_ss58_format() (in module bittensor.utils.wallet_utils)": [[35, "bittensor.utils.wallet_utils.get_ss58_format"]], "is_valid_bittensor_address_or_public_key() (in module bittensor.utils.wallet_utils)": [[35, "bittensor.utils.wallet_utils.is_valid_bittensor_address_or_public_key"]], "is_valid_ed25519_pubkey() (in module bittensor.utils.wallet_utils)": [[35, "bittensor.utils.wallet_utils.is_valid_ed25519_pubkey"]], "is_valid_ss58_address() (in module bittensor.utils.wallet_utils)": [[35, "bittensor.utils.wallet_utils.is_valid_ss58_address"]], "bittensor.utils.weight_utils": [[36, "module-bittensor.utils.weight_utils"]], "convert_bond_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.convert_bond_uids_and_vals_to_tensor"]], "convert_root_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.convert_root_weight_uids_and_vals_to_tensor"]], "convert_weight_uids_and_vals_to_tensor() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.convert_weight_uids_and_vals_to_tensor"]], "convert_weights_and_uids_for_emit() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.convert_weights_and_uids_for_emit"]], "normalize_max_weight() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.normalize_max_weight"]], "process_weights_for_netuid() (in module bittensor.utils.weight_utils)": [[36, "bittensor.utils.weight_utils.process_weights_for_netuid"]], "add_args() (bittensor.wallet.wallet class method)": [[37, "bittensor.wallet.wallet.add_args"]], "bittensor.wallet": [[37, "module-bittensor.wallet"]], "coldkey (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.coldkey"]], "coldkey_file (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.coldkey_file"]], "coldkeypub (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.coldkeypub_file"]], "config() (bittensor.wallet.wallet class method)": [[37, "bittensor.wallet.wallet.config"]], "create() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.create_new_hotkey"]], "display_mnemonic_msg() (in module bittensor.wallet)": [[37, "bittensor.wallet.display_mnemonic_msg"]], "get_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.get_coldkey"]], "get_coldkeypub() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.get_coldkeypub"]], "get_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.get_hotkey"]], "help() (bittensor.wallet.wallet class method)": [[37, "bittensor.wallet.wallet.help"]], "hotkey (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.hotkey"]], "hotkey_file (bittensor.wallet.wallet property)": [[37, "bittensor.wallet.wallet.hotkey_file"]], "new_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.new_hotkey"]], "recreate() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.recreate"]], "regen_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regen_coldkey"]], "regen_coldkeypub() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regen_coldkeypub"]], "regen_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.regenerate_hotkey"]], "set_coldkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.set_coldkeypub"]], "set_hotkey() (bittensor.wallet.wallet method)": [[37, "bittensor.wallet.wallet.set_hotkey"]], "wallet (class in bittensor.wallet)": [[37, "bittensor.wallet.wallet"]]}})